### YamlMime:ManagedReference
items:
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1
  commentId: T:Catalyst.Core.Lib.Repository.RepositoryWrapper`1
  id: RepositoryWrapper`1
  parent: Catalyst.Core.Lib.Repository
  children:
  - Catalyst.Core.Lib.Repository.RepositoryWrapper`1.#ctor(IRepository{`0,System.String})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Add(`0)
  - Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Add(System.Collections.Generic.IEnumerable{`0})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper`1.AsQueryable
  - Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Double}})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Int32}})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Int64}})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Decimal}}})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Double}}})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int32}}})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int64}}})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Single}}})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Single}})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Double}})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Int32}})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Int64}})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Decimal}}})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Double}}})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int32}}})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int64}}})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Single}}})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Single}})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Double}})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Int32}})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Int64}})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Decimal}}})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Double}}})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int32}}})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int64}}})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Single}}})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Single}})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper`1.BeginBatch
  - Catalyst.Core.Lib.Repository.RepositoryWrapper`1.CacheUsed
  - Catalyst.Core.Lib.Repository.RepositoryWrapper`1.CachingEnabled
  - Catalyst.Core.Lib.Repository.RepositoryWrapper`1.CachingStrategy
  - Catalyst.Core.Lib.Repository.RepositoryWrapper`1.ClearCache
  - Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Conventions
  - Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Count
  - Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Count(ISpecification{`0})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Count(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Delete(`0)
  - Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Delete(ISpecification{`0})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Delete(System.Collections.Generic.IEnumerable{`0})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Delete(System.Collections.Generic.IEnumerable{System.String})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Delete(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Delete(System.String)
  - Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Delete(System.String[])
  - Catalyst.Core.Lib.Repository.RepositoryWrapper`1.DisableCaching
  - Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Dispose
  - Catalyst.Core.Lib.Repository.RepositoryWrapper`1.EntityType
  - Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Exists(ISpecification{`0})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Exists(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Exists(System.String)
  - Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Find(ISpecification{`0},IQueryOptions{`0})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Find(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},IQueryOptions{`0})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Find``1(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}},IQueryOptions{`0})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Find``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},IQueryOptions{`0})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper`1.FindAll(ISpecification{`0},IQueryOptions{`0})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper`1.FindAll(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},IQueryOptions{`0})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper`1.FindAll``1(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}},IQueryOptions{`0})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper`1.FindAll``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},IQueryOptions{`0})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GenerateKeyOnAdd
  - Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Get(System.String)
  - Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Get(System.String,IFetchStrategy{`0})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Get(System.String,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])
  - Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Get(System.String,System.String[])
  - Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Get``1(System.String,System.Linq.Expressions.Expression{System.Func{`0,``0}})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Get``1(System.String,System.Linq.Expressions.Expression{System.Func{`0,``0}},IFetchStrategy{`0})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Get``1(System.String,System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])
  - Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Get``1(System.String,System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String[])
  - Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll
  - Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll(IFetchStrategy{`0})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll(IQueryOptions{`0})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll(IQueryOptions{`0},IFetchStrategy{`0})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll(IQueryOptions{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])
  - Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll(IQueryOptions{`0},System.String[])
  - Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll(System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])
  - Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll(System.String[])
  - Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},IFetchStrategy{`0})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},IQueryOptions{`0})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},IQueryOptions{`0},IFetchStrategy{`0})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},IQueryOptions{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])
  - Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},IQueryOptions{`0},System.String[])
  - Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])
  - Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String[])
  - Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetMany(System.Collections.Generic.IEnumerable{System.String})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetMany(System.Collections.Generic.IEnumerable{System.String},IFetchStrategy{`0})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetMany(System.String[])
  - Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetMany``1(System.Collections.Generic.IEnumerable{System.String},System.Linq.Expressions.Expression{System.Func{`0,``0}})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetMany``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String[])
  - Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetManyAsDictionary(System.Collections.Generic.IEnumerable{System.String})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetManyAsDictionary(System.Collections.Generic.IEnumerable{System.String},IFetchStrategy{`0})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetManyAsDictionary(System.String[])
  - Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetPrimaryKey(`0)
  - Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GroupBy``2(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{System.Linq.IGrouping{``0,`0},``1}})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GroupBy``2(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{System.Linq.IGrouping{``0,`0},``1}})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GroupBy``2(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{System.Linq.IGrouping{``0,`0},``1}})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GroupCount``1(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GroupCount``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GroupCount``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GroupLongCount``1(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GroupLongCount``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GroupLongCount``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Join``3(IRepositoryQueryable{``1},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{``1,``0}},System.Linq.Expressions.Expression{System.Func{`0,``1,``2}})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper`1.KeyType
  - Catalyst.Core.Lib.Repository.RepositoryWrapper`1.LongCount
  - Catalyst.Core.Lib.Repository.RepositoryWrapper`1.LongCount(ISpecification{`0})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper`1.LongCount(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Max``1(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Max``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Max``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Min``1(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Min``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Min``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Repository
  - Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Double}})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Int32}})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Int64}})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Decimal}}})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Double}}})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int32}}})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int64}}})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Single}}})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Single}})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Double}})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Int32}})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Int64}})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Decimal}}})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Double}}})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int32}}})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int64}}})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Single}}})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Single}})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Double}})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Int32}})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Int64}})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Decimal}}})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Double}}})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int32}}})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int64}}})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Single}}})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Single}})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper`1.TraceInfo
  - Catalyst.Core.Lib.Repository.RepositoryWrapper`1.TryFind(ISpecification{`0},`0@)
  - Catalyst.Core.Lib.Repository.RepositoryWrapper`1.TryFind(ISpecification{`0},IQueryOptions{`0},`0@)
  - Catalyst.Core.Lib.Repository.RepositoryWrapper`1.TryFind(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},`0@)
  - Catalyst.Core.Lib.Repository.RepositoryWrapper`1.TryFind(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},IQueryOptions{`0},`0@)
  - Catalyst.Core.Lib.Repository.RepositoryWrapper`1.TryFind``1(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}},``0@)
  - Catalyst.Core.Lib.Repository.RepositoryWrapper`1.TryFind``1(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}},IQueryOptions{`0},``0@)
  - Catalyst.Core.Lib.Repository.RepositoryWrapper`1.TryFind``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},``0@)
  - Catalyst.Core.Lib.Repository.RepositoryWrapper`1.TryFind``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},IQueryOptions{`0},``0@)
  - Catalyst.Core.Lib.Repository.RepositoryWrapper`1.TryGet(System.String,`0@)
  - Catalyst.Core.Lib.Repository.RepositoryWrapper`1.TryGet``1(System.String,System.Linq.Expressions.Expression{System.Func{`0,``0}},``0@)
  - Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Update(`0)
  - Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Update(System.Collections.Generic.IEnumerable{`0})
  langs:
  - csharp
  - vb
  name: RepositoryWrapper<T>
  nameWithType: RepositoryWrapper<T>
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>
  type: Class
  source:
    remote:
      path: src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
      branch: gh-pages
      repo: https://github.com/catalyst-network/Catalyst.Framework.git
    id: RepositoryWrapper
    path: ../src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
    startLine: 37
  assemblies:
  - Catalyst.Core.Lib
  namespace: Catalyst.Core.Lib.Repository
  syntax:
    content: 'public class RepositoryWrapper<T> : IRepositoryWrapper<T>, IRepository<T, string> where T : class, IDocument'
    typeParameters:
    - id: T
    content.vb: >-
      Public Class RepositoryWrapper(Of T As {Class, IDocument})

          Implements IRepositoryWrapper(Of T), IRepository(Of T, String)
  inheritance:
  - System.Object
  derivedClasses:
  - Catalyst.Core.Lib.P2P.Repository.PeerRepository
  implements:
  - Catalyst.Abstractions.Repository.IRepositoryWrapper{{T}}
  - IRepository{{T},System.String}
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  nameWithType.vb: RepositoryWrapper(Of T)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T)
  name.vb: RepositoryWrapper(Of T)
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.#ctor(IRepository{`0,System.String})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.#ctor(IRepository{`0,System.String})
  id: '#ctor(IRepository{`0,System.String})'
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper`1
  langs:
  - csharp
  - vb
  name: RepositoryWrapper(IRepository<T, String>)
  nameWithType: RepositoryWrapper<T>.RepositoryWrapper(IRepository<T, String>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.RepositoryWrapper(IRepository<T, System.String>)
  type: Constructor
  source:
    remote:
      path: src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
      branch: gh-pages
      repo: https://github.com/catalyst-network/Catalyst.Framework.git
    id: .ctor
    path: ../src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
    startLine: 39
  assemblies:
  - Catalyst.Core.Lib
  namespace: Catalyst.Core.Lib.Repository
  syntax:
    content: public RepositoryWrapper(IRepository<T, string> repository)
    parameters:
    - id: repository
      type: IRepository{{T},System.String}
    content.vb: Public Sub New(repository As IRepository(Of T, String))
  overload: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.#ctor*
  nameWithType.vb: RepositoryWrapper(Of T).RepositoryWrapper(IRepository(Of T, String))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).RepositoryWrapper(IRepository(Of T, System.String))
  name.vb: RepositoryWrapper(IRepository(Of T, String))
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Repository
  commentId: F:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Repository
  id: Repository
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper`1
  langs:
  - csharp
  - vb
  name: Repository
  nameWithType: RepositoryWrapper<T>.Repository
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Repository
  type: Field
  source:
    remote:
      path: src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
      branch: gh-pages
      repo: https://github.com/catalyst-network/Catalyst.Framework.git
    id: Repository
    path: ../src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
    startLine: 44
  assemblies:
  - Catalyst.Core.Lib
  namespace: Catalyst.Core.Lib.Repository
  syntax:
    content: protected readonly IRepository<T, string> Repository
    return:
      type: IRepository{{T},System.String}
    content.vb: Protected ReadOnly Repository As IRepository(Of T, String)
  nameWithType.vb: RepositoryWrapper(Of T).Repository
  modifiers.csharp:
  - protected
  - readonly
  modifiers.vb:
  - Protected
  - ReadOnly
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Repository
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Conventions
  commentId: P:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Conventions
  id: Conventions
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper`1
  langs:
  - csharp
  - vb
  name: Conventions
  nameWithType: RepositoryWrapper<T>.Conventions
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Conventions
  type: Property
  source:
    remote:
      path: src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
      branch: gh-pages
      repo: https://github.com/catalyst-network/Catalyst.Framework.git
    id: Conventions
    path: ../src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
    startLine: 46
  assemblies:
  - Catalyst.Core.Lib
  namespace: Catalyst.Core.Lib.Repository
  syntax:
    content: public IRepositoryConventions Conventions { get; set; }
    parameters: []
    return:
      type: IRepositoryConventions
    content.vb: Public Property Conventions As IRepositoryConventions
  overload: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Conventions*
  nameWithType.vb: RepositoryWrapper(Of T).Conventions
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Conventions
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.EntityType
  commentId: P:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.EntityType
  id: EntityType
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper`1
  langs:
  - csharp
  - vb
  name: EntityType
  nameWithType: RepositoryWrapper<T>.EntityType
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.EntityType
  type: Property
  source:
    remote:
      path: src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
      branch: gh-pages
      repo: https://github.com/catalyst-network/Catalyst.Framework.git
    id: EntityType
    path: ../src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
    startLine: 52
  assemblies:
  - Catalyst.Core.Lib
  namespace: Catalyst.Core.Lib.Repository
  syntax:
    content: public Type EntityType { get; }
    parameters: []
    return:
      type: System.Type
    content.vb: Public ReadOnly Property EntityType As Type
  overload: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.EntityType*
  nameWithType.vb: RepositoryWrapper(Of T).EntityType
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).EntityType
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.KeyType
  commentId: P:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.KeyType
  id: KeyType
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper`1
  langs:
  - csharp
  - vb
  name: KeyType
  nameWithType: RepositoryWrapper<T>.KeyType
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.KeyType
  type: Property
  source:
    remote:
      path: src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
      branch: gh-pages
      repo: https://github.com/catalyst-network/Catalyst.Framework.git
    id: KeyType
    path: ../src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
    startLine: 54
  assemblies:
  - Catalyst.Core.Lib
  namespace: Catalyst.Core.Lib.Repository
  syntax:
    content: public Type KeyType { get; }
    parameters: []
    return:
      type: System.Type
    content.vb: Public ReadOnly Property KeyType As Type
  overload: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.KeyType*
  nameWithType.vb: RepositoryWrapper(Of T).KeyType
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).KeyType
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.CachingStrategy
  commentId: P:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.CachingStrategy
  id: CachingStrategy
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper`1
  langs:
  - csharp
  - vb
  name: CachingStrategy
  nameWithType: RepositoryWrapper<T>.CachingStrategy
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.CachingStrategy
  type: Property
  source:
    remote:
      path: src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
      branch: gh-pages
      repo: https://github.com/catalyst-network/Catalyst.Framework.git
    id: CachingStrategy
    path: ../src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
    startLine: 56
  assemblies:
  - Catalyst.Core.Lib
  namespace: Catalyst.Core.Lib.Repository
  syntax:
    content: public ICachingStrategy<T, string> CachingStrategy { get; set; }
    parameters: []
    return:
      type: ICachingStrategy{{T},System.String}
    content.vb: Public Property CachingStrategy As ICachingStrategy(Of T, String)
  overload: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.CachingStrategy*
  nameWithType.vb: RepositoryWrapper(Of T).CachingStrategy
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).CachingStrategy
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.CachingEnabled
  commentId: P:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.CachingEnabled
  id: CachingEnabled
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper`1
  langs:
  - csharp
  - vb
  name: CachingEnabled
  nameWithType: RepositoryWrapper<T>.CachingEnabled
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.CachingEnabled
  type: Property
  source:
    remote:
      path: src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
      branch: gh-pages
      repo: https://github.com/catalyst-network/Catalyst.Framework.git
    id: CachingEnabled
    path: ../src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
    startLine: 62
  assemblies:
  - Catalyst.Core.Lib
  namespace: Catalyst.Core.Lib.Repository
  syntax:
    content: public bool CachingEnabled { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Property CachingEnabled As Boolean
  overload: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.CachingEnabled*
  nameWithType.vb: RepositoryWrapper(Of T).CachingEnabled
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).CachingEnabled
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.CacheUsed
  commentId: P:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.CacheUsed
  id: CacheUsed
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper`1
  langs:
  - csharp
  - vb
  name: CacheUsed
  nameWithType: RepositoryWrapper<T>.CacheUsed
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.CacheUsed
  type: Property
  source:
    remote:
      path: src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
      branch: gh-pages
      repo: https://github.com/catalyst-network/Catalyst.Framework.git
    id: CacheUsed
    path: ../src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
    startLine: 64
  assemblies:
  - Catalyst.Core.Lib
  namespace: Catalyst.Core.Lib.Repository
  syntax:
    content: public bool CacheUsed { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property CacheUsed As Boolean
  overload: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.CacheUsed*
  nameWithType.vb: RepositoryWrapper(Of T).CacheUsed
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).CacheUsed
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.TraceInfo
  commentId: P:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.TraceInfo
  id: TraceInfo
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper`1
  langs:
  - csharp
  - vb
  name: TraceInfo
  nameWithType: RepositoryWrapper<T>.TraceInfo
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.TraceInfo
  type: Property
  source:
    remote:
      path: src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
      branch: gh-pages
      repo: https://github.com/catalyst-network/Catalyst.Framework.git
    id: TraceInfo
    path: ../src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
    startLine: 66
  assemblies:
  - Catalyst.Core.Lib
  namespace: Catalyst.Core.Lib.Repository
  syntax:
    content: public string TraceInfo { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property TraceInfo As String
  overload: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.TraceInfo*
  nameWithType.vb: RepositoryWrapper(Of T).TraceInfo
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).TraceInfo
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GenerateKeyOnAdd
  commentId: P:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GenerateKeyOnAdd
  id: GenerateKeyOnAdd
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper`1
  langs:
  - csharp
  - vb
  name: GenerateKeyOnAdd
  nameWithType: RepositoryWrapper<T>.GenerateKeyOnAdd
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.GenerateKeyOnAdd
  type: Property
  source:
    remote:
      path: src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
      branch: gh-pages
      repo: https://github.com/catalyst-network/Catalyst.Framework.git
    id: GenerateKeyOnAdd
    path: ../src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
    startLine: 68
  assemblies:
  - Catalyst.Core.Lib
  namespace: Catalyst.Core.Lib.Repository
  syntax:
    content: public bool GenerateKeyOnAdd { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Property GenerateKeyOnAdd As Boolean
  overload: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GenerateKeyOnAdd*
  nameWithType.vb: RepositoryWrapper(Of T).GenerateKeyOnAdd
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).GenerateKeyOnAdd
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Add(`0)
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Add(`0)
  id: Add(`0)
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper`1
  langs:
  - csharp
  - vb
  name: Add(T)
  nameWithType: RepositoryWrapper<T>.Add(T)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Add(T)
  type: Method
  source:
    remote:
      path: src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
      branch: gh-pages
      repo: https://github.com/catalyst-network/Catalyst.Framework.git
    id: Add
    path: ../src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
    startLine: 70
  assemblies:
  - Catalyst.Core.Lib
  namespace: Catalyst.Core.Lib.Repository
  syntax:
    content: public void Add(T entity)
    parameters:
    - id: entity
      type: '{T}'
    content.vb: Public Sub Add(entity As T)
  overload: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Add*
  nameWithType.vb: RepositoryWrapper(Of T).Add(T)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Add(T)
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Add(System.Collections.Generic.IEnumerable{`0})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Add(System.Collections.Generic.IEnumerable{`0})
  id: Add(System.Collections.Generic.IEnumerable{`0})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper`1
  langs:
  - csharp
  - vb
  name: Add(IEnumerable<T>)
  nameWithType: RepositoryWrapper<T>.Add(IEnumerable<T>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Add(System.Collections.Generic.IEnumerable<T>)
  type: Method
  source:
    remote:
      path: src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
      branch: gh-pages
      repo: https://github.com/catalyst-network/Catalyst.Framework.git
    id: Add
    path: ../src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
    startLine: 75
  assemblies:
  - Catalyst.Core.Lib
  namespace: Catalyst.Core.Lib.Repository
  syntax:
    content: public void Add(IEnumerable<T> entities)
    parameters:
    - id: entities
      type: System.Collections.Generic.IEnumerable{{T}}
    content.vb: Public Sub Add(entities As IEnumerable(Of T))
  overload: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Add*
  nameWithType.vb: RepositoryWrapper(Of T).Add(IEnumerable(Of T))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Add(System.Collections.Generic.IEnumerable(Of T))
  name.vb: Add(IEnumerable(Of T))
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.AsQueryable
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.AsQueryable
  id: AsQueryable
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper`1
  langs:
  - csharp
  - vb
  name: AsQueryable()
  nameWithType: RepositoryWrapper<T>.AsQueryable()
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.AsQueryable()
  type: Method
  source:
    remote:
      path: src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
      branch: gh-pages
      repo: https://github.com/catalyst-network/Catalyst.Framework.git
    id: AsQueryable
    path: ../src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
    startLine: 80
  assemblies:
  - Catalyst.Core.Lib
  namespace: Catalyst.Core.Lib.Repository
  syntax:
    content: public IQueryable<T> AsQueryable()
    return:
      type: System.Linq.IQueryable{{T}}
    content.vb: Public Function AsQueryable As IQueryable(Of T)
  overload: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.AsQueryable*
  nameWithType.vb: RepositoryWrapper(Of T).AsQueryable()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).AsQueryable()
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Int32}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Int32}})
  id: Average(System.Linq.Expressions.Expression{System.Func{`0,System.Int32}})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper`1
  langs:
  - csharp
  - vb
  name: Average(Expression<Func<T, Int32>>)
  nameWithType: RepositoryWrapper<T>.Average(Expression<Func<T, Int32>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Average(System.Linq.Expressions.Expression<System.Func<T, System.Int32>>)
  type: Method
  source:
    remote:
      path: src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
      branch: gh-pages
      repo: https://github.com/catalyst-network/Catalyst.Framework.git
    id: Average
    path: ../src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
    startLine: 85
  assemblies:
  - Catalyst.Core.Lib
  namespace: Catalyst.Core.Lib.Repository
  syntax:
    content: public double Average(Expression<Func<T, int>> selector)
    parameters:
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{{T},System.Int32}}
    return:
      type: System.Double
    content.vb: Public Function Average(selector As Expression(Of Func(Of T, Integer))) As Double
  overload: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average*
  nameWithType.vb: RepositoryWrapper(Of T).Average(Expression(Of Func(Of T, Int32)))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Average(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Int32)))
  name.vb: Average(Expression(Of Func(Of T, Int32)))
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Int32}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Int32}})
  id: Average(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Int32}})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper`1
  langs:
  - csharp
  - vb
  name: Average(ISpecification<T>, Expression<Func<T, Int32>>)
  nameWithType: RepositoryWrapper<T>.Average(ISpecification<T>, Expression<Func<T, Int32>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Average(ISpecification<T>, System.Linq.Expressions.Expression<System.Func<T, System.Int32>>)
  type: Method
  source:
    remote:
      path: src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
      branch: gh-pages
      repo: https://github.com/catalyst-network/Catalyst.Framework.git
    id: Average
    path: ../src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
    startLine: 90
  assemblies:
  - Catalyst.Core.Lib
  namespace: Catalyst.Core.Lib.Repository
  syntax:
    content: public double Average(ISpecification<T> criteria, Expression<Func<T, int>> selector)
    parameters:
    - id: criteria
      type: ISpecification{{T}}
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{{T},System.Int32}}
    return:
      type: System.Double
    content.vb: Public Function Average(criteria As ISpecification(Of T), selector As Expression(Of Func(Of T, Integer))) As Double
  overload: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average*
  nameWithType.vb: RepositoryWrapper(Of T).Average(ISpecification(Of T), Expression(Of Func(Of T, Int32)))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Average(ISpecification(Of T), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Int32)))
  name.vb: Average(ISpecification(Of T), Expression(Of Func(Of T, Int32)))
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Int32}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Int32}})
  id: Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Int32}})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper`1
  langs:
  - csharp
  - vb
  name: Average(Expression<Func<T, Boolean>>, Expression<Func<T, Int32>>)
  nameWithType: RepositoryWrapper<T>.Average(Expression<Func<T, Boolean>>, Expression<Func<T, Int32>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Average(System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<T, System.Int32>>)
  type: Method
  source:
    remote:
      path: src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
      branch: gh-pages
      repo: https://github.com/catalyst-network/Catalyst.Framework.git
    id: Average
    path: ../src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
    startLine: 95
  assemblies:
  - Catalyst.Core.Lib
  namespace: Catalyst.Core.Lib.Repository
  syntax:
    content: public double Average(Expression<Func<T, bool>> predicate, Expression<Func<T, int>> selector)
    parameters:
    - id: predicate
      type: System.Linq.Expressions.Expression{System.Func{{T},System.Boolean}}
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{{T},System.Int32}}
    return:
      type: System.Double
    content.vb: Public Function Average(predicate As Expression(Of Func(Of T, Boolean)), selector As Expression(Of Func(Of T, Integer))) As Double
  overload: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average*
  nameWithType.vb: RepositoryWrapper(Of T).Average(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Int32)))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Average(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Int32)))
  name.vb: Average(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Int32)))
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int32}}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int32}}})
  id: Average(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int32}}})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper`1
  langs:
  - csharp
  - vb
  name: Average(Expression<Func<T, Nullable<Int32>>>)
  nameWithType: RepositoryWrapper<T>.Average(Expression<Func<T, Nullable<Int32>>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Average(System.Linq.Expressions.Expression<System.Func<T, System.Nullable<System.Int32>>>)
  type: Method
  source:
    remote:
      path: src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
      branch: gh-pages
      repo: https://github.com/catalyst-network/Catalyst.Framework.git
    id: Average
    path: ../src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
    startLine: 100
  assemblies:
  - Catalyst.Core.Lib
  namespace: Catalyst.Core.Lib.Repository
  syntax:
    content: public double? Average(Expression<Func<T, int? >> selector)
    parameters:
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{{T},System.Nullable{System.Int32}}}
    return:
      type: System.Nullable{System.Double}
    content.vb: Public Function Average(selector As Expression(Of Func(Of T, Integer?))) As Double?
  overload: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average*
  nameWithType.vb: RepositoryWrapper(Of T).Average(Expression(Of Func(Of T, Nullable(Of Int32))))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Average(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Nullable(Of System.Int32))))
  name.vb: Average(Expression(Of Func(Of T, Nullable(Of Int32))))
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int32}}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int32}}})
  id: Average(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int32}}})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper`1
  langs:
  - csharp
  - vb
  name: Average(ISpecification<T>, Expression<Func<T, Nullable<Int32>>>)
  nameWithType: RepositoryWrapper<T>.Average(ISpecification<T>, Expression<Func<T, Nullable<Int32>>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Average(ISpecification<T>, System.Linq.Expressions.Expression<System.Func<T, System.Nullable<System.Int32>>>)
  type: Method
  source:
    remote:
      path: src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
      branch: gh-pages
      repo: https://github.com/catalyst-network/Catalyst.Framework.git
    id: Average
    path: ../src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
    startLine: 105
  assemblies:
  - Catalyst.Core.Lib
  namespace: Catalyst.Core.Lib.Repository
  syntax:
    content: public double? Average(ISpecification<T> criteria, Expression<Func<T, int? >> selector)
    parameters:
    - id: criteria
      type: ISpecification{{T}}
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{{T},System.Nullable{System.Int32}}}
    return:
      type: System.Nullable{System.Double}
    content.vb: Public Function Average(criteria As ISpecification(Of T), selector As Expression(Of Func(Of T, Integer?))) As Double?
  overload: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average*
  nameWithType.vb: RepositoryWrapper(Of T).Average(ISpecification(Of T), Expression(Of Func(Of T, Nullable(Of Int32))))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Average(ISpecification(Of T), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Nullable(Of System.Int32))))
  name.vb: Average(ISpecification(Of T), Expression(Of Func(Of T, Nullable(Of Int32))))
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int32}}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int32}}})
  id: Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int32}}})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper`1
  langs:
  - csharp
  - vb
  name: Average(Expression<Func<T, Boolean>>, Expression<Func<T, Nullable<Int32>>>)
  nameWithType: RepositoryWrapper<T>.Average(Expression<Func<T, Boolean>>, Expression<Func<T, Nullable<Int32>>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Average(System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<T, System.Nullable<System.Int32>>>)
  type: Method
  source:
    remote:
      path: src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
      branch: gh-pages
      repo: https://github.com/catalyst-network/Catalyst.Framework.git
    id: Average
    path: ../src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
    startLine: 110
  assemblies:
  - Catalyst.Core.Lib
  namespace: Catalyst.Core.Lib.Repository
  syntax:
    content: public double? Average(Expression<Func<T, bool>> predicate, Expression<Func<T, int? >> selector)
    parameters:
    - id: predicate
      type: System.Linq.Expressions.Expression{System.Func{{T},System.Boolean}}
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{{T},System.Nullable{System.Int32}}}
    return:
      type: System.Nullable{System.Double}
    content.vb: Public Function Average(predicate As Expression(Of Func(Of T, Boolean)), selector As Expression(Of Func(Of T, Integer?))) As Double?
  overload: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average*
  nameWithType.vb: RepositoryWrapper(Of T).Average(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Nullable(Of Int32))))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Average(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Nullable(Of System.Int32))))
  name.vb: Average(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Nullable(Of Int32))))
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Int64}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Int64}})
  id: Average(System.Linq.Expressions.Expression{System.Func{`0,System.Int64}})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper`1
  langs:
  - csharp
  - vb
  name: Average(Expression<Func<T, Int64>>)
  nameWithType: RepositoryWrapper<T>.Average(Expression<Func<T, Int64>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Average(System.Linq.Expressions.Expression<System.Func<T, System.Int64>>)
  type: Method
  source:
    remote:
      path: src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
      branch: gh-pages
      repo: https://github.com/catalyst-network/Catalyst.Framework.git
    id: Average
    path: ../src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
    startLine: 115
  assemblies:
  - Catalyst.Core.Lib
  namespace: Catalyst.Core.Lib.Repository
  syntax:
    content: public double Average(Expression<Func<T, long>> selector)
    parameters:
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{{T},System.Int64}}
    return:
      type: System.Double
    content.vb: Public Function Average(selector As Expression(Of Func(Of T, Long))) As Double
  overload: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average*
  nameWithType.vb: RepositoryWrapper(Of T).Average(Expression(Of Func(Of T, Int64)))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Average(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Int64)))
  name.vb: Average(Expression(Of Func(Of T, Int64)))
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Int64}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Int64}})
  id: Average(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Int64}})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper`1
  langs:
  - csharp
  - vb
  name: Average(ISpecification<T>, Expression<Func<T, Int64>>)
  nameWithType: RepositoryWrapper<T>.Average(ISpecification<T>, Expression<Func<T, Int64>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Average(ISpecification<T>, System.Linq.Expressions.Expression<System.Func<T, System.Int64>>)
  type: Method
  source:
    remote:
      path: src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
      branch: gh-pages
      repo: https://github.com/catalyst-network/Catalyst.Framework.git
    id: Average
    path: ../src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
    startLine: 120
  assemblies:
  - Catalyst.Core.Lib
  namespace: Catalyst.Core.Lib.Repository
  syntax:
    content: public double Average(ISpecification<T> criteria, Expression<Func<T, long>> selector)
    parameters:
    - id: criteria
      type: ISpecification{{T}}
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{{T},System.Int64}}
    return:
      type: System.Double
    content.vb: Public Function Average(criteria As ISpecification(Of T), selector As Expression(Of Func(Of T, Long))) As Double
  overload: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average*
  nameWithType.vb: RepositoryWrapper(Of T).Average(ISpecification(Of T), Expression(Of Func(Of T, Int64)))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Average(ISpecification(Of T), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Int64)))
  name.vb: Average(ISpecification(Of T), Expression(Of Func(Of T, Int64)))
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Int64}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Int64}})
  id: Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Int64}})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper`1
  langs:
  - csharp
  - vb
  name: Average(Expression<Func<T, Boolean>>, Expression<Func<T, Int64>>)
  nameWithType: RepositoryWrapper<T>.Average(Expression<Func<T, Boolean>>, Expression<Func<T, Int64>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Average(System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<T, System.Int64>>)
  type: Method
  source:
    remote:
      path: src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
      branch: gh-pages
      repo: https://github.com/catalyst-network/Catalyst.Framework.git
    id: Average
    path: ../src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
    startLine: 125
  assemblies:
  - Catalyst.Core.Lib
  namespace: Catalyst.Core.Lib.Repository
  syntax:
    content: public double Average(Expression<Func<T, bool>> predicate, Expression<Func<T, long>> selector)
    parameters:
    - id: predicate
      type: System.Linq.Expressions.Expression{System.Func{{T},System.Boolean}}
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{{T},System.Int64}}
    return:
      type: System.Double
    content.vb: Public Function Average(predicate As Expression(Of Func(Of T, Boolean)), selector As Expression(Of Func(Of T, Long))) As Double
  overload: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average*
  nameWithType.vb: RepositoryWrapper(Of T).Average(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Int64)))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Average(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Int64)))
  name.vb: Average(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Int64)))
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int64}}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int64}}})
  id: Average(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int64}}})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper`1
  langs:
  - csharp
  - vb
  name: Average(Expression<Func<T, Nullable<Int64>>>)
  nameWithType: RepositoryWrapper<T>.Average(Expression<Func<T, Nullable<Int64>>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Average(System.Linq.Expressions.Expression<System.Func<T, System.Nullable<System.Int64>>>)
  type: Method
  source:
    remote:
      path: src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
      branch: gh-pages
      repo: https://github.com/catalyst-network/Catalyst.Framework.git
    id: Average
    path: ../src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
    startLine: 130
  assemblies:
  - Catalyst.Core.Lib
  namespace: Catalyst.Core.Lib.Repository
  syntax:
    content: public double? Average(Expression<Func<T, long? >> selector)
    parameters:
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{{T},System.Nullable{System.Int64}}}
    return:
      type: System.Nullable{System.Double}
    content.vb: Public Function Average(selector As Expression(Of Func(Of T, Long?))) As Double?
  overload: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average*
  nameWithType.vb: RepositoryWrapper(Of T).Average(Expression(Of Func(Of T, Nullable(Of Int64))))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Average(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Nullable(Of System.Int64))))
  name.vb: Average(Expression(Of Func(Of T, Nullable(Of Int64))))
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int64}}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int64}}})
  id: Average(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int64}}})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper`1
  langs:
  - csharp
  - vb
  name: Average(ISpecification<T>, Expression<Func<T, Nullable<Int64>>>)
  nameWithType: RepositoryWrapper<T>.Average(ISpecification<T>, Expression<Func<T, Nullable<Int64>>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Average(ISpecification<T>, System.Linq.Expressions.Expression<System.Func<T, System.Nullable<System.Int64>>>)
  type: Method
  source:
    remote:
      path: src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
      branch: gh-pages
      repo: https://github.com/catalyst-network/Catalyst.Framework.git
    id: Average
    path: ../src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
    startLine: 135
  assemblies:
  - Catalyst.Core.Lib
  namespace: Catalyst.Core.Lib.Repository
  syntax:
    content: public double? Average(ISpecification<T> criteria, Expression<Func<T, long? >> selector)
    parameters:
    - id: criteria
      type: ISpecification{{T}}
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{{T},System.Nullable{System.Int64}}}
    return:
      type: System.Nullable{System.Double}
    content.vb: Public Function Average(criteria As ISpecification(Of T), selector As Expression(Of Func(Of T, Long?))) As Double?
  overload: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average*
  nameWithType.vb: RepositoryWrapper(Of T).Average(ISpecification(Of T), Expression(Of Func(Of T, Nullable(Of Int64))))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Average(ISpecification(Of T), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Nullable(Of System.Int64))))
  name.vb: Average(ISpecification(Of T), Expression(Of Func(Of T, Nullable(Of Int64))))
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int64}}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int64}}})
  id: Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int64}}})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper`1
  langs:
  - csharp
  - vb
  name: Average(Expression<Func<T, Boolean>>, Expression<Func<T, Nullable<Int64>>>)
  nameWithType: RepositoryWrapper<T>.Average(Expression<Func<T, Boolean>>, Expression<Func<T, Nullable<Int64>>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Average(System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<T, System.Nullable<System.Int64>>>)
  type: Method
  source:
    remote:
      path: src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
      branch: gh-pages
      repo: https://github.com/catalyst-network/Catalyst.Framework.git
    id: Average
    path: ../src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
    startLine: 140
  assemblies:
  - Catalyst.Core.Lib
  namespace: Catalyst.Core.Lib.Repository
  syntax:
    content: public double? Average(Expression<Func<T, bool>> predicate, Expression<Func<T, long? >> selector)
    parameters:
    - id: predicate
      type: System.Linq.Expressions.Expression{System.Func{{T},System.Boolean}}
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{{T},System.Nullable{System.Int64}}}
    return:
      type: System.Nullable{System.Double}
    content.vb: Public Function Average(predicate As Expression(Of Func(Of T, Boolean)), selector As Expression(Of Func(Of T, Long?))) As Double?
  overload: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average*
  nameWithType.vb: RepositoryWrapper(Of T).Average(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Nullable(Of Int64))))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Average(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Nullable(Of System.Int64))))
  name.vb: Average(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Nullable(Of Int64))))
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}})
  id: Average(System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper`1
  langs:
  - csharp
  - vb
  name: Average(Expression<Func<T, Decimal>>)
  nameWithType: RepositoryWrapper<T>.Average(Expression<Func<T, Decimal>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Average(System.Linq.Expressions.Expression<System.Func<T, System.Decimal>>)
  type: Method
  source:
    remote:
      path: src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
      branch: gh-pages
      repo: https://github.com/catalyst-network/Catalyst.Framework.git
    id: Average
    path: ../src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
    startLine: 145
  assemblies:
  - Catalyst.Core.Lib
  namespace: Catalyst.Core.Lib.Repository
  syntax:
    content: public decimal Average(Expression<Func<T, decimal>> selector)
    parameters:
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{{T},System.Decimal}}
    return:
      type: System.Decimal
    content.vb: Public Function Average(selector As Expression(Of Func(Of T, Decimal))) As Decimal
  overload: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average*
  nameWithType.vb: RepositoryWrapper(Of T).Average(Expression(Of Func(Of T, Decimal)))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Average(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Decimal)))
  name.vb: Average(Expression(Of Func(Of T, Decimal)))
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}})
  id: Average(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper`1
  langs:
  - csharp
  - vb
  name: Average(ISpecification<T>, Expression<Func<T, Decimal>>)
  nameWithType: RepositoryWrapper<T>.Average(ISpecification<T>, Expression<Func<T, Decimal>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Average(ISpecification<T>, System.Linq.Expressions.Expression<System.Func<T, System.Decimal>>)
  type: Method
  source:
    remote:
      path: src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
      branch: gh-pages
      repo: https://github.com/catalyst-network/Catalyst.Framework.git
    id: Average
    path: ../src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
    startLine: 150
  assemblies:
  - Catalyst.Core.Lib
  namespace: Catalyst.Core.Lib.Repository
  syntax:
    content: public decimal Average(ISpecification<T> criteria, Expression<Func<T, decimal>> selector)
    parameters:
    - id: criteria
      type: ISpecification{{T}}
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{{T},System.Decimal}}
    return:
      type: System.Decimal
    content.vb: Public Function Average(criteria As ISpecification(Of T), selector As Expression(Of Func(Of T, Decimal))) As Decimal
  overload: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average*
  nameWithType.vb: RepositoryWrapper(Of T).Average(ISpecification(Of T), Expression(Of Func(Of T, Decimal)))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Average(ISpecification(Of T), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Decimal)))
  name.vb: Average(ISpecification(Of T), Expression(Of Func(Of T, Decimal)))
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}})
  id: Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper`1
  langs:
  - csharp
  - vb
  name: Average(Expression<Func<T, Boolean>>, Expression<Func<T, Decimal>>)
  nameWithType: RepositoryWrapper<T>.Average(Expression<Func<T, Boolean>>, Expression<Func<T, Decimal>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Average(System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<T, System.Decimal>>)
  type: Method
  source:
    remote:
      path: src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
      branch: gh-pages
      repo: https://github.com/catalyst-network/Catalyst.Framework.git
    id: Average
    path: ../src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
    startLine: 155
  assemblies:
  - Catalyst.Core.Lib
  namespace: Catalyst.Core.Lib.Repository
  syntax:
    content: public decimal Average(Expression<Func<T, bool>> predicate, Expression<Func<T, decimal>> selector)
    parameters:
    - id: predicate
      type: System.Linq.Expressions.Expression{System.Func{{T},System.Boolean}}
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{{T},System.Decimal}}
    return:
      type: System.Decimal
    content.vb: Public Function Average(predicate As Expression(Of Func(Of T, Boolean)), selector As Expression(Of Func(Of T, Decimal))) As Decimal
  overload: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average*
  nameWithType.vb: RepositoryWrapper(Of T).Average(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Decimal)))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Average(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Decimal)))
  name.vb: Average(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Decimal)))
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Decimal}}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Decimal}}})
  id: Average(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Decimal}}})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper`1
  langs:
  - csharp
  - vb
  name: Average(Expression<Func<T, Nullable<Decimal>>>)
  nameWithType: RepositoryWrapper<T>.Average(Expression<Func<T, Nullable<Decimal>>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Average(System.Linq.Expressions.Expression<System.Func<T, System.Nullable<System.Decimal>>>)
  type: Method
  source:
    remote:
      path: src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
      branch: gh-pages
      repo: https://github.com/catalyst-network/Catalyst.Framework.git
    id: Average
    path: ../src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
    startLine: 160
  assemblies:
  - Catalyst.Core.Lib
  namespace: Catalyst.Core.Lib.Repository
  syntax:
    content: public decimal? Average(Expression<Func<T, decimal? >> selector)
    parameters:
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{{T},System.Nullable{System.Decimal}}}
    return:
      type: System.Nullable{System.Decimal}
    content.vb: Public Function Average(selector As Expression(Of Func(Of T, Decimal?))) As Decimal?
  overload: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average*
  nameWithType.vb: RepositoryWrapper(Of T).Average(Expression(Of Func(Of T, Nullable(Of Decimal))))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Average(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Nullable(Of System.Decimal))))
  name.vb: Average(Expression(Of Func(Of T, Nullable(Of Decimal))))
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Decimal}}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Decimal}}})
  id: Average(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Decimal}}})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper`1
  langs:
  - csharp
  - vb
  name: Average(ISpecification<T>, Expression<Func<T, Nullable<Decimal>>>)
  nameWithType: RepositoryWrapper<T>.Average(ISpecification<T>, Expression<Func<T, Nullable<Decimal>>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Average(ISpecification<T>, System.Linq.Expressions.Expression<System.Func<T, System.Nullable<System.Decimal>>>)
  type: Method
  source:
    remote:
      path: src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
      branch: gh-pages
      repo: https://github.com/catalyst-network/Catalyst.Framework.git
    id: Average
    path: ../src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
    startLine: 165
  assemblies:
  - Catalyst.Core.Lib
  namespace: Catalyst.Core.Lib.Repository
  syntax:
    content: public decimal? Average(ISpecification<T> criteria, Expression<Func<T, decimal? >> selector)
    parameters:
    - id: criteria
      type: ISpecification{{T}}
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{{T},System.Nullable{System.Decimal}}}
    return:
      type: System.Nullable{System.Decimal}
    content.vb: Public Function Average(criteria As ISpecification(Of T), selector As Expression(Of Func(Of T, Decimal?))) As Decimal?
  overload: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average*
  nameWithType.vb: RepositoryWrapper(Of T).Average(ISpecification(Of T), Expression(Of Func(Of T, Nullable(Of Decimal))))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Average(ISpecification(Of T), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Nullable(Of System.Decimal))))
  name.vb: Average(ISpecification(Of T), Expression(Of Func(Of T, Nullable(Of Decimal))))
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Decimal}}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Decimal}}})
  id: Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Decimal}}})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper`1
  langs:
  - csharp
  - vb
  name: Average(Expression<Func<T, Boolean>>, Expression<Func<T, Nullable<Decimal>>>)
  nameWithType: RepositoryWrapper<T>.Average(Expression<Func<T, Boolean>>, Expression<Func<T, Nullable<Decimal>>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Average(System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<T, System.Nullable<System.Decimal>>>)
  type: Method
  source:
    remote:
      path: src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
      branch: gh-pages
      repo: https://github.com/catalyst-network/Catalyst.Framework.git
    id: Average
    path: ../src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
    startLine: 170
  assemblies:
  - Catalyst.Core.Lib
  namespace: Catalyst.Core.Lib.Repository
  syntax:
    content: public decimal? Average(Expression<Func<T, bool>> predicate, Expression<Func<T, decimal? >> selector)
    parameters:
    - id: predicate
      type: System.Linq.Expressions.Expression{System.Func{{T},System.Boolean}}
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{{T},System.Nullable{System.Decimal}}}
    return:
      type: System.Nullable{System.Decimal}
    content.vb: Public Function Average(predicate As Expression(Of Func(Of T, Boolean)), selector As Expression(Of Func(Of T, Decimal?))) As Decimal?
  overload: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average*
  nameWithType.vb: RepositoryWrapper(Of T).Average(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Nullable(Of Decimal))))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Average(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Nullable(Of System.Decimal))))
  name.vb: Average(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Nullable(Of Decimal))))
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Double}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Double}})
  id: Average(System.Linq.Expressions.Expression{System.Func{`0,System.Double}})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper`1
  langs:
  - csharp
  - vb
  name: Average(Expression<Func<T, Double>>)
  nameWithType: RepositoryWrapper<T>.Average(Expression<Func<T, Double>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Average(System.Linq.Expressions.Expression<System.Func<T, System.Double>>)
  type: Method
  source:
    remote:
      path: src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
      branch: gh-pages
      repo: https://github.com/catalyst-network/Catalyst.Framework.git
    id: Average
    path: ../src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
    startLine: 175
  assemblies:
  - Catalyst.Core.Lib
  namespace: Catalyst.Core.Lib.Repository
  syntax:
    content: public double Average(Expression<Func<T, double>> selector)
    parameters:
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{{T},System.Double}}
    return:
      type: System.Double
    content.vb: Public Function Average(selector As Expression(Of Func(Of T, Double))) As Double
  overload: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average*
  nameWithType.vb: RepositoryWrapper(Of T).Average(Expression(Of Func(Of T, Double)))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Average(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Double)))
  name.vb: Average(Expression(Of Func(Of T, Double)))
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Double}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Double}})
  id: Average(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Double}})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper`1
  langs:
  - csharp
  - vb
  name: Average(ISpecification<T>, Expression<Func<T, Double>>)
  nameWithType: RepositoryWrapper<T>.Average(ISpecification<T>, Expression<Func<T, Double>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Average(ISpecification<T>, System.Linq.Expressions.Expression<System.Func<T, System.Double>>)
  type: Method
  source:
    remote:
      path: src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
      branch: gh-pages
      repo: https://github.com/catalyst-network/Catalyst.Framework.git
    id: Average
    path: ../src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
    startLine: 180
  assemblies:
  - Catalyst.Core.Lib
  namespace: Catalyst.Core.Lib.Repository
  syntax:
    content: public double Average(ISpecification<T> criteria, Expression<Func<T, double>> selector)
    parameters:
    - id: criteria
      type: ISpecification{{T}}
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{{T},System.Double}}
    return:
      type: System.Double
    content.vb: Public Function Average(criteria As ISpecification(Of T), selector As Expression(Of Func(Of T, Double))) As Double
  overload: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average*
  nameWithType.vb: RepositoryWrapper(Of T).Average(ISpecification(Of T), Expression(Of Func(Of T, Double)))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Average(ISpecification(Of T), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Double)))
  name.vb: Average(ISpecification(Of T), Expression(Of Func(Of T, Double)))
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Double}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Double}})
  id: Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Double}})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper`1
  langs:
  - csharp
  - vb
  name: Average(Expression<Func<T, Boolean>>, Expression<Func<T, Double>>)
  nameWithType: RepositoryWrapper<T>.Average(Expression<Func<T, Boolean>>, Expression<Func<T, Double>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Average(System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<T, System.Double>>)
  type: Method
  source:
    remote:
      path: src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
      branch: gh-pages
      repo: https://github.com/catalyst-network/Catalyst.Framework.git
    id: Average
    path: ../src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
    startLine: 185
  assemblies:
  - Catalyst.Core.Lib
  namespace: Catalyst.Core.Lib.Repository
  syntax:
    content: public double Average(Expression<Func<T, bool>> predicate, Expression<Func<T, double>> selector)
    parameters:
    - id: predicate
      type: System.Linq.Expressions.Expression{System.Func{{T},System.Boolean}}
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{{T},System.Double}}
    return:
      type: System.Double
    content.vb: Public Function Average(predicate As Expression(Of Func(Of T, Boolean)), selector As Expression(Of Func(Of T, Double))) As Double
  overload: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average*
  nameWithType.vb: RepositoryWrapper(Of T).Average(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Double)))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Average(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Double)))
  name.vb: Average(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Double)))
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Double}}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Double}}})
  id: Average(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Double}}})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper`1
  langs:
  - csharp
  - vb
  name: Average(Expression<Func<T, Nullable<Double>>>)
  nameWithType: RepositoryWrapper<T>.Average(Expression<Func<T, Nullable<Double>>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Average(System.Linq.Expressions.Expression<System.Func<T, System.Nullable<System.Double>>>)
  type: Method
  source:
    remote:
      path: src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
      branch: gh-pages
      repo: https://github.com/catalyst-network/Catalyst.Framework.git
    id: Average
    path: ../src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
    startLine: 190
  assemblies:
  - Catalyst.Core.Lib
  namespace: Catalyst.Core.Lib.Repository
  syntax:
    content: public double? Average(Expression<Func<T, double? >> selector)
    parameters:
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{{T},System.Nullable{System.Double}}}
    return:
      type: System.Nullable{System.Double}
    content.vb: Public Function Average(selector As Expression(Of Func(Of T, Double?))) As Double?
  overload: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average*
  nameWithType.vb: RepositoryWrapper(Of T).Average(Expression(Of Func(Of T, Nullable(Of Double))))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Average(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Nullable(Of System.Double))))
  name.vb: Average(Expression(Of Func(Of T, Nullable(Of Double))))
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Double}}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Double}}})
  id: Average(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Double}}})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper`1
  langs:
  - csharp
  - vb
  name: Average(ISpecification<T>, Expression<Func<T, Nullable<Double>>>)
  nameWithType: RepositoryWrapper<T>.Average(ISpecification<T>, Expression<Func<T, Nullable<Double>>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Average(ISpecification<T>, System.Linq.Expressions.Expression<System.Func<T, System.Nullable<System.Double>>>)
  type: Method
  source:
    remote:
      path: src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
      branch: gh-pages
      repo: https://github.com/catalyst-network/Catalyst.Framework.git
    id: Average
    path: ../src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
    startLine: 195
  assemblies:
  - Catalyst.Core.Lib
  namespace: Catalyst.Core.Lib.Repository
  syntax:
    content: public double? Average(ISpecification<T> criteria, Expression<Func<T, double? >> selector)
    parameters:
    - id: criteria
      type: ISpecification{{T}}
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{{T},System.Nullable{System.Double}}}
    return:
      type: System.Nullable{System.Double}
    content.vb: Public Function Average(criteria As ISpecification(Of T), selector As Expression(Of Func(Of T, Double?))) As Double?
  overload: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average*
  nameWithType.vb: RepositoryWrapper(Of T).Average(ISpecification(Of T), Expression(Of Func(Of T, Nullable(Of Double))))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Average(ISpecification(Of T), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Nullable(Of System.Double))))
  name.vb: Average(ISpecification(Of T), Expression(Of Func(Of T, Nullable(Of Double))))
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Double}}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Double}}})
  id: Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Double}}})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper`1
  langs:
  - csharp
  - vb
  name: Average(Expression<Func<T, Boolean>>, Expression<Func<T, Nullable<Double>>>)
  nameWithType: RepositoryWrapper<T>.Average(Expression<Func<T, Boolean>>, Expression<Func<T, Nullable<Double>>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Average(System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<T, System.Nullable<System.Double>>>)
  type: Method
  source:
    remote:
      path: src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
      branch: gh-pages
      repo: https://github.com/catalyst-network/Catalyst.Framework.git
    id: Average
    path: ../src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
    startLine: 200
  assemblies:
  - Catalyst.Core.Lib
  namespace: Catalyst.Core.Lib.Repository
  syntax:
    content: public double? Average(Expression<Func<T, bool>> predicate, Expression<Func<T, double? >> selector)
    parameters:
    - id: predicate
      type: System.Linq.Expressions.Expression{System.Func{{T},System.Boolean}}
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{{T},System.Nullable{System.Double}}}
    return:
      type: System.Nullable{System.Double}
    content.vb: Public Function Average(predicate As Expression(Of Func(Of T, Boolean)), selector As Expression(Of Func(Of T, Double?))) As Double?
  overload: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average*
  nameWithType.vb: RepositoryWrapper(Of T).Average(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Nullable(Of Double))))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Average(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Nullable(Of System.Double))))
  name.vb: Average(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Nullable(Of Double))))
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Single}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Single}})
  id: Average(System.Linq.Expressions.Expression{System.Func{`0,System.Single}})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper`1
  langs:
  - csharp
  - vb
  name: Average(Expression<Func<T, Single>>)
  nameWithType: RepositoryWrapper<T>.Average(Expression<Func<T, Single>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Average(System.Linq.Expressions.Expression<System.Func<T, System.Single>>)
  type: Method
  source:
    remote:
      path: src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
      branch: gh-pages
      repo: https://github.com/catalyst-network/Catalyst.Framework.git
    id: Average
    path: ../src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
    startLine: 205
  assemblies:
  - Catalyst.Core.Lib
  namespace: Catalyst.Core.Lib.Repository
  syntax:
    content: public float Average(Expression<Func<T, float>> selector)
    parameters:
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{{T},System.Single}}
    return:
      type: System.Single
    content.vb: Public Function Average(selector As Expression(Of Func(Of T, Single))) As Single
  overload: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average*
  nameWithType.vb: RepositoryWrapper(Of T).Average(Expression(Of Func(Of T, Single)))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Average(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Single)))
  name.vb: Average(Expression(Of Func(Of T, Single)))
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Single}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Single}})
  id: Average(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Single}})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper`1
  langs:
  - csharp
  - vb
  name: Average(ISpecification<T>, Expression<Func<T, Single>>)
  nameWithType: RepositoryWrapper<T>.Average(ISpecification<T>, Expression<Func<T, Single>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Average(ISpecification<T>, System.Linq.Expressions.Expression<System.Func<T, System.Single>>)
  type: Method
  source:
    remote:
      path: src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
      branch: gh-pages
      repo: https://github.com/catalyst-network/Catalyst.Framework.git
    id: Average
    path: ../src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
    startLine: 210
  assemblies:
  - Catalyst.Core.Lib
  namespace: Catalyst.Core.Lib.Repository
  syntax:
    content: public float Average(ISpecification<T> criteria, Expression<Func<T, float>> selector)
    parameters:
    - id: criteria
      type: ISpecification{{T}}
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{{T},System.Single}}
    return:
      type: System.Single
    content.vb: Public Function Average(criteria As ISpecification(Of T), selector As Expression(Of Func(Of T, Single))) As Single
  overload: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average*
  nameWithType.vb: RepositoryWrapper(Of T).Average(ISpecification(Of T), Expression(Of Func(Of T, Single)))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Average(ISpecification(Of T), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Single)))
  name.vb: Average(ISpecification(Of T), Expression(Of Func(Of T, Single)))
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Single}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Single}})
  id: Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Single}})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper`1
  langs:
  - csharp
  - vb
  name: Average(Expression<Func<T, Boolean>>, Expression<Func<T, Single>>)
  nameWithType: RepositoryWrapper<T>.Average(Expression<Func<T, Boolean>>, Expression<Func<T, Single>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Average(System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<T, System.Single>>)
  type: Method
  source:
    remote:
      path: src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
      branch: gh-pages
      repo: https://github.com/catalyst-network/Catalyst.Framework.git
    id: Average
    path: ../src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
    startLine: 215
  assemblies:
  - Catalyst.Core.Lib
  namespace: Catalyst.Core.Lib.Repository
  syntax:
    content: public float Average(Expression<Func<T, bool>> predicate, Expression<Func<T, float>> selector)
    parameters:
    - id: predicate
      type: System.Linq.Expressions.Expression{System.Func{{T},System.Boolean}}
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{{T},System.Single}}
    return:
      type: System.Single
    content.vb: Public Function Average(predicate As Expression(Of Func(Of T, Boolean)), selector As Expression(Of Func(Of T, Single))) As Single
  overload: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average*
  nameWithType.vb: RepositoryWrapper(Of T).Average(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Single)))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Average(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Single)))
  name.vb: Average(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Single)))
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Single}}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Single}}})
  id: Average(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Single}}})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper`1
  langs:
  - csharp
  - vb
  name: Average(Expression<Func<T, Nullable<Single>>>)
  nameWithType: RepositoryWrapper<T>.Average(Expression<Func<T, Nullable<Single>>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Average(System.Linq.Expressions.Expression<System.Func<T, System.Nullable<System.Single>>>)
  type: Method
  source:
    remote:
      path: src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
      branch: gh-pages
      repo: https://github.com/catalyst-network/Catalyst.Framework.git
    id: Average
    path: ../src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
    startLine: 220
  assemblies:
  - Catalyst.Core.Lib
  namespace: Catalyst.Core.Lib.Repository
  syntax:
    content: public float? Average(Expression<Func<T, float? >> selector)
    parameters:
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{{T},System.Nullable{System.Single}}}
    return:
      type: System.Nullable{System.Single}
    content.vb: Public Function Average(selector As Expression(Of Func(Of T, Single?))) As Single?
  overload: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average*
  nameWithType.vb: RepositoryWrapper(Of T).Average(Expression(Of Func(Of T, Nullable(Of Single))))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Average(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Nullable(Of System.Single))))
  name.vb: Average(Expression(Of Func(Of T, Nullable(Of Single))))
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Single}}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Single}}})
  id: Average(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Single}}})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper`1
  langs:
  - csharp
  - vb
  name: Average(ISpecification<T>, Expression<Func<T, Nullable<Single>>>)
  nameWithType: RepositoryWrapper<T>.Average(ISpecification<T>, Expression<Func<T, Nullable<Single>>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Average(ISpecification<T>, System.Linq.Expressions.Expression<System.Func<T, System.Nullable<System.Single>>>)
  type: Method
  source:
    remote:
      path: src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
      branch: gh-pages
      repo: https://github.com/catalyst-network/Catalyst.Framework.git
    id: Average
    path: ../src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
    startLine: 225
  assemblies:
  - Catalyst.Core.Lib
  namespace: Catalyst.Core.Lib.Repository
  syntax:
    content: public float? Average(ISpecification<T> criteria, Expression<Func<T, float? >> selector)
    parameters:
    - id: criteria
      type: ISpecification{{T}}
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{{T},System.Nullable{System.Single}}}
    return:
      type: System.Nullable{System.Single}
    content.vb: Public Function Average(criteria As ISpecification(Of T), selector As Expression(Of Func(Of T, Single?))) As Single?
  overload: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average*
  nameWithType.vb: RepositoryWrapper(Of T).Average(ISpecification(Of T), Expression(Of Func(Of T, Nullable(Of Single))))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Average(ISpecification(Of T), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Nullable(Of System.Single))))
  name.vb: Average(ISpecification(Of T), Expression(Of Func(Of T, Nullable(Of Single))))
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Single}}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Single}}})
  id: Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Single}}})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper`1
  langs:
  - csharp
  - vb
  name: Average(Expression<Func<T, Boolean>>, Expression<Func<T, Nullable<Single>>>)
  nameWithType: RepositoryWrapper<T>.Average(Expression<Func<T, Boolean>>, Expression<Func<T, Nullable<Single>>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Average(System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<T, System.Nullable<System.Single>>>)
  type: Method
  source:
    remote:
      path: src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
      branch: gh-pages
      repo: https://github.com/catalyst-network/Catalyst.Framework.git
    id: Average
    path: ../src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
    startLine: 230
  assemblies:
  - Catalyst.Core.Lib
  namespace: Catalyst.Core.Lib.Repository
  syntax:
    content: public float? Average(Expression<Func<T, bool>> predicate, Expression<Func<T, float? >> selector)
    parameters:
    - id: predicate
      type: System.Linq.Expressions.Expression{System.Func{{T},System.Boolean}}
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{{T},System.Nullable{System.Single}}}
    return:
      type: System.Nullable{System.Single}
    content.vb: Public Function Average(predicate As Expression(Of Func(Of T, Boolean)), selector As Expression(Of Func(Of T, Single?))) As Single?
  overload: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average*
  nameWithType.vb: RepositoryWrapper(Of T).Average(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Nullable(Of Single))))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Average(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Nullable(Of System.Single))))
  name.vb: Average(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Nullable(Of Single))))
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.BeginBatch
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.BeginBatch
  id: BeginBatch
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper`1
  langs:
  - csharp
  - vb
  name: BeginBatch()
  nameWithType: RepositoryWrapper<T>.BeginBatch()
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.BeginBatch()
  type: Method
  source:
    remote:
      path: src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
      branch: gh-pages
      repo: https://github.com/catalyst-network/Catalyst.Framework.git
    id: BeginBatch
    path: ../src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
    startLine: 235
  assemblies:
  - Catalyst.Core.Lib
  namespace: Catalyst.Core.Lib.Repository
  syntax:
    content: public IBatch<T> BeginBatch()
    return:
      type: IBatch{{T}}
    content.vb: Public Function BeginBatch As IBatch(Of T)
  overload: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.BeginBatch*
  nameWithType.vb: RepositoryWrapper(Of T).BeginBatch()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).BeginBatch()
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.ClearCache
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.ClearCache
  id: ClearCache
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper`1
  langs:
  - csharp
  - vb
  name: ClearCache()
  nameWithType: RepositoryWrapper<T>.ClearCache()
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.ClearCache()
  type: Method
  source:
    remote:
      path: src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
      branch: gh-pages
      repo: https://github.com/catalyst-network/Catalyst.Framework.git
    id: ClearCache
    path: ../src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
    startLine: 240
  assemblies:
  - Catalyst.Core.Lib
  namespace: Catalyst.Core.Lib.Repository
  syntax:
    content: public void ClearCache()
    content.vb: Public Sub ClearCache
  overload: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.ClearCache*
  nameWithType.vb: RepositoryWrapper(Of T).ClearCache()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).ClearCache()
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Count
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Count
  id: Count
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper`1
  langs:
  - csharp
  - vb
  name: Count()
  nameWithType: RepositoryWrapper<T>.Count()
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Count()
  type: Method
  source:
    remote:
      path: src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
      branch: gh-pages
      repo: https://github.com/catalyst-network/Catalyst.Framework.git
    id: Count
    path: ../src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
    startLine: 245
  assemblies:
  - Catalyst.Core.Lib
  namespace: Catalyst.Core.Lib.Repository
  syntax:
    content: public int Count()
    return:
      type: System.Int32
    content.vb: Public Function Count As Integer
  overload: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Count*
  nameWithType.vb: RepositoryWrapper(Of T).Count()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Count()
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Count(ISpecification{`0})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Count(ISpecification{`0})
  id: Count(ISpecification{`0})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper`1
  langs:
  - csharp
  - vb
  name: Count(ISpecification<T>)
  nameWithType: RepositoryWrapper<T>.Count(ISpecification<T>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Count(ISpecification<T>)
  type: Method
  source:
    remote:
      path: src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
      branch: gh-pages
      repo: https://github.com/catalyst-network/Catalyst.Framework.git
    id: Count
    path: ../src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
    startLine: 250
  assemblies:
  - Catalyst.Core.Lib
  namespace: Catalyst.Core.Lib.Repository
  syntax:
    content: public int Count(ISpecification<T> criteria)
    parameters:
    - id: criteria
      type: ISpecification{{T}}
    return:
      type: System.Int32
    content.vb: Public Function Count(criteria As ISpecification(Of T)) As Integer
  overload: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Count*
  nameWithType.vb: RepositoryWrapper(Of T).Count(ISpecification(Of T))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Count(ISpecification(Of T))
  name.vb: Count(ISpecification(Of T))
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Count(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Count(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  id: Count(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper`1
  langs:
  - csharp
  - vb
  name: Count(Expression<Func<T, Boolean>>)
  nameWithType: RepositoryWrapper<T>.Count(Expression<Func<T, Boolean>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Count(System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>)
  type: Method
  source:
    remote:
      path: src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
      branch: gh-pages
      repo: https://github.com/catalyst-network/Catalyst.Framework.git
    id: Count
    path: ../src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
    startLine: 255
  assemblies:
  - Catalyst.Core.Lib
  namespace: Catalyst.Core.Lib.Repository
  syntax:
    content: public int Count(Expression<Func<T, bool>> predicate)
    parameters:
    - id: predicate
      type: System.Linq.Expressions.Expression{System.Func{{T},System.Boolean}}
    return:
      type: System.Int32
    content.vb: Public Function Count(predicate As Expression(Of Func(Of T, Boolean))) As Integer
  overload: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Count*
  nameWithType.vb: RepositoryWrapper(Of T).Count(Expression(Of Func(Of T, Boolean)))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Count(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)))
  name.vb: Count(Expression(Of Func(Of T, Boolean)))
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Delete(System.String)
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Delete(System.String)
  id: Delete(System.String)
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper`1
  langs:
  - csharp
  - vb
  name: Delete(String)
  nameWithType: RepositoryWrapper<T>.Delete(String)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Delete(System.String)
  type: Method
  source:
    remote:
      path: src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
      branch: gh-pages
      repo: https://github.com/catalyst-network/Catalyst.Framework.git
    id: Delete
    path: ../src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
    startLine: 260
  assemblies:
  - Catalyst.Core.Lib
  namespace: Catalyst.Core.Lib.Repository
  syntax:
    content: public void Delete(string key)
    parameters:
    - id: key
      type: System.String
    content.vb: Public Sub Delete(key As String)
  overload: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Delete*
  nameWithType.vb: RepositoryWrapper(Of T).Delete(String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Delete(System.String)
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Delete(System.Collections.Generic.IEnumerable{System.String})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Delete(System.Collections.Generic.IEnumerable{System.String})
  id: Delete(System.Collections.Generic.IEnumerable{System.String})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper`1
  langs:
  - csharp
  - vb
  name: Delete(IEnumerable<String>)
  nameWithType: RepositoryWrapper<T>.Delete(IEnumerable<String>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Delete(System.Collections.Generic.IEnumerable<System.String>)
  type: Method
  source:
    remote:
      path: src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
      branch: gh-pages
      repo: https://github.com/catalyst-network/Catalyst.Framework.git
    id: Delete
    path: ../src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
    startLine: 265
  assemblies:
  - Catalyst.Core.Lib
  namespace: Catalyst.Core.Lib.Repository
  syntax:
    content: public void Delete(IEnumerable<string> keys)
    parameters:
    - id: keys
      type: System.Collections.Generic.IEnumerable{System.String}
    content.vb: Public Sub Delete(keys As IEnumerable(Of String))
  overload: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Delete*
  nameWithType.vb: RepositoryWrapper(Of T).Delete(IEnumerable(Of String))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Delete(System.Collections.Generic.IEnumerable(Of System.String))
  name.vb: Delete(IEnumerable(Of String))
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Delete(System.String[])
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Delete(System.String[])
  id: Delete(System.String[])
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper`1
  langs:
  - csharp
  - vb
  name: Delete(String[])
  nameWithType: RepositoryWrapper<T>.Delete(String[])
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Delete(System.String[])
  type: Method
  source:
    remote:
      path: src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
      branch: gh-pages
      repo: https://github.com/catalyst-network/Catalyst.Framework.git
    id: Delete
    path: ../src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
    startLine: 270
  assemblies:
  - Catalyst.Core.Lib
  namespace: Catalyst.Core.Lib.Repository
  syntax:
    content: public void Delete(params string[] keys)
    parameters:
    - id: keys
      type: System.String[]
    content.vb: Public Sub Delete(ParamArray keys As String())
  overload: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Delete*
  nameWithType.vb: RepositoryWrapper(Of T).Delete(String())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Delete(System.String())
  name.vb: Delete(String())
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Delete(`0)
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Delete(`0)
  id: Delete(`0)
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper`1
  langs:
  - csharp
  - vb
  name: Delete(T)
  nameWithType: RepositoryWrapper<T>.Delete(T)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Delete(T)
  type: Method
  source:
    remote:
      path: src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
      branch: gh-pages
      repo: https://github.com/catalyst-network/Catalyst.Framework.git
    id: Delete
    path: ../src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
    startLine: 275
  assemblies:
  - Catalyst.Core.Lib
  namespace: Catalyst.Core.Lib.Repository
  syntax:
    content: public void Delete(T entity)
    parameters:
    - id: entity
      type: '{T}'
    content.vb: Public Sub Delete(entity As T)
  overload: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Delete*
  nameWithType.vb: RepositoryWrapper(Of T).Delete(T)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Delete(T)
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Delete(System.Collections.Generic.IEnumerable{`0})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Delete(System.Collections.Generic.IEnumerable{`0})
  id: Delete(System.Collections.Generic.IEnumerable{`0})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper`1
  langs:
  - csharp
  - vb
  name: Delete(IEnumerable<T>)
  nameWithType: RepositoryWrapper<T>.Delete(IEnumerable<T>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Delete(System.Collections.Generic.IEnumerable<T>)
  type: Method
  source:
    remote:
      path: src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
      branch: gh-pages
      repo: https://github.com/catalyst-network/Catalyst.Framework.git
    id: Delete
    path: ../src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
    startLine: 280
  assemblies:
  - Catalyst.Core.Lib
  namespace: Catalyst.Core.Lib.Repository
  syntax:
    content: public void Delete(IEnumerable<T> entities)
    parameters:
    - id: entities
      type: System.Collections.Generic.IEnumerable{{T}}
    content.vb: Public Sub Delete(entities As IEnumerable(Of T))
  overload: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Delete*
  nameWithType.vb: RepositoryWrapper(Of T).Delete(IEnumerable(Of T))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Delete(System.Collections.Generic.IEnumerable(Of T))
  name.vb: Delete(IEnumerable(Of T))
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Delete(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Delete(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  id: Delete(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper`1
  langs:
  - csharp
  - vb
  name: Delete(Expression<Func<T, Boolean>>)
  nameWithType: RepositoryWrapper<T>.Delete(Expression<Func<T, Boolean>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Delete(System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>)
  type: Method
  source:
    remote:
      path: src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
      branch: gh-pages
      repo: https://github.com/catalyst-network/Catalyst.Framework.git
    id: Delete
    path: ../src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
    startLine: 285
  assemblies:
  - Catalyst.Core.Lib
  namespace: Catalyst.Core.Lib.Repository
  syntax:
    content: public void Delete(Expression<Func<T, bool>> predicate)
    parameters:
    - id: predicate
      type: System.Linq.Expressions.Expression{System.Func{{T},System.Boolean}}
    content.vb: Public Sub Delete(predicate As Expression(Of Func(Of T, Boolean)))
  overload: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Delete*
  nameWithType.vb: RepositoryWrapper(Of T).Delete(Expression(Of Func(Of T, Boolean)))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Delete(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)))
  name.vb: Delete(Expression(Of Func(Of T, Boolean)))
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Delete(ISpecification{`0})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Delete(ISpecification{`0})
  id: Delete(ISpecification{`0})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper`1
  langs:
  - csharp
  - vb
  name: Delete(ISpecification<T>)
  nameWithType: RepositoryWrapper<T>.Delete(ISpecification<T>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Delete(ISpecification<T>)
  type: Method
  source:
    remote:
      path: src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
      branch: gh-pages
      repo: https://github.com/catalyst-network/Catalyst.Framework.git
    id: Delete
    path: ../src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
    startLine: 290
  assemblies:
  - Catalyst.Core.Lib
  namespace: Catalyst.Core.Lib.Repository
  syntax:
    content: public void Delete(ISpecification<T> criteria)
    parameters:
    - id: criteria
      type: ISpecification{{T}}
    content.vb: Public Sub Delete(criteria As ISpecification(Of T))
  overload: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Delete*
  nameWithType.vb: RepositoryWrapper(Of T).Delete(ISpecification(Of T))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Delete(ISpecification(Of T))
  name.vb: Delete(ISpecification(Of T))
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.DisableCaching
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.DisableCaching
  id: DisableCaching
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper`1
  langs:
  - csharp
  - vb
  name: DisableCaching()
  nameWithType: RepositoryWrapper<T>.DisableCaching()
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.DisableCaching()
  type: Method
  source:
    remote:
      path: src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
      branch: gh-pages
      repo: https://github.com/catalyst-network/Catalyst.Framework.git
    id: DisableCaching
    path: ../src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
    startLine: 295
  assemblies:
  - Catalyst.Core.Lib
  namespace: Catalyst.Core.Lib.Repository
  syntax:
    content: public IDisabledCache DisableCaching()
    return:
      type: IDisabledCache
    content.vb: Public Function DisableCaching As IDisabledCache
  overload: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.DisableCaching*
  nameWithType.vb: RepositoryWrapper(Of T).DisableCaching()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).DisableCaching()
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Dispose
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Dispose
  id: Dispose
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper`1
  langs:
  - csharp
  - vb
  name: Dispose()
  nameWithType: RepositoryWrapper<T>.Dispose()
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Dispose()
  type: Method
  source:
    remote:
      path: src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
      branch: gh-pages
      repo: https://github.com/catalyst-network/Catalyst.Framework.git
    id: Dispose
    path: ../src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
    startLine: 300
  assemblies:
  - Catalyst.Core.Lib
  namespace: Catalyst.Core.Lib.Repository
  syntax:
    content: public void Dispose()
    content.vb: Public Sub Dispose
  overload: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Dispose*
  nameWithType.vb: RepositoryWrapper(Of T).Dispose()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Dispose()
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Exists(System.String)
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Exists(System.String)
  id: Exists(System.String)
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper`1
  langs:
  - csharp
  - vb
  name: Exists(String)
  nameWithType: RepositoryWrapper<T>.Exists(String)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Exists(System.String)
  type: Method
  source:
    remote:
      path: src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
      branch: gh-pages
      repo: https://github.com/catalyst-network/Catalyst.Framework.git
    id: Exists
    path: ../src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
    startLine: 305
  assemblies:
  - Catalyst.Core.Lib
  namespace: Catalyst.Core.Lib.Repository
  syntax:
    content: public bool Exists(string key)
    parameters:
    - id: key
      type: System.String
    return:
      type: System.Boolean
    content.vb: Public Function Exists(key As String) As Boolean
  overload: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Exists*
  nameWithType.vb: RepositoryWrapper(Of T).Exists(String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Exists(System.String)
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Exists(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Exists(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  id: Exists(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper`1
  langs:
  - csharp
  - vb
  name: Exists(Expression<Func<T, Boolean>>)
  nameWithType: RepositoryWrapper<T>.Exists(Expression<Func<T, Boolean>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Exists(System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>)
  type: Method
  source:
    remote:
      path: src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
      branch: gh-pages
      repo: https://github.com/catalyst-network/Catalyst.Framework.git
    id: Exists
    path: ../src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
    startLine: 310
  assemblies:
  - Catalyst.Core.Lib
  namespace: Catalyst.Core.Lib.Repository
  syntax:
    content: public bool Exists(Expression<Func<T, bool>> predicate)
    parameters:
    - id: predicate
      type: System.Linq.Expressions.Expression{System.Func{{T},System.Boolean}}
    return:
      type: System.Boolean
    content.vb: Public Function Exists(predicate As Expression(Of Func(Of T, Boolean))) As Boolean
  overload: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Exists*
  nameWithType.vb: RepositoryWrapper(Of T).Exists(Expression(Of Func(Of T, Boolean)))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Exists(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)))
  name.vb: Exists(Expression(Of Func(Of T, Boolean)))
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Exists(ISpecification{`0})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Exists(ISpecification{`0})
  id: Exists(ISpecification{`0})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper`1
  langs:
  - csharp
  - vb
  name: Exists(ISpecification<T>)
  nameWithType: RepositoryWrapper<T>.Exists(ISpecification<T>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Exists(ISpecification<T>)
  type: Method
  source:
    remote:
      path: src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
      branch: gh-pages
      repo: https://github.com/catalyst-network/Catalyst.Framework.git
    id: Exists
    path: ../src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
    startLine: 315
  assemblies:
  - Catalyst.Core.Lib
  namespace: Catalyst.Core.Lib.Repository
  syntax:
    content: public bool Exists(ISpecification<T> criteria)
    parameters:
    - id: criteria
      type: ISpecification{{T}}
    return:
      type: System.Boolean
    content.vb: Public Function Exists(criteria As ISpecification(Of T)) As Boolean
  overload: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Exists*
  nameWithType.vb: RepositoryWrapper(Of T).Exists(ISpecification(Of T))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Exists(ISpecification(Of T))
  name.vb: Exists(ISpecification(Of T))
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Find(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},IQueryOptions{`0})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Find(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},IQueryOptions{`0})
  id: Find(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},IQueryOptions{`0})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper`1
  langs:
  - csharp
  - vb
  name: Find(Expression<Func<T, Boolean>>, IQueryOptions<T>)
  nameWithType: RepositoryWrapper<T>.Find(Expression<Func<T, Boolean>>, IQueryOptions<T>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Find(System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>, IQueryOptions<T>)
  type: Method
  source:
    remote:
      path: src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
      branch: gh-pages
      repo: https://github.com/catalyst-network/Catalyst.Framework.git
    id: Find
    path: ../src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
    startLine: 320
  assemblies:
  - Catalyst.Core.Lib
  namespace: Catalyst.Core.Lib.Repository
  syntax:
    content: public T Find(Expression<Func<T, bool>> predicate, IQueryOptions<T> queryOptions = null)
    parameters:
    - id: predicate
      type: System.Linq.Expressions.Expression{System.Func{{T},System.Boolean}}
    - id: queryOptions
      type: IQueryOptions{{T}}
    return:
      type: '{T}'
    content.vb: Public Function Find(predicate As Expression(Of Func(Of T, Boolean)), queryOptions As IQueryOptions(Of T) = Nothing) As T
  overload: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Find*
  nameWithType.vb: RepositoryWrapper(Of T).Find(Expression(Of Func(Of T, Boolean)), IQueryOptions(Of T))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Find(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)), IQueryOptions(Of T))
  name.vb: Find(Expression(Of Func(Of T, Boolean)), IQueryOptions(Of T))
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Find``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},IQueryOptions{`0})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Find``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},IQueryOptions{`0})
  id: Find``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},IQueryOptions{`0})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper`1
  langs:
  - csharp
  - vb
  name: Find<TResult>(Expression<Func<T, Boolean>>, Expression<Func<T, TResult>>, IQueryOptions<T>)
  nameWithType: RepositoryWrapper<T>.Find<TResult>(Expression<Func<T, Boolean>>, Expression<Func<T, TResult>>, IQueryOptions<T>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Find<TResult>(System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<T, TResult>>, IQueryOptions<T>)
  type: Method
  source:
    remote:
      path: src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
      branch: gh-pages
      repo: https://github.com/catalyst-network/Catalyst.Framework.git
    id: Find
    path: ../src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
    startLine: 325
  assemblies:
  - Catalyst.Core.Lib
  namespace: Catalyst.Core.Lib.Repository
  syntax:
    content: public TResult Find<TResult>(Expression<Func<T, bool>> predicate, Expression<Func<T, TResult>> selector, IQueryOptions<T> queryOptions = null)
    parameters:
    - id: predicate
      type: System.Linq.Expressions.Expression{System.Func{{T},System.Boolean}}
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{{T},{TResult}}}
    - id: queryOptions
      type: IQueryOptions{{T}}
    typeParameters:
    - id: TResult
    return:
      type: '{TResult}'
    content.vb: Public Function Find(Of TResult)(predicate As Expression(Of Func(Of T, Boolean)), selector As Expression(Of Func(Of T, TResult)), queryOptions As IQueryOptions(Of T) = Nothing) As TResult
  overload: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Find*
  nameWithType.vb: RepositoryWrapper(Of T).Find(Of TResult)(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, TResult)), IQueryOptions(Of T))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Find(Of TResult)(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of T, TResult)), IQueryOptions(Of T))
  name.vb: Find(Of TResult)(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, TResult)), IQueryOptions(Of T))
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Find(ISpecification{`0},IQueryOptions{`0})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Find(ISpecification{`0},IQueryOptions{`0})
  id: Find(ISpecification{`0},IQueryOptions{`0})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper`1
  langs:
  - csharp
  - vb
  name: Find(ISpecification<T>, IQueryOptions<T>)
  nameWithType: RepositoryWrapper<T>.Find(ISpecification<T>, IQueryOptions<T>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Find(ISpecification<T>, IQueryOptions<T>)
  type: Method
  source:
    remote:
      path: src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
      branch: gh-pages
      repo: https://github.com/catalyst-network/Catalyst.Framework.git
    id: Find
    path: ../src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
    startLine: 330
  assemblies:
  - Catalyst.Core.Lib
  namespace: Catalyst.Core.Lib.Repository
  syntax:
    content: public T Find(ISpecification<T> criteria, IQueryOptions<T> queryOptions = null)
    parameters:
    - id: criteria
      type: ISpecification{{T}}
    - id: queryOptions
      type: IQueryOptions{{T}}
    return:
      type: '{T}'
    content.vb: Public Function Find(criteria As ISpecification(Of T), queryOptions As IQueryOptions(Of T) = Nothing) As T
  overload: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Find*
  nameWithType.vb: RepositoryWrapper(Of T).Find(ISpecification(Of T), IQueryOptions(Of T))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Find(ISpecification(Of T), IQueryOptions(Of T))
  name.vb: Find(ISpecification(Of T), IQueryOptions(Of T))
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Find``1(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}},IQueryOptions{`0})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Find``1(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}},IQueryOptions{`0})
  id: Find``1(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}},IQueryOptions{`0})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper`1
  langs:
  - csharp
  - vb
  name: Find<TResult>(ISpecification<T>, Expression<Func<T, TResult>>, IQueryOptions<T>)
  nameWithType: RepositoryWrapper<T>.Find<TResult>(ISpecification<T>, Expression<Func<T, TResult>>, IQueryOptions<T>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Find<TResult>(ISpecification<T>, System.Linq.Expressions.Expression<System.Func<T, TResult>>, IQueryOptions<T>)
  type: Method
  source:
    remote:
      path: src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
      branch: gh-pages
      repo: https://github.com/catalyst-network/Catalyst.Framework.git
    id: Find
    path: ../src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
    startLine: 335
  assemblies:
  - Catalyst.Core.Lib
  namespace: Catalyst.Core.Lib.Repository
  syntax:
    content: public TResult Find<TResult>(ISpecification<T> criteria, Expression<Func<T, TResult>> selector, IQueryOptions<T> queryOptions = null)
    parameters:
    - id: criteria
      type: ISpecification{{T}}
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{{T},{TResult}}}
    - id: queryOptions
      type: IQueryOptions{{T}}
    typeParameters:
    - id: TResult
    return:
      type: '{TResult}'
    content.vb: Public Function Find(Of TResult)(criteria As ISpecification(Of T), selector As Expression(Of Func(Of T, TResult)), queryOptions As IQueryOptions(Of T) = Nothing) As TResult
  overload: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Find*
  nameWithType.vb: RepositoryWrapper(Of T).Find(Of TResult)(ISpecification(Of T), Expression(Of Func(Of T, TResult)), IQueryOptions(Of T))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Find(Of TResult)(ISpecification(Of T), System.Linq.Expressions.Expression(Of System.Func(Of T, TResult)), IQueryOptions(Of T))
  name.vb: Find(Of TResult)(ISpecification(Of T), Expression(Of Func(Of T, TResult)), IQueryOptions(Of T))
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.FindAll(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},IQueryOptions{`0})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.FindAll(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},IQueryOptions{`0})
  id: FindAll(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},IQueryOptions{`0})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper`1
  langs:
  - csharp
  - vb
  name: FindAll(Expression<Func<T, Boolean>>, IQueryOptions<T>)
  nameWithType: RepositoryWrapper<T>.FindAll(Expression<Func<T, Boolean>>, IQueryOptions<T>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.FindAll(System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>, IQueryOptions<T>)
  type: Method
  source:
    remote:
      path: src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
      branch: gh-pages
      repo: https://github.com/catalyst-network/Catalyst.Framework.git
    id: FindAll
    path: ../src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
    startLine: 340
  assemblies:
  - Catalyst.Core.Lib
  namespace: Catalyst.Core.Lib.Repository
  syntax:
    content: public IEnumerable<T> FindAll(Expression<Func<T, bool>> predicate, IQueryOptions<T> queryOptions = null)
    parameters:
    - id: predicate
      type: System.Linq.Expressions.Expression{System.Func{{T},System.Boolean}}
    - id: queryOptions
      type: IQueryOptions{{T}}
    return:
      type: System.Collections.Generic.IEnumerable{{T}}
    content.vb: Public Function FindAll(predicate As Expression(Of Func(Of T, Boolean)), queryOptions As IQueryOptions(Of T) = Nothing) As IEnumerable(Of T)
  overload: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.FindAll*
  nameWithType.vb: RepositoryWrapper(Of T).FindAll(Expression(Of Func(Of T, Boolean)), IQueryOptions(Of T))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).FindAll(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)), IQueryOptions(Of T))
  name.vb: FindAll(Expression(Of Func(Of T, Boolean)), IQueryOptions(Of T))
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.FindAll``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},IQueryOptions{`0})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.FindAll``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},IQueryOptions{`0})
  id: FindAll``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},IQueryOptions{`0})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper`1
  langs:
  - csharp
  - vb
  name: FindAll<TResult>(Expression<Func<T, Boolean>>, Expression<Func<T, TResult>>, IQueryOptions<T>)
  nameWithType: RepositoryWrapper<T>.FindAll<TResult>(Expression<Func<T, Boolean>>, Expression<Func<T, TResult>>, IQueryOptions<T>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.FindAll<TResult>(System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<T, TResult>>, IQueryOptions<T>)
  type: Method
  source:
    remote:
      path: src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
      branch: gh-pages
      repo: https://github.com/catalyst-network/Catalyst.Framework.git
    id: FindAll
    path: ../src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
    startLine: 345
  assemblies:
  - Catalyst.Core.Lib
  namespace: Catalyst.Core.Lib.Repository
  syntax:
    content: public IEnumerable<TResult> FindAll<TResult>(Expression<Func<T, bool>> predicate, Expression<Func<T, TResult>> selector, IQueryOptions<T> queryOptions = null)
    parameters:
    - id: predicate
      type: System.Linq.Expressions.Expression{System.Func{{T},System.Boolean}}
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{{T},{TResult}}}
    - id: queryOptions
      type: IQueryOptions{{T}}
    typeParameters:
    - id: TResult
    return:
      type: System.Collections.Generic.IEnumerable{{TResult}}
    content.vb: Public Function FindAll(Of TResult)(predicate As Expression(Of Func(Of T, Boolean)), selector As Expression(Of Func(Of T, TResult)), queryOptions As IQueryOptions(Of T) = Nothing) As IEnumerable(Of TResult)
  overload: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.FindAll*
  nameWithType.vb: RepositoryWrapper(Of T).FindAll(Of TResult)(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, TResult)), IQueryOptions(Of T))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).FindAll(Of TResult)(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of T, TResult)), IQueryOptions(Of T))
  name.vb: FindAll(Of TResult)(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, TResult)), IQueryOptions(Of T))
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.FindAll(ISpecification{`0},IQueryOptions{`0})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.FindAll(ISpecification{`0},IQueryOptions{`0})
  id: FindAll(ISpecification{`0},IQueryOptions{`0})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper`1
  langs:
  - csharp
  - vb
  name: FindAll(ISpecification<T>, IQueryOptions<T>)
  nameWithType: RepositoryWrapper<T>.FindAll(ISpecification<T>, IQueryOptions<T>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.FindAll(ISpecification<T>, IQueryOptions<T>)
  type: Method
  source:
    remote:
      path: src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
      branch: gh-pages
      repo: https://github.com/catalyst-network/Catalyst.Framework.git
    id: FindAll
    path: ../src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
    startLine: 350
  assemblies:
  - Catalyst.Core.Lib
  namespace: Catalyst.Core.Lib.Repository
  syntax:
    content: public IEnumerable<T> FindAll(ISpecification<T> criteria, IQueryOptions<T> queryOptions = null)
    parameters:
    - id: criteria
      type: ISpecification{{T}}
    - id: queryOptions
      type: IQueryOptions{{T}}
    return:
      type: System.Collections.Generic.IEnumerable{{T}}
    content.vb: Public Function FindAll(criteria As ISpecification(Of T), queryOptions As IQueryOptions(Of T) = Nothing) As IEnumerable(Of T)
  overload: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.FindAll*
  nameWithType.vb: RepositoryWrapper(Of T).FindAll(ISpecification(Of T), IQueryOptions(Of T))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).FindAll(ISpecification(Of T), IQueryOptions(Of T))
  name.vb: FindAll(ISpecification(Of T), IQueryOptions(Of T))
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.FindAll``1(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}},IQueryOptions{`0})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.FindAll``1(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}},IQueryOptions{`0})
  id: FindAll``1(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}},IQueryOptions{`0})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper`1
  langs:
  - csharp
  - vb
  name: FindAll<TResult>(ISpecification<T>, Expression<Func<T, TResult>>, IQueryOptions<T>)
  nameWithType: RepositoryWrapper<T>.FindAll<TResult>(ISpecification<T>, Expression<Func<T, TResult>>, IQueryOptions<T>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.FindAll<TResult>(ISpecification<T>, System.Linq.Expressions.Expression<System.Func<T, TResult>>, IQueryOptions<T>)
  type: Method
  source:
    remote:
      path: src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
      branch: gh-pages
      repo: https://github.com/catalyst-network/Catalyst.Framework.git
    id: FindAll
    path: ../src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
    startLine: 355
  assemblies:
  - Catalyst.Core.Lib
  namespace: Catalyst.Core.Lib.Repository
  syntax:
    content: public IEnumerable<TResult> FindAll<TResult>(ISpecification<T> criteria, Expression<Func<T, TResult>> selector, IQueryOptions<T> queryOptions = null)
    parameters:
    - id: criteria
      type: ISpecification{{T}}
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{{T},{TResult}}}
    - id: queryOptions
      type: IQueryOptions{{T}}
    typeParameters:
    - id: TResult
    return:
      type: System.Collections.Generic.IEnumerable{{TResult}}
    content.vb: Public Function FindAll(Of TResult)(criteria As ISpecification(Of T), selector As Expression(Of Func(Of T, TResult)), queryOptions As IQueryOptions(Of T) = Nothing) As IEnumerable(Of TResult)
  overload: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.FindAll*
  nameWithType.vb: RepositoryWrapper(Of T).FindAll(Of TResult)(ISpecification(Of T), Expression(Of Func(Of T, TResult)), IQueryOptions(Of T))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).FindAll(Of TResult)(ISpecification(Of T), System.Linq.Expressions.Expression(Of System.Func(Of T, TResult)), IQueryOptions(Of T))
  name.vb: FindAll(Of TResult)(ISpecification(Of T), Expression(Of Func(Of T, TResult)), IQueryOptions(Of T))
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Get(System.String)
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Get(System.String)
  id: Get(System.String)
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper`1
  langs:
  - csharp
  - vb
  name: Get(String)
  nameWithType: RepositoryWrapper<T>.Get(String)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Get(System.String)
  type: Method
  source:
    remote:
      path: src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
      branch: gh-pages
      repo: https://github.com/catalyst-network/Catalyst.Framework.git
    id: Get
    path: ../src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
    startLine: 360
  assemblies:
  - Catalyst.Core.Lib
  namespace: Catalyst.Core.Lib.Repository
  syntax:
    content: public T Get(string key)
    parameters:
    - id: key
      type: System.String
    return:
      type: '{T}'
    content.vb: Public Function Get(key As String) As T
  overload: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Get*
  nameWithType.vb: RepositoryWrapper(Of T).Get(String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Get(System.String)
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Get(System.String,IFetchStrategy{`0})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Get(System.String,IFetchStrategy{`0})
  id: Get(System.String,IFetchStrategy{`0})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper`1
  langs:
  - csharp
  - vb
  name: Get(String, IFetchStrategy<T>)
  nameWithType: RepositoryWrapper<T>.Get(String, IFetchStrategy<T>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Get(System.String, IFetchStrategy<T>)
  type: Method
  source:
    remote:
      path: src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
      branch: gh-pages
      repo: https://github.com/catalyst-network/Catalyst.Framework.git
    id: Get
    path: ../src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
    startLine: 365
  assemblies:
  - Catalyst.Core.Lib
  namespace: Catalyst.Core.Lib.Repository
  syntax:
    content: public T Get(string key, IFetchStrategy<T> fetchStrategy)
    parameters:
    - id: key
      type: System.String
    - id: fetchStrategy
      type: IFetchStrategy{{T}}
    return:
      type: '{T}'
    content.vb: Public Function Get(key As String, fetchStrategy As IFetchStrategy(Of T)) As T
  overload: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Get*
  nameWithType.vb: RepositoryWrapper(Of T).Get(String, IFetchStrategy(Of T))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Get(System.String, IFetchStrategy(Of T))
  name.vb: Get(String, IFetchStrategy(Of T))
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Get(System.String,System.String[])
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Get(System.String,System.String[])
  id: Get(System.String,System.String[])
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper`1
  langs:
  - csharp
  - vb
  name: Get(String, String[])
  nameWithType: RepositoryWrapper<T>.Get(String, String[])
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Get(System.String, System.String[])
  type: Method
  source:
    remote:
      path: src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
      branch: gh-pages
      repo: https://github.com/catalyst-network/Catalyst.Framework.git
    id: Get
    path: ../src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
    startLine: 370
  assemblies:
  - Catalyst.Core.Lib
  namespace: Catalyst.Core.Lib.Repository
  syntax:
    content: public T Get(string key, params string[] includePaths)
    parameters:
    - id: key
      type: System.String
    - id: includePaths
      type: System.String[]
    return:
      type: '{T}'
    content.vb: Public Function Get(key As String, ParamArray includePaths As String()) As T
  overload: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Get*
  nameWithType.vb: RepositoryWrapper(Of T).Get(String, String())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Get(System.String, System.String())
  name.vb: Get(String, String())
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Get(System.String,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Get(System.String,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])
  id: Get(System.String,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper`1
  langs:
  - csharp
  - vb
  name: Get(String, Expression<Func<T, Object>>[])
  nameWithType: RepositoryWrapper<T>.Get(String, Expression<Func<T, Object>>[])
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Get(System.String, System.Linq.Expressions.Expression<System.Func<T, System.Object>>[])
  type: Method
  source:
    remote:
      path: src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
      branch: gh-pages
      repo: https://github.com/catalyst-network/Catalyst.Framework.git
    id: Get
    path: ../src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
    startLine: 375
  assemblies:
  - Catalyst.Core.Lib
  namespace: Catalyst.Core.Lib.Repository
  syntax:
    content: public T Get(string key, params Expression<Func<T, object>>[] includePaths)
    parameters:
    - id: key
      type: System.String
    - id: includePaths
      type: System.Linq.Expressions.Expression{System.Func{{T},System.Object}}[]
    return:
      type: '{T}'
    content.vb: Public Function Get(key As String, ParamArray includePaths As Expression(Of Func(Of T, Object))()) As T
  overload: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Get*
  nameWithType.vb: RepositoryWrapper(Of T).Get(String, Expression(Of Func(Of T, Object))())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Get(System.String, System.Linq.Expressions.Expression(Of System.Func(Of T, System.Object))())
  name.vb: Get(String, Expression(Of Func(Of T, Object))())
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Get``1(System.String,System.Linq.Expressions.Expression{System.Func{`0,``0}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Get``1(System.String,System.Linq.Expressions.Expression{System.Func{`0,``0}})
  id: Get``1(System.String,System.Linq.Expressions.Expression{System.Func{`0,``0}})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper`1
  langs:
  - csharp
  - vb
  name: Get<TResult>(String, Expression<Func<T, TResult>>)
  nameWithType: RepositoryWrapper<T>.Get<TResult>(String, Expression<Func<T, TResult>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Get<TResult>(System.String, System.Linq.Expressions.Expression<System.Func<T, TResult>>)
  type: Method
  source:
    remote:
      path: src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
      branch: gh-pages
      repo: https://github.com/catalyst-network/Catalyst.Framework.git
    id: Get
    path: ../src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
    startLine: 380
  assemblies:
  - Catalyst.Core.Lib
  namespace: Catalyst.Core.Lib.Repository
  syntax:
    content: public TResult Get<TResult>(string key, Expression<Func<T, TResult>> selector)
    parameters:
    - id: key
      type: System.String
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{{T},{TResult}}}
    typeParameters:
    - id: TResult
    return:
      type: '{TResult}'
    content.vb: Public Function Get(Of TResult)(key As String, selector As Expression(Of Func(Of T, TResult))) As TResult
  overload: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Get*
  nameWithType.vb: RepositoryWrapper(Of T).Get(Of TResult)(String, Expression(Of Func(Of T, TResult)))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Get(Of TResult)(System.String, System.Linq.Expressions.Expression(Of System.Func(Of T, TResult)))
  name.vb: Get(Of TResult)(String, Expression(Of Func(Of T, TResult)))
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Get``1(System.String,System.Linq.Expressions.Expression{System.Func{`0,``0}},IFetchStrategy{`0})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Get``1(System.String,System.Linq.Expressions.Expression{System.Func{`0,``0}},IFetchStrategy{`0})
  id: Get``1(System.String,System.Linq.Expressions.Expression{System.Func{`0,``0}},IFetchStrategy{`0})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper`1
  langs:
  - csharp
  - vb
  name: Get<TResult>(String, Expression<Func<T, TResult>>, IFetchStrategy<T>)
  nameWithType: RepositoryWrapper<T>.Get<TResult>(String, Expression<Func<T, TResult>>, IFetchStrategy<T>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Get<TResult>(System.String, System.Linq.Expressions.Expression<System.Func<T, TResult>>, IFetchStrategy<T>)
  type: Method
  source:
    remote:
      path: src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
      branch: gh-pages
      repo: https://github.com/catalyst-network/Catalyst.Framework.git
    id: Get
    path: ../src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
    startLine: 385
  assemblies:
  - Catalyst.Core.Lib
  namespace: Catalyst.Core.Lib.Repository
  syntax:
    content: public TResult Get<TResult>(string key, Expression<Func<T, TResult>> selector, IFetchStrategy<T> fetchStrategy)
    parameters:
    - id: key
      type: System.String
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{{T},{TResult}}}
    - id: fetchStrategy
      type: IFetchStrategy{{T}}
    typeParameters:
    - id: TResult
    return:
      type: '{TResult}'
    content.vb: Public Function Get(Of TResult)(key As String, selector As Expression(Of Func(Of T, TResult)), fetchStrategy As IFetchStrategy(Of T)) As TResult
  overload: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Get*
  nameWithType.vb: RepositoryWrapper(Of T).Get(Of TResult)(String, Expression(Of Func(Of T, TResult)), IFetchStrategy(Of T))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Get(Of TResult)(System.String, System.Linq.Expressions.Expression(Of System.Func(Of T, TResult)), IFetchStrategy(Of T))
  name.vb: Get(Of TResult)(String, Expression(Of Func(Of T, TResult)), IFetchStrategy(Of T))
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Get``1(System.String,System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Get``1(System.String,System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])
  id: Get``1(System.String,System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper`1
  langs:
  - csharp
  - vb
  name: Get<TResult>(String, Expression<Func<T, TResult>>, Expression<Func<T, Object>>[])
  nameWithType: RepositoryWrapper<T>.Get<TResult>(String, Expression<Func<T, TResult>>, Expression<Func<T, Object>>[])
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Get<TResult>(System.String, System.Linq.Expressions.Expression<System.Func<T, TResult>>, System.Linq.Expressions.Expression<System.Func<T, System.Object>>[])
  type: Method
  source:
    remote:
      path: src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
      branch: gh-pages
      repo: https://github.com/catalyst-network/Catalyst.Framework.git
    id: Get
    path: ../src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
    startLine: 390
  assemblies:
  - Catalyst.Core.Lib
  namespace: Catalyst.Core.Lib.Repository
  syntax:
    content: public TResult Get<TResult>(string key, Expression<Func<T, TResult>> selector, params Expression<Func<T, object>>[] includePaths)
    parameters:
    - id: key
      type: System.String
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{{T},{TResult}}}
    - id: includePaths
      type: System.Linq.Expressions.Expression{System.Func{{T},System.Object}}[]
    typeParameters:
    - id: TResult
    return:
      type: '{TResult}'
    content.vb: Public Function Get(Of TResult)(key As String, selector As Expression(Of Func(Of T, TResult)), ParamArray includePaths As Expression(Of Func(Of T, Object))()) As TResult
  overload: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Get*
  nameWithType.vb: RepositoryWrapper(Of T).Get(Of TResult)(String, Expression(Of Func(Of T, TResult)), Expression(Of Func(Of T, Object))())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Get(Of TResult)(System.String, System.Linq.Expressions.Expression(Of System.Func(Of T, TResult)), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Object))())
  name.vb: Get(Of TResult)(String, Expression(Of Func(Of T, TResult)), Expression(Of Func(Of T, Object))())
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Get``1(System.String,System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String[])
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Get``1(System.String,System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String[])
  id: Get``1(System.String,System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String[])
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper`1
  langs:
  - csharp
  - vb
  name: Get<TResult>(String, Expression<Func<T, TResult>>, String[])
  nameWithType: RepositoryWrapper<T>.Get<TResult>(String, Expression<Func<T, TResult>>, String[])
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Get<TResult>(System.String, System.Linq.Expressions.Expression<System.Func<T, TResult>>, System.String[])
  type: Method
  source:
    remote:
      path: src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
      branch: gh-pages
      repo: https://github.com/catalyst-network/Catalyst.Framework.git
    id: Get
    path: ../src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
    startLine: 395
  assemblies:
  - Catalyst.Core.Lib
  namespace: Catalyst.Core.Lib.Repository
  syntax:
    content: public TResult Get<TResult>(string key, Expression<Func<T, TResult>> selector, params string[] includePaths)
    parameters:
    - id: key
      type: System.String
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{{T},{TResult}}}
    - id: includePaths
      type: System.String[]
    typeParameters:
    - id: TResult
    return:
      type: '{TResult}'
    content.vb: Public Function Get(Of TResult)(key As String, selector As Expression(Of Func(Of T, TResult)), ParamArray includePaths As String()) As TResult
  overload: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Get*
  nameWithType.vb: RepositoryWrapper(Of T).Get(Of TResult)(String, Expression(Of Func(Of T, TResult)), String())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Get(Of TResult)(System.String, System.Linq.Expressions.Expression(Of System.Func(Of T, TResult)), System.String())
  name.vb: Get(Of TResult)(String, Expression(Of Func(Of T, TResult)), String())
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll
  id: GetAll
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper`1
  langs:
  - csharp
  - vb
  name: GetAll()
  nameWithType: RepositoryWrapper<T>.GetAll()
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.GetAll()
  type: Method
  source:
    remote:
      path: src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
      branch: gh-pages
      repo: https://github.com/catalyst-network/Catalyst.Framework.git
    id: GetAll
    path: ../src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
    startLine: 400
  assemblies:
  - Catalyst.Core.Lib
  namespace: Catalyst.Core.Lib.Repository
  syntax:
    content: public IEnumerable<T> GetAll()
    return:
      type: System.Collections.Generic.IEnumerable{{T}}
    content.vb: Public Function GetAll As IEnumerable(Of T)
  overload: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll*
  nameWithType.vb: RepositoryWrapper(Of T).GetAll()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).GetAll()
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll(IFetchStrategy{`0})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll(IFetchStrategy{`0})
  id: GetAll(IFetchStrategy{`0})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper`1
  langs:
  - csharp
  - vb
  name: GetAll(IFetchStrategy<T>)
  nameWithType: RepositoryWrapper<T>.GetAll(IFetchStrategy<T>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.GetAll(IFetchStrategy<T>)
  type: Method
  source:
    remote:
      path: src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
      branch: gh-pages
      repo: https://github.com/catalyst-network/Catalyst.Framework.git
    id: GetAll
    path: ../src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
    startLine: 405
  assemblies:
  - Catalyst.Core.Lib
  namespace: Catalyst.Core.Lib.Repository
  syntax:
    content: public IEnumerable<T> GetAll(IFetchStrategy<T> fetchStrategy)
    parameters:
    - id: fetchStrategy
      type: IFetchStrategy{{T}}
    return:
      type: System.Collections.Generic.IEnumerable{{T}}
    content.vb: Public Function GetAll(fetchStrategy As IFetchStrategy(Of T)) As IEnumerable(Of T)
  overload: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll*
  nameWithType.vb: RepositoryWrapper(Of T).GetAll(IFetchStrategy(Of T))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).GetAll(IFetchStrategy(Of T))
  name.vb: GetAll(IFetchStrategy(Of T))
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll(System.String[])
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll(System.String[])
  id: GetAll(System.String[])
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper`1
  langs:
  - csharp
  - vb
  name: GetAll(String[])
  nameWithType: RepositoryWrapper<T>.GetAll(String[])
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.GetAll(System.String[])
  type: Method
  source:
    remote:
      path: src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
      branch: gh-pages
      repo: https://github.com/catalyst-network/Catalyst.Framework.git
    id: GetAll
    path: ../src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
    startLine: 410
  assemblies:
  - Catalyst.Core.Lib
  namespace: Catalyst.Core.Lib.Repository
  syntax:
    content: public IEnumerable<T> GetAll(params string[] includePaths)
    parameters:
    - id: includePaths
      type: System.String[]
    return:
      type: System.Collections.Generic.IEnumerable{{T}}
    content.vb: Public Function GetAll(ParamArray includePaths As String()) As IEnumerable(Of T)
  overload: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll*
  nameWithType.vb: RepositoryWrapper(Of T).GetAll(String())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).GetAll(System.String())
  name.vb: GetAll(String())
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll(System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll(System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])
  id: GetAll(System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper`1
  langs:
  - csharp
  - vb
  name: GetAll(Expression<Func<T, Object>>[])
  nameWithType: RepositoryWrapper<T>.GetAll(Expression<Func<T, Object>>[])
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.GetAll(System.Linq.Expressions.Expression<System.Func<T, System.Object>>[])
  type: Method
  source:
    remote:
      path: src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
      branch: gh-pages
      repo: https://github.com/catalyst-network/Catalyst.Framework.git
    id: GetAll
    path: ../src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
    startLine: 415
  assemblies:
  - Catalyst.Core.Lib
  namespace: Catalyst.Core.Lib.Repository
  syntax:
    content: public IEnumerable<T> GetAll(params Expression<Func<T, object>>[] includePaths)
    parameters:
    - id: includePaths
      type: System.Linq.Expressions.Expression{System.Func{{T},System.Object}}[]
    return:
      type: System.Collections.Generic.IEnumerable{{T}}
    content.vb: Public Function GetAll(ParamArray includePaths As Expression(Of Func(Of T, Object))()) As IEnumerable(Of T)
  overload: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll*
  nameWithType.vb: RepositoryWrapper(Of T).GetAll(Expression(Of Func(Of T, Object))())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).GetAll(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Object))())
  name.vb: GetAll(Expression(Of Func(Of T, Object))())
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll(IQueryOptions{`0})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll(IQueryOptions{`0})
  id: GetAll(IQueryOptions{`0})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper`1
  langs:
  - csharp
  - vb
  name: GetAll(IQueryOptions<T>)
  nameWithType: RepositoryWrapper<T>.GetAll(IQueryOptions<T>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.GetAll(IQueryOptions<T>)
  type: Method
  source:
    remote:
      path: src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
      branch: gh-pages
      repo: https://github.com/catalyst-network/Catalyst.Framework.git
    id: GetAll
    path: ../src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
    startLine: 420
  assemblies:
  - Catalyst.Core.Lib
  namespace: Catalyst.Core.Lib.Repository
  syntax:
    content: public IEnumerable<T> GetAll(IQueryOptions<T> queryOptions)
    parameters:
    - id: queryOptions
      type: IQueryOptions{{T}}
    return:
      type: System.Collections.Generic.IEnumerable{{T}}
    content.vb: Public Function GetAll(queryOptions As IQueryOptions(Of T)) As IEnumerable(Of T)
  overload: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll*
  nameWithType.vb: RepositoryWrapper(Of T).GetAll(IQueryOptions(Of T))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).GetAll(IQueryOptions(Of T))
  name.vb: GetAll(IQueryOptions(Of T))
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll(IQueryOptions{`0},IFetchStrategy{`0})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll(IQueryOptions{`0},IFetchStrategy{`0})
  id: GetAll(IQueryOptions{`0},IFetchStrategy{`0})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper`1
  langs:
  - csharp
  - vb
  name: GetAll(IQueryOptions<T>, IFetchStrategy<T>)
  nameWithType: RepositoryWrapper<T>.GetAll(IQueryOptions<T>, IFetchStrategy<T>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.GetAll(IQueryOptions<T>, IFetchStrategy<T>)
  type: Method
  source:
    remote:
      path: src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
      branch: gh-pages
      repo: https://github.com/catalyst-network/Catalyst.Framework.git
    id: GetAll
    path: ../src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
    startLine: 425
  assemblies:
  - Catalyst.Core.Lib
  namespace: Catalyst.Core.Lib.Repository
  syntax:
    content: public IEnumerable<T> GetAll(IQueryOptions<T> queryOptions, IFetchStrategy<T> fetchStrategy)
    parameters:
    - id: queryOptions
      type: IQueryOptions{{T}}
    - id: fetchStrategy
      type: IFetchStrategy{{T}}
    return:
      type: System.Collections.Generic.IEnumerable{{T}}
    content.vb: Public Function GetAll(queryOptions As IQueryOptions(Of T), fetchStrategy As IFetchStrategy(Of T)) As IEnumerable(Of T)
  overload: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll*
  nameWithType.vb: RepositoryWrapper(Of T).GetAll(IQueryOptions(Of T), IFetchStrategy(Of T))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).GetAll(IQueryOptions(Of T), IFetchStrategy(Of T))
  name.vb: GetAll(IQueryOptions(Of T), IFetchStrategy(Of T))
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll(IQueryOptions{`0},System.String[])
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll(IQueryOptions{`0},System.String[])
  id: GetAll(IQueryOptions{`0},System.String[])
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper`1
  langs:
  - csharp
  - vb
  name: GetAll(IQueryOptions<T>, String[])
  nameWithType: RepositoryWrapper<T>.GetAll(IQueryOptions<T>, String[])
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.GetAll(IQueryOptions<T>, System.String[])
  type: Method
  source:
    remote:
      path: src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
      branch: gh-pages
      repo: https://github.com/catalyst-network/Catalyst.Framework.git
    id: GetAll
    path: ../src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
    startLine: 430
  assemblies:
  - Catalyst.Core.Lib
  namespace: Catalyst.Core.Lib.Repository
  syntax:
    content: public IEnumerable<T> GetAll(IQueryOptions<T> queryOptions, params string[] includePaths)
    parameters:
    - id: queryOptions
      type: IQueryOptions{{T}}
    - id: includePaths
      type: System.String[]
    return:
      type: System.Collections.Generic.IEnumerable{{T}}
    content.vb: Public Function GetAll(queryOptions As IQueryOptions(Of T), ParamArray includePaths As String()) As IEnumerable(Of T)
  overload: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll*
  nameWithType.vb: RepositoryWrapper(Of T).GetAll(IQueryOptions(Of T), String())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).GetAll(IQueryOptions(Of T), System.String())
  name.vb: GetAll(IQueryOptions(Of T), String())
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll(IQueryOptions{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll(IQueryOptions{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])
  id: GetAll(IQueryOptions{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper`1
  langs:
  - csharp
  - vb
  name: GetAll(IQueryOptions<T>, Expression<Func<T, Object>>[])
  nameWithType: RepositoryWrapper<T>.GetAll(IQueryOptions<T>, Expression<Func<T, Object>>[])
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.GetAll(IQueryOptions<T>, System.Linq.Expressions.Expression<System.Func<T, System.Object>>[])
  type: Method
  source:
    remote:
      path: src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
      branch: gh-pages
      repo: https://github.com/catalyst-network/Catalyst.Framework.git
    id: GetAll
    path: ../src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
    startLine: 435
  assemblies:
  - Catalyst.Core.Lib
  namespace: Catalyst.Core.Lib.Repository
  syntax:
    content: public IEnumerable<T> GetAll(IQueryOptions<T> queryOptions, params Expression<Func<T, object>>[] includePaths)
    parameters:
    - id: queryOptions
      type: IQueryOptions{{T}}
    - id: includePaths
      type: System.Linq.Expressions.Expression{System.Func{{T},System.Object}}[]
    return:
      type: System.Collections.Generic.IEnumerable{{T}}
    content.vb: Public Function GetAll(queryOptions As IQueryOptions(Of T), ParamArray includePaths As Expression(Of Func(Of T, Object))()) As IEnumerable(Of T)
  overload: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll*
  nameWithType.vb: RepositoryWrapper(Of T).GetAll(IQueryOptions(Of T), Expression(Of Func(Of T, Object))())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).GetAll(IQueryOptions(Of T), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Object))())
  name.vb: GetAll(IQueryOptions(Of T), Expression(Of Func(Of T, Object))())
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})
  id: GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper`1
  langs:
  - csharp
  - vb
  name: GetAll<TResult>(Expression<Func<T, TResult>>)
  nameWithType: RepositoryWrapper<T>.GetAll<TResult>(Expression<Func<T, TResult>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.GetAll<TResult>(System.Linq.Expressions.Expression<System.Func<T, TResult>>)
  type: Method
  source:
    remote:
      path: src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
      branch: gh-pages
      repo: https://github.com/catalyst-network/Catalyst.Framework.git
    id: GetAll
    path: ../src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
    startLine: 440
  assemblies:
  - Catalyst.Core.Lib
  namespace: Catalyst.Core.Lib.Repository
  syntax:
    content: public IEnumerable<TResult> GetAll<TResult>(Expression<Func<T, TResult>> selector)
    parameters:
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{{T},{TResult}}}
    typeParameters:
    - id: TResult
    return:
      type: System.Collections.Generic.IEnumerable{{TResult}}
    content.vb: Public Function GetAll(Of TResult)(selector As Expression(Of Func(Of T, TResult))) As IEnumerable(Of TResult)
  overload: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll*
  nameWithType.vb: RepositoryWrapper(Of T).GetAll(Of TResult)(Expression(Of Func(Of T, TResult)))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).GetAll(Of TResult)(System.Linq.Expressions.Expression(Of System.Func(Of T, TResult)))
  name.vb: GetAll(Of TResult)(Expression(Of Func(Of T, TResult)))
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},IQueryOptions{`0})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},IQueryOptions{`0})
  id: GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},IQueryOptions{`0})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper`1
  langs:
  - csharp
  - vb
  name: GetAll<TResult>(Expression<Func<T, TResult>>, IQueryOptions<T>)
  nameWithType: RepositoryWrapper<T>.GetAll<TResult>(Expression<Func<T, TResult>>, IQueryOptions<T>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.GetAll<TResult>(System.Linq.Expressions.Expression<System.Func<T, TResult>>, IQueryOptions<T>)
  type: Method
  source:
    remote:
      path: src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
      branch: gh-pages
      repo: https://github.com/catalyst-network/Catalyst.Framework.git
    id: GetAll
    path: ../src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
    startLine: 445
  assemblies:
  - Catalyst.Core.Lib
  namespace: Catalyst.Core.Lib.Repository
  syntax:
    content: public IEnumerable<TResult> GetAll<TResult>(Expression<Func<T, TResult>> selector, IQueryOptions<T> queryOptions)
    parameters:
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{{T},{TResult}}}
    - id: queryOptions
      type: IQueryOptions{{T}}
    typeParameters:
    - id: TResult
    return:
      type: System.Collections.Generic.IEnumerable{{TResult}}
    content.vb: Public Function GetAll(Of TResult)(selector As Expression(Of Func(Of T, TResult)), queryOptions As IQueryOptions(Of T)) As IEnumerable(Of TResult)
  overload: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll*
  nameWithType.vb: RepositoryWrapper(Of T).GetAll(Of TResult)(Expression(Of Func(Of T, TResult)), IQueryOptions(Of T))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).GetAll(Of TResult)(System.Linq.Expressions.Expression(Of System.Func(Of T, TResult)), IQueryOptions(Of T))
  name.vb: GetAll(Of TResult)(Expression(Of Func(Of T, TResult)), IQueryOptions(Of T))
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},IFetchStrategy{`0})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},IFetchStrategy{`0})
  id: GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},IFetchStrategy{`0})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper`1
  langs:
  - csharp
  - vb
  name: GetAll<TResult>(Expression<Func<T, TResult>>, IFetchStrategy<T>)
  nameWithType: RepositoryWrapper<T>.GetAll<TResult>(Expression<Func<T, TResult>>, IFetchStrategy<T>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.GetAll<TResult>(System.Linq.Expressions.Expression<System.Func<T, TResult>>, IFetchStrategy<T>)
  type: Method
  source:
    remote:
      path: src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
      branch: gh-pages
      repo: https://github.com/catalyst-network/Catalyst.Framework.git
    id: GetAll
    path: ../src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
    startLine: 450
  assemblies:
  - Catalyst.Core.Lib
  namespace: Catalyst.Core.Lib.Repository
  syntax:
    content: public IEnumerable<TResult> GetAll<TResult>(Expression<Func<T, TResult>> selector, IFetchStrategy<T> fetchStrategy)
    parameters:
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{{T},{TResult}}}
    - id: fetchStrategy
      type: IFetchStrategy{{T}}
    typeParameters:
    - id: TResult
    return:
      type: System.Collections.Generic.IEnumerable{{TResult}}
    content.vb: Public Function GetAll(Of TResult)(selector As Expression(Of Func(Of T, TResult)), fetchStrategy As IFetchStrategy(Of T)) As IEnumerable(Of TResult)
  overload: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll*
  nameWithType.vb: RepositoryWrapper(Of T).GetAll(Of TResult)(Expression(Of Func(Of T, TResult)), IFetchStrategy(Of T))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).GetAll(Of TResult)(System.Linq.Expressions.Expression(Of System.Func(Of T, TResult)), IFetchStrategy(Of T))
  name.vb: GetAll(Of TResult)(Expression(Of Func(Of T, TResult)), IFetchStrategy(Of T))
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String[])
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String[])
  id: GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String[])
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper`1
  langs:
  - csharp
  - vb
  name: GetAll<TResult>(Expression<Func<T, TResult>>, String[])
  nameWithType: RepositoryWrapper<T>.GetAll<TResult>(Expression<Func<T, TResult>>, String[])
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.GetAll<TResult>(System.Linq.Expressions.Expression<System.Func<T, TResult>>, System.String[])
  type: Method
  source:
    remote:
      path: src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
      branch: gh-pages
      repo: https://github.com/catalyst-network/Catalyst.Framework.git
    id: GetAll
    path: ../src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
    startLine: 455
  assemblies:
  - Catalyst.Core.Lib
  namespace: Catalyst.Core.Lib.Repository
  syntax:
    content: public IEnumerable<TResult> GetAll<TResult>(Expression<Func<T, TResult>> selector, params string[] includePaths)
    parameters:
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{{T},{TResult}}}
    - id: includePaths
      type: System.String[]
    typeParameters:
    - id: TResult
    return:
      type: System.Collections.Generic.IEnumerable{{TResult}}
    content.vb: Public Function GetAll(Of TResult)(selector As Expression(Of Func(Of T, TResult)), ParamArray includePaths As String()) As IEnumerable(Of TResult)
  overload: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll*
  nameWithType.vb: RepositoryWrapper(Of T).GetAll(Of TResult)(Expression(Of Func(Of T, TResult)), String())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).GetAll(Of TResult)(System.Linq.Expressions.Expression(Of System.Func(Of T, TResult)), System.String())
  name.vb: GetAll(Of TResult)(Expression(Of Func(Of T, TResult)), String())
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])
  id: GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper`1
  langs:
  - csharp
  - vb
  name: GetAll<TResult>(Expression<Func<T, TResult>>, Expression<Func<T, Object>>[])
  nameWithType: RepositoryWrapper<T>.GetAll<TResult>(Expression<Func<T, TResult>>, Expression<Func<T, Object>>[])
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.GetAll<TResult>(System.Linq.Expressions.Expression<System.Func<T, TResult>>, System.Linq.Expressions.Expression<System.Func<T, System.Object>>[])
  type: Method
  source:
    remote:
      path: src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
      branch: gh-pages
      repo: https://github.com/catalyst-network/Catalyst.Framework.git
    id: GetAll
    path: ../src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
    startLine: 460
  assemblies:
  - Catalyst.Core.Lib
  namespace: Catalyst.Core.Lib.Repository
  syntax:
    content: public IEnumerable<TResult> GetAll<TResult>(Expression<Func<T, TResult>> selector, params Expression<Func<T, object>>[] includePaths)
    parameters:
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{{T},{TResult}}}
    - id: includePaths
      type: System.Linq.Expressions.Expression{System.Func{{T},System.Object}}[]
    typeParameters:
    - id: TResult
    return:
      type: System.Collections.Generic.IEnumerable{{TResult}}
    content.vb: Public Function GetAll(Of TResult)(selector As Expression(Of Func(Of T, TResult)), ParamArray includePaths As Expression(Of Func(Of T, Object))()) As IEnumerable(Of TResult)
  overload: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll*
  nameWithType.vb: RepositoryWrapper(Of T).GetAll(Of TResult)(Expression(Of Func(Of T, TResult)), Expression(Of Func(Of T, Object))())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).GetAll(Of TResult)(System.Linq.Expressions.Expression(Of System.Func(Of T, TResult)), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Object))())
  name.vb: GetAll(Of TResult)(Expression(Of Func(Of T, TResult)), Expression(Of Func(Of T, Object))())
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},IQueryOptions{`0},IFetchStrategy{`0})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},IQueryOptions{`0},IFetchStrategy{`0})
  id: GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},IQueryOptions{`0},IFetchStrategy{`0})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper`1
  langs:
  - csharp
  - vb
  name: GetAll<TResult>(Expression<Func<T, TResult>>, IQueryOptions<T>, IFetchStrategy<T>)
  nameWithType: RepositoryWrapper<T>.GetAll<TResult>(Expression<Func<T, TResult>>, IQueryOptions<T>, IFetchStrategy<T>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.GetAll<TResult>(System.Linq.Expressions.Expression<System.Func<T, TResult>>, IQueryOptions<T>, IFetchStrategy<T>)
  type: Method
  source:
    remote:
      path: src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
      branch: gh-pages
      repo: https://github.com/catalyst-network/Catalyst.Framework.git
    id: GetAll
    path: ../src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
    startLine: 465
  assemblies:
  - Catalyst.Core.Lib
  namespace: Catalyst.Core.Lib.Repository
  syntax:
    content: public IEnumerable<TResult> GetAll<TResult>(Expression<Func<T, TResult>> selector, IQueryOptions<T> queryOptions, IFetchStrategy<T> fetchStrategy)
    parameters:
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{{T},{TResult}}}
    - id: queryOptions
      type: IQueryOptions{{T}}
    - id: fetchStrategy
      type: IFetchStrategy{{T}}
    typeParameters:
    - id: TResult
    return:
      type: System.Collections.Generic.IEnumerable{{TResult}}
    content.vb: Public Function GetAll(Of TResult)(selector As Expression(Of Func(Of T, TResult)), queryOptions As IQueryOptions(Of T), fetchStrategy As IFetchStrategy(Of T)) As IEnumerable(Of TResult)
  overload: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll*
  nameWithType.vb: RepositoryWrapper(Of T).GetAll(Of TResult)(Expression(Of Func(Of T, TResult)), IQueryOptions(Of T), IFetchStrategy(Of T))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).GetAll(Of TResult)(System.Linq.Expressions.Expression(Of System.Func(Of T, TResult)), IQueryOptions(Of T), IFetchStrategy(Of T))
  name.vb: GetAll(Of TResult)(Expression(Of Func(Of T, TResult)), IQueryOptions(Of T), IFetchStrategy(Of T))
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},IQueryOptions{`0},System.String[])
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},IQueryOptions{`0},System.String[])
  id: GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},IQueryOptions{`0},System.String[])
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper`1
  langs:
  - csharp
  - vb
  name: GetAll<TResult>(Expression<Func<T, TResult>>, IQueryOptions<T>, String[])
  nameWithType: RepositoryWrapper<T>.GetAll<TResult>(Expression<Func<T, TResult>>, IQueryOptions<T>, String[])
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.GetAll<TResult>(System.Linq.Expressions.Expression<System.Func<T, TResult>>, IQueryOptions<T>, System.String[])
  type: Method
  source:
    remote:
      path: src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
      branch: gh-pages
      repo: https://github.com/catalyst-network/Catalyst.Framework.git
    id: GetAll
    path: ../src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
    startLine: 470
  assemblies:
  - Catalyst.Core.Lib
  namespace: Catalyst.Core.Lib.Repository
  syntax:
    content: public IEnumerable<TResult> GetAll<TResult>(Expression<Func<T, TResult>> selector, IQueryOptions<T> queryOptions, params string[] includePaths)
    parameters:
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{{T},{TResult}}}
    - id: queryOptions
      type: IQueryOptions{{T}}
    - id: includePaths
      type: System.String[]
    typeParameters:
    - id: TResult
    return:
      type: System.Collections.Generic.IEnumerable{{TResult}}
    content.vb: Public Function GetAll(Of TResult)(selector As Expression(Of Func(Of T, TResult)), queryOptions As IQueryOptions(Of T), ParamArray includePaths As String()) As IEnumerable(Of TResult)
  overload: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll*
  nameWithType.vb: RepositoryWrapper(Of T).GetAll(Of TResult)(Expression(Of Func(Of T, TResult)), IQueryOptions(Of T), String())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).GetAll(Of TResult)(System.Linq.Expressions.Expression(Of System.Func(Of T, TResult)), IQueryOptions(Of T), System.String())
  name.vb: GetAll(Of TResult)(Expression(Of Func(Of T, TResult)), IQueryOptions(Of T), String())
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},IQueryOptions{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},IQueryOptions{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])
  id: GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},IQueryOptions{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper`1
  langs:
  - csharp
  - vb
  name: GetAll<TResult>(Expression<Func<T, TResult>>, IQueryOptions<T>, Expression<Func<T, Object>>[])
  nameWithType: RepositoryWrapper<T>.GetAll<TResult>(Expression<Func<T, TResult>>, IQueryOptions<T>, Expression<Func<T, Object>>[])
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.GetAll<TResult>(System.Linq.Expressions.Expression<System.Func<T, TResult>>, IQueryOptions<T>, System.Linq.Expressions.Expression<System.Func<T, System.Object>>[])
  type: Method
  source:
    remote:
      path: src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
      branch: gh-pages
      repo: https://github.com/catalyst-network/Catalyst.Framework.git
    id: GetAll
    path: ../src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
    startLine: 475
  assemblies:
  - Catalyst.Core.Lib
  namespace: Catalyst.Core.Lib.Repository
  syntax:
    content: public IEnumerable<TResult> GetAll<TResult>(Expression<Func<T, TResult>> selector, IQueryOptions<T> queryOptions, params Expression<Func<T, object>>[] includePaths)
    parameters:
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{{T},{TResult}}}
    - id: queryOptions
      type: IQueryOptions{{T}}
    - id: includePaths
      type: System.Linq.Expressions.Expression{System.Func{{T},System.Object}}[]
    typeParameters:
    - id: TResult
    return:
      type: System.Collections.Generic.IEnumerable{{TResult}}
    content.vb: Public Function GetAll(Of TResult)(selector As Expression(Of Func(Of T, TResult)), queryOptions As IQueryOptions(Of T), ParamArray includePaths As Expression(Of Func(Of T, Object))()) As IEnumerable(Of TResult)
  overload: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll*
  nameWithType.vb: RepositoryWrapper(Of T).GetAll(Of TResult)(Expression(Of Func(Of T, TResult)), IQueryOptions(Of T), Expression(Of Func(Of T, Object))())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).GetAll(Of TResult)(System.Linq.Expressions.Expression(Of System.Func(Of T, TResult)), IQueryOptions(Of T), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Object))())
  name.vb: GetAll(Of TResult)(Expression(Of Func(Of T, TResult)), IQueryOptions(Of T), Expression(Of Func(Of T, Object))())
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetMany(System.String[])
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetMany(System.String[])
  id: GetMany(System.String[])
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper`1
  langs:
  - csharp
  - vb
  name: GetMany(String[])
  nameWithType: RepositoryWrapper<T>.GetMany(String[])
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.GetMany(System.String[])
  type: Method
  source:
    remote:
      path: src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
      branch: gh-pages
      repo: https://github.com/catalyst-network/Catalyst.Framework.git
    id: GetMany
    path: ../src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
    startLine: 480
  assemblies:
  - Catalyst.Core.Lib
  namespace: Catalyst.Core.Lib.Repository
  syntax:
    content: public IEnumerable<T> GetMany(params string[] keys)
    parameters:
    - id: keys
      type: System.String[]
    return:
      type: System.Collections.Generic.IEnumerable{{T}}
    content.vb: Public Function GetMany(ParamArray keys As String()) As IEnumerable(Of T)
  overload: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetMany*
  nameWithType.vb: RepositoryWrapper(Of T).GetMany(String())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).GetMany(System.String())
  name.vb: GetMany(String())
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetMany(System.Collections.Generic.IEnumerable{System.String})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetMany(System.Collections.Generic.IEnumerable{System.String})
  id: GetMany(System.Collections.Generic.IEnumerable{System.String})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper`1
  langs:
  - csharp
  - vb
  name: GetMany(IEnumerable<String>)
  nameWithType: RepositoryWrapper<T>.GetMany(IEnumerable<String>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.GetMany(System.Collections.Generic.IEnumerable<System.String>)
  type: Method
  source:
    remote:
      path: src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
      branch: gh-pages
      repo: https://github.com/catalyst-network/Catalyst.Framework.git
    id: GetMany
    path: ../src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
    startLine: 485
  assemblies:
  - Catalyst.Core.Lib
  namespace: Catalyst.Core.Lib.Repository
  syntax:
    content: public IEnumerable<T> GetMany(IEnumerable<string> keys)
    parameters:
    - id: keys
      type: System.Collections.Generic.IEnumerable{System.String}
    return:
      type: System.Collections.Generic.IEnumerable{{T}}
    content.vb: Public Function GetMany(keys As IEnumerable(Of String)) As IEnumerable(Of T)
  overload: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetMany*
  nameWithType.vb: RepositoryWrapper(Of T).GetMany(IEnumerable(Of String))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).GetMany(System.Collections.Generic.IEnumerable(Of System.String))
  name.vb: GetMany(IEnumerable(Of String))
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetMany(System.Collections.Generic.IEnumerable{System.String},IFetchStrategy{`0})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetMany(System.Collections.Generic.IEnumerable{System.String},IFetchStrategy{`0})
  id: GetMany(System.Collections.Generic.IEnumerable{System.String},IFetchStrategy{`0})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper`1
  langs:
  - csharp
  - vb
  name: GetMany(IEnumerable<String>, IFetchStrategy<T>)
  nameWithType: RepositoryWrapper<T>.GetMany(IEnumerable<String>, IFetchStrategy<T>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.GetMany(System.Collections.Generic.IEnumerable<System.String>, IFetchStrategy<T>)
  type: Method
  source:
    remote:
      path: src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
      branch: gh-pages
      repo: https://github.com/catalyst-network/Catalyst.Framework.git
    id: GetMany
    path: ../src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
    startLine: 490
  assemblies:
  - Catalyst.Core.Lib
  namespace: Catalyst.Core.Lib.Repository
  syntax:
    content: public IEnumerable<T> GetMany(IEnumerable<string> keys, IFetchStrategy<T> fetchStrategy)
    parameters:
    - id: keys
      type: System.Collections.Generic.IEnumerable{System.String}
    - id: fetchStrategy
      type: IFetchStrategy{{T}}
    return:
      type: System.Collections.Generic.IEnumerable{{T}}
    content.vb: Public Function GetMany(keys As IEnumerable(Of String), fetchStrategy As IFetchStrategy(Of T)) As IEnumerable(Of T)
  overload: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetMany*
  nameWithType.vb: RepositoryWrapper(Of T).GetMany(IEnumerable(Of String), IFetchStrategy(Of T))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).GetMany(System.Collections.Generic.IEnumerable(Of System.String), IFetchStrategy(Of T))
  name.vb: GetMany(IEnumerable(Of String), IFetchStrategy(Of T))
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetMany``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String[])
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetMany``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String[])
  id: GetMany``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String[])
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper`1
  langs:
  - csharp
  - vb
  name: GetMany<TResult>(Expression<Func<T, TResult>>, String[])
  nameWithType: RepositoryWrapper<T>.GetMany<TResult>(Expression<Func<T, TResult>>, String[])
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.GetMany<TResult>(System.Linq.Expressions.Expression<System.Func<T, TResult>>, System.String[])
  type: Method
  source:
    remote:
      path: src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
      branch: gh-pages
      repo: https://github.com/catalyst-network/Catalyst.Framework.git
    id: GetMany
    path: ../src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
    startLine: 495
  assemblies:
  - Catalyst.Core.Lib
  namespace: Catalyst.Core.Lib.Repository
  syntax:
    content: public IEnumerable<TResult> GetMany<TResult>(Expression<Func<T, TResult>> selector, params string[] keys)
    parameters:
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{{T},{TResult}}}
    - id: keys
      type: System.String[]
    typeParameters:
    - id: TResult
    return:
      type: System.Collections.Generic.IEnumerable{{TResult}}
    content.vb: Public Function GetMany(Of TResult)(selector As Expression(Of Func(Of T, TResult)), ParamArray keys As String()) As IEnumerable(Of TResult)
  overload: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetMany*
  nameWithType.vb: RepositoryWrapper(Of T).GetMany(Of TResult)(Expression(Of Func(Of T, TResult)), String())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).GetMany(Of TResult)(System.Linq.Expressions.Expression(Of System.Func(Of T, TResult)), System.String())
  name.vb: GetMany(Of TResult)(Expression(Of Func(Of T, TResult)), String())
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetMany``1(System.Collections.Generic.IEnumerable{System.String},System.Linq.Expressions.Expression{System.Func{`0,``0}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetMany``1(System.Collections.Generic.IEnumerable{System.String},System.Linq.Expressions.Expression{System.Func{`0,``0}})
  id: GetMany``1(System.Collections.Generic.IEnumerable{System.String},System.Linq.Expressions.Expression{System.Func{`0,``0}})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper`1
  langs:
  - csharp
  - vb
  name: GetMany<TResult>(IEnumerable<String>, Expression<Func<T, TResult>>)
  nameWithType: RepositoryWrapper<T>.GetMany<TResult>(IEnumerable<String>, Expression<Func<T, TResult>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.GetMany<TResult>(System.Collections.Generic.IEnumerable<System.String>, System.Linq.Expressions.Expression<System.Func<T, TResult>>)
  type: Method
  source:
    remote:
      path: src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
      branch: gh-pages
      repo: https://github.com/catalyst-network/Catalyst.Framework.git
    id: GetMany
    path: ../src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
    startLine: 500
  assemblies:
  - Catalyst.Core.Lib
  namespace: Catalyst.Core.Lib.Repository
  syntax:
    content: public IEnumerable<TResult> GetMany<TResult>(IEnumerable<string> keys, Expression<Func<T, TResult>> selector)
    parameters:
    - id: keys
      type: System.Collections.Generic.IEnumerable{System.String}
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{{T},{TResult}}}
    typeParameters:
    - id: TResult
    return:
      type: System.Collections.Generic.IEnumerable{{TResult}}
    content.vb: Public Function GetMany(Of TResult)(keys As IEnumerable(Of String), selector As Expression(Of Func(Of T, TResult))) As IEnumerable(Of TResult)
  overload: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetMany*
  nameWithType.vb: RepositoryWrapper(Of T).GetMany(Of TResult)(IEnumerable(Of String), Expression(Of Func(Of T, TResult)))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).GetMany(Of TResult)(System.Collections.Generic.IEnumerable(Of System.String), System.Linq.Expressions.Expression(Of System.Func(Of T, TResult)))
  name.vb: GetMany(Of TResult)(IEnumerable(Of String), Expression(Of Func(Of T, TResult)))
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetManyAsDictionary(System.String[])
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetManyAsDictionary(System.String[])
  id: GetManyAsDictionary(System.String[])
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper`1
  langs:
  - csharp
  - vb
  name: GetManyAsDictionary(String[])
  nameWithType: RepositoryWrapper<T>.GetManyAsDictionary(String[])
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.GetManyAsDictionary(System.String[])
  type: Method
  source:
    remote:
      path: src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
      branch: gh-pages
      repo: https://github.com/catalyst-network/Catalyst.Framework.git
    id: GetManyAsDictionary
    path: ../src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
    startLine: 505
  assemblies:
  - Catalyst.Core.Lib
  namespace: Catalyst.Core.Lib.Repository
  syntax:
    content: public IDictionary<string, T> GetManyAsDictionary(params string[] keys)
    parameters:
    - id: keys
      type: System.String[]
    return:
      type: System.Collections.Generic.IDictionary{System.String,{T}}
    content.vb: Public Function GetManyAsDictionary(ParamArray keys As String()) As IDictionary(Of String, T)
  overload: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetManyAsDictionary*
  nameWithType.vb: RepositoryWrapper(Of T).GetManyAsDictionary(String())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).GetManyAsDictionary(System.String())
  name.vb: GetManyAsDictionary(String())
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetManyAsDictionary(System.Collections.Generic.IEnumerable{System.String})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetManyAsDictionary(System.Collections.Generic.IEnumerable{System.String})
  id: GetManyAsDictionary(System.Collections.Generic.IEnumerable{System.String})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper`1
  langs:
  - csharp
  - vb
  name: GetManyAsDictionary(IEnumerable<String>)
  nameWithType: RepositoryWrapper<T>.GetManyAsDictionary(IEnumerable<String>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.GetManyAsDictionary(System.Collections.Generic.IEnumerable<System.String>)
  type: Method
  source:
    remote:
      path: src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
      branch: gh-pages
      repo: https://github.com/catalyst-network/Catalyst.Framework.git
    id: GetManyAsDictionary
    path: ../src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
    startLine: 510
  assemblies:
  - Catalyst.Core.Lib
  namespace: Catalyst.Core.Lib.Repository
  syntax:
    content: public IDictionary<string, T> GetManyAsDictionary(IEnumerable<string> keys)
    parameters:
    - id: keys
      type: System.Collections.Generic.IEnumerable{System.String}
    return:
      type: System.Collections.Generic.IDictionary{System.String,{T}}
    content.vb: Public Function GetManyAsDictionary(keys As IEnumerable(Of String)) As IDictionary(Of String, T)
  overload: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetManyAsDictionary*
  nameWithType.vb: RepositoryWrapper(Of T).GetManyAsDictionary(IEnumerable(Of String))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).GetManyAsDictionary(System.Collections.Generic.IEnumerable(Of System.String))
  name.vb: GetManyAsDictionary(IEnumerable(Of String))
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetManyAsDictionary(System.Collections.Generic.IEnumerable{System.String},IFetchStrategy{`0})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetManyAsDictionary(System.Collections.Generic.IEnumerable{System.String},IFetchStrategy{`0})
  id: GetManyAsDictionary(System.Collections.Generic.IEnumerable{System.String},IFetchStrategy{`0})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper`1
  langs:
  - csharp
  - vb
  name: GetManyAsDictionary(IEnumerable<String>, IFetchStrategy<T>)
  nameWithType: RepositoryWrapper<T>.GetManyAsDictionary(IEnumerable<String>, IFetchStrategy<T>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.GetManyAsDictionary(System.Collections.Generic.IEnumerable<System.String>, IFetchStrategy<T>)
  type: Method
  source:
    remote:
      path: src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
      branch: gh-pages
      repo: https://github.com/catalyst-network/Catalyst.Framework.git
    id: GetManyAsDictionary
    path: ../src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
    startLine: 515
  assemblies:
  - Catalyst.Core.Lib
  namespace: Catalyst.Core.Lib.Repository
  syntax:
    content: public IDictionary<string, T> GetManyAsDictionary(IEnumerable<string> keys, IFetchStrategy<T> fetchStrategy)
    parameters:
    - id: keys
      type: System.Collections.Generic.IEnumerable{System.String}
    - id: fetchStrategy
      type: IFetchStrategy{{T}}
    return:
      type: System.Collections.Generic.IDictionary{System.String,{T}}
    content.vb: Public Function GetManyAsDictionary(keys As IEnumerable(Of String), fetchStrategy As IFetchStrategy(Of T)) As IDictionary(Of String, T)
  overload: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetManyAsDictionary*
  nameWithType.vb: RepositoryWrapper(Of T).GetManyAsDictionary(IEnumerable(Of String), IFetchStrategy(Of T))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).GetManyAsDictionary(System.Collections.Generic.IEnumerable(Of System.String), IFetchStrategy(Of T))
  name.vb: GetManyAsDictionary(IEnumerable(Of String), IFetchStrategy(Of T))
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetPrimaryKey(`0)
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetPrimaryKey(`0)
  id: GetPrimaryKey(`0)
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper`1
  langs:
  - csharp
  - vb
  name: GetPrimaryKey(T)
  nameWithType: RepositoryWrapper<T>.GetPrimaryKey(T)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.GetPrimaryKey(T)
  type: Method
  source:
    remote:
      path: src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
      branch: gh-pages
      repo: https://github.com/catalyst-network/Catalyst.Framework.git
    id: GetPrimaryKey
    path: ../src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
    startLine: 520
  assemblies:
  - Catalyst.Core.Lib
  namespace: Catalyst.Core.Lib.Repository
  syntax:
    content: public string GetPrimaryKey(T entity)
    parameters:
    - id: entity
      type: '{T}'
    return:
      type: System.String
    content.vb: Public Function GetPrimaryKey(entity As T) As String
  overload: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetPrimaryKey*
  nameWithType.vb: RepositoryWrapper(Of T).GetPrimaryKey(T)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).GetPrimaryKey(T)
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GroupBy``2(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{System.Linq.IGrouping{``0,`0},``1}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GroupBy``2(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{System.Linq.IGrouping{``0,`0},``1}})
  id: GroupBy``2(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{System.Linq.IGrouping{``0,`0},``1}})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper`1
  langs:
  - csharp
  - vb
  name: GroupBy<TGroupKey, TResult>(Expression<Func<T, TGroupKey>>, Expression<Func<IGrouping<TGroupKey, T>, TResult>>)
  nameWithType: RepositoryWrapper<T>.GroupBy<TGroupKey, TResult>(Expression<Func<T, TGroupKey>>, Expression<Func<IGrouping<TGroupKey, T>, TResult>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.GroupBy<TGroupKey, TResult>(System.Linq.Expressions.Expression<System.Func<T, TGroupKey>>, System.Linq.Expressions.Expression<System.Func<System.Linq.IGrouping<TGroupKey, T>, TResult>>)
  type: Method
  source:
    remote:
      path: src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
      branch: gh-pages
      repo: https://github.com/catalyst-network/Catalyst.Framework.git
    id: GroupBy
    path: ../src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
    startLine: 525
  assemblies:
  - Catalyst.Core.Lib
  namespace: Catalyst.Core.Lib.Repository
  syntax:
    content: public IEnumerable<TResult> GroupBy<TGroupKey, TResult>(Expression<Func<T, TGroupKey>> keySelector, Expression<Func<IGrouping<TGroupKey, T>, TResult>> resultSelector)
    parameters:
    - id: keySelector
      type: System.Linq.Expressions.Expression{System.Func{{T},{TGroupKey}}}
    - id: resultSelector
      type: System.Linq.Expressions.Expression{System.Func{System.Linq.IGrouping{{TGroupKey},{T}},{TResult}}}
    typeParameters:
    - id: TGroupKey
    - id: TResult
    return:
      type: System.Collections.Generic.IEnumerable{{TResult}}
    content.vb: Public Function GroupBy(Of TGroupKey, TResult)(keySelector As Expression(Of Func(Of T, TGroupKey)), resultSelector As Expression(Of Func(Of IGrouping(Of TGroupKey, T), TResult))) As IEnumerable(Of TResult)
  overload: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GroupBy*
  nameWithType.vb: RepositoryWrapper(Of T).GroupBy(Of TGroupKey, TResult)(Expression(Of Func(Of T, TGroupKey)), Expression(Of Func(Of IGrouping(Of TGroupKey, T), TResult)))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).GroupBy(Of TGroupKey, TResult)(System.Linq.Expressions.Expression(Of System.Func(Of T, TGroupKey)), System.Linq.Expressions.Expression(Of System.Func(Of System.Linq.IGrouping(Of TGroupKey, T), TResult)))
  name.vb: GroupBy(Of TGroupKey, TResult)(Expression(Of Func(Of T, TGroupKey)), Expression(Of Func(Of IGrouping(Of TGroupKey, T), TResult)))
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GroupBy``2(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{System.Linq.IGrouping{``0,`0},``1}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GroupBy``2(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{System.Linq.IGrouping{``0,`0},``1}})
  id: GroupBy``2(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{System.Linq.IGrouping{``0,`0},``1}})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper`1
  langs:
  - csharp
  - vb
  name: GroupBy<TGroupKey, TResult>(ISpecification<T>, Expression<Func<T, TGroupKey>>, Expression<Func<IGrouping<TGroupKey, T>, TResult>>)
  nameWithType: RepositoryWrapper<T>.GroupBy<TGroupKey, TResult>(ISpecification<T>, Expression<Func<T, TGroupKey>>, Expression<Func<IGrouping<TGroupKey, T>, TResult>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.GroupBy<TGroupKey, TResult>(ISpecification<T>, System.Linq.Expressions.Expression<System.Func<T, TGroupKey>>, System.Linq.Expressions.Expression<System.Func<System.Linq.IGrouping<TGroupKey, T>, TResult>>)
  type: Method
  source:
    remote:
      path: src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
      branch: gh-pages
      repo: https://github.com/catalyst-network/Catalyst.Framework.git
    id: GroupBy
    path: ../src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
    startLine: 530
  assemblies:
  - Catalyst.Core.Lib
  namespace: Catalyst.Core.Lib.Repository
  syntax:
    content: public IEnumerable<TResult> GroupBy<TGroupKey, TResult>(ISpecification<T> criteria, Expression<Func<T, TGroupKey>> keySelector, Expression<Func<IGrouping<TGroupKey, T>, TResult>> resultSelector)
    parameters:
    - id: criteria
      type: ISpecification{{T}}
    - id: keySelector
      type: System.Linq.Expressions.Expression{System.Func{{T},{TGroupKey}}}
    - id: resultSelector
      type: System.Linq.Expressions.Expression{System.Func{System.Linq.IGrouping{{TGroupKey},{T}},{TResult}}}
    typeParameters:
    - id: TGroupKey
    - id: TResult
    return:
      type: System.Collections.Generic.IEnumerable{{TResult}}
    content.vb: Public Function GroupBy(Of TGroupKey, TResult)(criteria As ISpecification(Of T), keySelector As Expression(Of Func(Of T, TGroupKey)), resultSelector As Expression(Of Func(Of IGrouping(Of TGroupKey, T), TResult))) As IEnumerable(Of TResult)
  overload: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GroupBy*
  nameWithType.vb: RepositoryWrapper(Of T).GroupBy(Of TGroupKey, TResult)(ISpecification(Of T), Expression(Of Func(Of T, TGroupKey)), Expression(Of Func(Of IGrouping(Of TGroupKey, T), TResult)))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).GroupBy(Of TGroupKey, TResult)(ISpecification(Of T), System.Linq.Expressions.Expression(Of System.Func(Of T, TGroupKey)), System.Linq.Expressions.Expression(Of System.Func(Of System.Linq.IGrouping(Of TGroupKey, T), TResult)))
  name.vb: GroupBy(Of TGroupKey, TResult)(ISpecification(Of T), Expression(Of Func(Of T, TGroupKey)), Expression(Of Func(Of IGrouping(Of TGroupKey, T), TResult)))
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GroupBy``2(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{System.Linq.IGrouping{``0,`0},``1}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GroupBy``2(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{System.Linq.IGrouping{``0,`0},``1}})
  id: GroupBy``2(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{System.Linq.IGrouping{``0,`0},``1}})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper`1
  langs:
  - csharp
  - vb
  name: GroupBy<TGroupKey, TResult>(Expression<Func<T, Boolean>>, Expression<Func<T, TGroupKey>>, Expression<Func<IGrouping<TGroupKey, T>, TResult>>)
  nameWithType: RepositoryWrapper<T>.GroupBy<TGroupKey, TResult>(Expression<Func<T, Boolean>>, Expression<Func<T, TGroupKey>>, Expression<Func<IGrouping<TGroupKey, T>, TResult>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.GroupBy<TGroupKey, TResult>(System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<T, TGroupKey>>, System.Linq.Expressions.Expression<System.Func<System.Linq.IGrouping<TGroupKey, T>, TResult>>)
  type: Method
  source:
    remote:
      path: src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
      branch: gh-pages
      repo: https://github.com/catalyst-network/Catalyst.Framework.git
    id: GroupBy
    path: ../src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
    startLine: 537
  assemblies:
  - Catalyst.Core.Lib
  namespace: Catalyst.Core.Lib.Repository
  syntax:
    content: public IEnumerable<TResult> GroupBy<TGroupKey, TResult>(Expression<Func<T, bool>> predicate, Expression<Func<T, TGroupKey>> keySelector, Expression<Func<IGrouping<TGroupKey, T>, TResult>> resultSelector)
    parameters:
    - id: predicate
      type: System.Linq.Expressions.Expression{System.Func{{T},System.Boolean}}
    - id: keySelector
      type: System.Linq.Expressions.Expression{System.Func{{T},{TGroupKey}}}
    - id: resultSelector
      type: System.Linq.Expressions.Expression{System.Func{System.Linq.IGrouping{{TGroupKey},{T}},{TResult}}}
    typeParameters:
    - id: TGroupKey
    - id: TResult
    return:
      type: System.Collections.Generic.IEnumerable{{TResult}}
    content.vb: Public Function GroupBy(Of TGroupKey, TResult)(predicate As Expression(Of Func(Of T, Boolean)), keySelector As Expression(Of Func(Of T, TGroupKey)), resultSelector As Expression(Of Func(Of IGrouping(Of TGroupKey, T), TResult))) As IEnumerable(Of TResult)
  overload: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GroupBy*
  nameWithType.vb: RepositoryWrapper(Of T).GroupBy(Of TGroupKey, TResult)(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, TGroupKey)), Expression(Of Func(Of IGrouping(Of TGroupKey, T), TResult)))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).GroupBy(Of TGroupKey, TResult)(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of T, TGroupKey)), System.Linq.Expressions.Expression(Of System.Func(Of System.Linq.IGrouping(Of TGroupKey, T), TResult)))
  name.vb: GroupBy(Of TGroupKey, TResult)(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, TGroupKey)), Expression(Of Func(Of IGrouping(Of TGroupKey, T), TResult)))
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GroupCount``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GroupCount``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})
  id: GroupCount``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper`1
  langs:
  - csharp
  - vb
  name: GroupCount<TGroupKey>(Expression<Func<T, TGroupKey>>)
  nameWithType: RepositoryWrapper<T>.GroupCount<TGroupKey>(Expression<Func<T, TGroupKey>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.GroupCount<TGroupKey>(System.Linq.Expressions.Expression<System.Func<T, TGroupKey>>)
  type: Method
  source:
    remote:
      path: src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
      branch: gh-pages
      repo: https://github.com/catalyst-network/Catalyst.Framework.git
    id: GroupCount
    path: ../src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
    startLine: 544
  assemblies:
  - Catalyst.Core.Lib
  namespace: Catalyst.Core.Lib.Repository
  syntax:
    content: public IDictionary<TGroupKey, int> GroupCount<TGroupKey>(Expression<Func<T, TGroupKey>> selector)
    parameters:
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{{T},{TGroupKey}}}
    typeParameters:
    - id: TGroupKey
    return:
      type: System.Collections.Generic.IDictionary{{TGroupKey},System.Int32}
    content.vb: Public Function GroupCount(Of TGroupKey)(selector As Expression(Of Func(Of T, TGroupKey))) As IDictionary(Of TGroupKey, Integer)
  overload: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GroupCount*
  nameWithType.vb: RepositoryWrapper(Of T).GroupCount(Of TGroupKey)(Expression(Of Func(Of T, TGroupKey)))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).GroupCount(Of TGroupKey)(System.Linq.Expressions.Expression(Of System.Func(Of T, TGroupKey)))
  name.vb: GroupCount(Of TGroupKey)(Expression(Of Func(Of T, TGroupKey)))
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GroupCount``1(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GroupCount``1(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}})
  id: GroupCount``1(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper`1
  langs:
  - csharp
  - vb
  name: GroupCount<TGroupKey>(ISpecification<T>, Expression<Func<T, TGroupKey>>)
  nameWithType: RepositoryWrapper<T>.GroupCount<TGroupKey>(ISpecification<T>, Expression<Func<T, TGroupKey>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.GroupCount<TGroupKey>(ISpecification<T>, System.Linq.Expressions.Expression<System.Func<T, TGroupKey>>)
  type: Method
  source:
    remote:
      path: src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
      branch: gh-pages
      repo: https://github.com/catalyst-network/Catalyst.Framework.git
    id: GroupCount
    path: ../src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
    startLine: 549
  assemblies:
  - Catalyst.Core.Lib
  namespace: Catalyst.Core.Lib.Repository
  syntax:
    content: public IDictionary<TGroupKey, int> GroupCount<TGroupKey>(ISpecification<T> criteria, Expression<Func<T, TGroupKey>> selector)
    parameters:
    - id: criteria
      type: ISpecification{{T}}
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{{T},{TGroupKey}}}
    typeParameters:
    - id: TGroupKey
    return:
      type: System.Collections.Generic.IDictionary{{TGroupKey},System.Int32}
    content.vb: Public Function GroupCount(Of TGroupKey)(criteria As ISpecification(Of T), selector As Expression(Of Func(Of T, TGroupKey))) As IDictionary(Of TGroupKey, Integer)
  overload: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GroupCount*
  nameWithType.vb: RepositoryWrapper(Of T).GroupCount(Of TGroupKey)(ISpecification(Of T), Expression(Of Func(Of T, TGroupKey)))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).GroupCount(Of TGroupKey)(ISpecification(Of T), System.Linq.Expressions.Expression(Of System.Func(Of T, TGroupKey)))
  name.vb: GroupCount(Of TGroupKey)(ISpecification(Of T), Expression(Of Func(Of T, TGroupKey)))
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GroupCount``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GroupCount``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}})
  id: GroupCount``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper`1
  langs:
  - csharp
  - vb
  name: GroupCount<TGroupKey>(Expression<Func<T, Boolean>>, Expression<Func<T, TGroupKey>>)
  nameWithType: RepositoryWrapper<T>.GroupCount<TGroupKey>(Expression<Func<T, Boolean>>, Expression<Func<T, TGroupKey>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.GroupCount<TGroupKey>(System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<T, TGroupKey>>)
  type: Method
  source:
    remote:
      path: src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
      branch: gh-pages
      repo: https://github.com/catalyst-network/Catalyst.Framework.git
    id: GroupCount
    path: ../src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
    startLine: 554
  assemblies:
  - Catalyst.Core.Lib
  namespace: Catalyst.Core.Lib.Repository
  syntax:
    content: public IDictionary<TGroupKey, int> GroupCount<TGroupKey>(Expression<Func<T, bool>> predicate, Expression<Func<T, TGroupKey>> selector)
    parameters:
    - id: predicate
      type: System.Linq.Expressions.Expression{System.Func{{T},System.Boolean}}
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{{T},{TGroupKey}}}
    typeParameters:
    - id: TGroupKey
    return:
      type: System.Collections.Generic.IDictionary{{TGroupKey},System.Int32}
    content.vb: Public Function GroupCount(Of TGroupKey)(predicate As Expression(Of Func(Of T, Boolean)), selector As Expression(Of Func(Of T, TGroupKey))) As IDictionary(Of TGroupKey, Integer)
  overload: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GroupCount*
  nameWithType.vb: RepositoryWrapper(Of T).GroupCount(Of TGroupKey)(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, TGroupKey)))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).GroupCount(Of TGroupKey)(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of T, TGroupKey)))
  name.vb: GroupCount(Of TGroupKey)(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, TGroupKey)))
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GroupLongCount``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GroupLongCount``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})
  id: GroupLongCount``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper`1
  langs:
  - csharp
  - vb
  name: GroupLongCount<TGroupKey>(Expression<Func<T, TGroupKey>>)
  nameWithType: RepositoryWrapper<T>.GroupLongCount<TGroupKey>(Expression<Func<T, TGroupKey>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.GroupLongCount<TGroupKey>(System.Linq.Expressions.Expression<System.Func<T, TGroupKey>>)
  type: Method
  source:
    remote:
      path: src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
      branch: gh-pages
      repo: https://github.com/catalyst-network/Catalyst.Framework.git
    id: GroupLongCount
    path: ../src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
    startLine: 559
  assemblies:
  - Catalyst.Core.Lib
  namespace: Catalyst.Core.Lib.Repository
  syntax:
    content: public IDictionary<TGroupKey, long> GroupLongCount<TGroupKey>(Expression<Func<T, TGroupKey>> selector)
    parameters:
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{{T},{TGroupKey}}}
    typeParameters:
    - id: TGroupKey
    return:
      type: System.Collections.Generic.IDictionary{{TGroupKey},System.Int64}
    content.vb: Public Function GroupLongCount(Of TGroupKey)(selector As Expression(Of Func(Of T, TGroupKey))) As IDictionary(Of TGroupKey, Long)
  overload: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GroupLongCount*
  nameWithType.vb: RepositoryWrapper(Of T).GroupLongCount(Of TGroupKey)(Expression(Of Func(Of T, TGroupKey)))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).GroupLongCount(Of TGroupKey)(System.Linq.Expressions.Expression(Of System.Func(Of T, TGroupKey)))
  name.vb: GroupLongCount(Of TGroupKey)(Expression(Of Func(Of T, TGroupKey)))
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GroupLongCount``1(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GroupLongCount``1(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}})
  id: GroupLongCount``1(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper`1
  langs:
  - csharp
  - vb
  name: GroupLongCount<TGroupKey>(ISpecification<T>, Expression<Func<T, TGroupKey>>)
  nameWithType: RepositoryWrapper<T>.GroupLongCount<TGroupKey>(ISpecification<T>, Expression<Func<T, TGroupKey>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.GroupLongCount<TGroupKey>(ISpecification<T>, System.Linq.Expressions.Expression<System.Func<T, TGroupKey>>)
  type: Method
  source:
    remote:
      path: src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
      branch: gh-pages
      repo: https://github.com/catalyst-network/Catalyst.Framework.git
    id: GroupLongCount
    path: ../src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
    startLine: 564
  assemblies:
  - Catalyst.Core.Lib
  namespace: Catalyst.Core.Lib.Repository
  syntax:
    content: public IDictionary<TGroupKey, long> GroupLongCount<TGroupKey>(ISpecification<T> criteria, Expression<Func<T, TGroupKey>> selector)
    parameters:
    - id: criteria
      type: ISpecification{{T}}
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{{T},{TGroupKey}}}
    typeParameters:
    - id: TGroupKey
    return:
      type: System.Collections.Generic.IDictionary{{TGroupKey},System.Int64}
    content.vb: Public Function GroupLongCount(Of TGroupKey)(criteria As ISpecification(Of T), selector As Expression(Of Func(Of T, TGroupKey))) As IDictionary(Of TGroupKey, Long)
  overload: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GroupLongCount*
  nameWithType.vb: RepositoryWrapper(Of T).GroupLongCount(Of TGroupKey)(ISpecification(Of T), Expression(Of Func(Of T, TGroupKey)))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).GroupLongCount(Of TGroupKey)(ISpecification(Of T), System.Linq.Expressions.Expression(Of System.Func(Of T, TGroupKey)))
  name.vb: GroupLongCount(Of TGroupKey)(ISpecification(Of T), Expression(Of Func(Of T, TGroupKey)))
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GroupLongCount``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GroupLongCount``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}})
  id: GroupLongCount``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper`1
  langs:
  - csharp
  - vb
  name: GroupLongCount<TGroupKey>(Expression<Func<T, Boolean>>, Expression<Func<T, TGroupKey>>)
  nameWithType: RepositoryWrapper<T>.GroupLongCount<TGroupKey>(Expression<Func<T, Boolean>>, Expression<Func<T, TGroupKey>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.GroupLongCount<TGroupKey>(System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<T, TGroupKey>>)
  type: Method
  source:
    remote:
      path: src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
      branch: gh-pages
      repo: https://github.com/catalyst-network/Catalyst.Framework.git
    id: GroupLongCount
    path: ../src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
    startLine: 569
  assemblies:
  - Catalyst.Core.Lib
  namespace: Catalyst.Core.Lib.Repository
  syntax:
    content: public IDictionary<TGroupKey, long> GroupLongCount<TGroupKey>(Expression<Func<T, bool>> predicate, Expression<Func<T, TGroupKey>> selector)
    parameters:
    - id: predicate
      type: System.Linq.Expressions.Expression{System.Func{{T},System.Boolean}}
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{{T},{TGroupKey}}}
    typeParameters:
    - id: TGroupKey
    return:
      type: System.Collections.Generic.IDictionary{{TGroupKey},System.Int64}
    content.vb: Public Function GroupLongCount(Of TGroupKey)(predicate As Expression(Of Func(Of T, Boolean)), selector As Expression(Of Func(Of T, TGroupKey))) As IDictionary(Of TGroupKey, Long)
  overload: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GroupLongCount*
  nameWithType.vb: RepositoryWrapper(Of T).GroupLongCount(Of TGroupKey)(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, TGroupKey)))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).GroupLongCount(Of TGroupKey)(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of T, TGroupKey)))
  name.vb: GroupLongCount(Of TGroupKey)(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, TGroupKey)))
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Join``3(IRepositoryQueryable{``1},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{``1,``0}},System.Linq.Expressions.Expression{System.Func{`0,``1,``2}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Join``3(IRepositoryQueryable{``1},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{``1,``0}},System.Linq.Expressions.Expression{System.Func{`0,``1,``2}})
  id: Join``3(IRepositoryQueryable{``1},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{``1,``0}},System.Linq.Expressions.Expression{System.Func{`0,``1,``2}})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper`1
  langs:
  - csharp
  - vb
  name: Join<TJoinKey, TInner, TResult>(IRepositoryQueryable<TInner>, Expression<Func<T, TJoinKey>>, Expression<Func<TInner, TJoinKey>>, Expression<Func<T, TInner, TResult>>)
  nameWithType: RepositoryWrapper<T>.Join<TJoinKey, TInner, TResult>(IRepositoryQueryable<TInner>, Expression<Func<T, TJoinKey>>, Expression<Func<TInner, TJoinKey>>, Expression<Func<T, TInner, TResult>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Join<TJoinKey, TInner, TResult>(IRepositoryQueryable<TInner>, System.Linq.Expressions.Expression<System.Func<T, TJoinKey>>, System.Linq.Expressions.Expression<System.Func<TInner, TJoinKey>>, System.Linq.Expressions.Expression<System.Func<T, TInner, TResult>>)
  type: Method
  source:
    remote:
      path: src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
      branch: gh-pages
      repo: https://github.com/catalyst-network/Catalyst.Framework.git
    id: Join
    path: ../src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
    startLine: 576
  assemblies:
  - Catalyst.Core.Lib
  namespace: Catalyst.Core.Lib.Repository
  syntax:
    content: >-
      public IRepositoryQueryable<TResult> Join<TJoinKey, TInner, TResult>(IRepositoryQueryable<TInner> innerRepository, Expression<Func<T, TJoinKey>> outerKeySelector, Expression<Func<TInner, TJoinKey>> innerKeySelector, Expression<Func<T, TInner, TResult>> resultSelector)

          where TInner : class where TResult : class
    parameters:
    - id: innerRepository
      type: IRepositoryQueryable{{TInner}}
    - id: outerKeySelector
      type: System.Linq.Expressions.Expression{System.Func{{T},{TJoinKey}}}
    - id: innerKeySelector
      type: System.Linq.Expressions.Expression{System.Func{{TInner},{TJoinKey}}}
    - id: resultSelector
      type: System.Linq.Expressions.Expression{System.Func{{T},{TInner},{TResult}}}
    typeParameters:
    - id: TJoinKey
    - id: TInner
    - id: TResult
    return:
      type: IRepositoryQueryable{{TResult}}
    content.vb: Public Function Join(Of TJoinKey, TInner As Class, TResult As Class)(innerRepository As IRepositoryQueryable(Of TInner), outerKeySelector As Expression(Of Func(Of T, TJoinKey)), innerKeySelector As Expression(Of Func(Of TInner, TJoinKey)), resultSelector As Expression(Of Func(Of T, TInner, TResult))) As IRepositoryQueryable(Of TResult)
  overload: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Join*
  nameWithType.vb: RepositoryWrapper(Of T).Join(Of TJoinKey, TInner, TResult)(IRepositoryQueryable(Of TInner), Expression(Of Func(Of T, TJoinKey)), Expression(Of Func(Of TInner, TJoinKey)), Expression(Of Func(Of T, TInner, TResult)))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Join(Of TJoinKey, TInner, TResult)(IRepositoryQueryable(Of TInner), System.Linq.Expressions.Expression(Of System.Func(Of T, TJoinKey)), System.Linq.Expressions.Expression(Of System.Func(Of TInner, TJoinKey)), System.Linq.Expressions.Expression(Of System.Func(Of T, TInner, TResult)))
  name.vb: Join(Of TJoinKey, TInner, TResult)(IRepositoryQueryable(Of TInner), Expression(Of Func(Of T, TJoinKey)), Expression(Of Func(Of TInner, TJoinKey)), Expression(Of Func(Of T, TInner, TResult)))
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.LongCount
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.LongCount
  id: LongCount
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper`1
  langs:
  - csharp
  - vb
  name: LongCount()
  nameWithType: RepositoryWrapper<T>.LongCount()
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.LongCount()
  type: Method
  source:
    remote:
      path: src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
      branch: gh-pages
      repo: https://github.com/catalyst-network/Catalyst.Framework.git
    id: LongCount
    path: ../src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
    startLine: 584
  assemblies:
  - Catalyst.Core.Lib
  namespace: Catalyst.Core.Lib.Repository
  syntax:
    content: public long LongCount()
    return:
      type: System.Int64
    content.vb: Public Function LongCount As Long
  overload: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.LongCount*
  nameWithType.vb: RepositoryWrapper(Of T).LongCount()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).LongCount()
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.LongCount(ISpecification{`0})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.LongCount(ISpecification{`0})
  id: LongCount(ISpecification{`0})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper`1
  langs:
  - csharp
  - vb
  name: LongCount(ISpecification<T>)
  nameWithType: RepositoryWrapper<T>.LongCount(ISpecification<T>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.LongCount(ISpecification<T>)
  type: Method
  source:
    remote:
      path: src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
      branch: gh-pages
      repo: https://github.com/catalyst-network/Catalyst.Framework.git
    id: LongCount
    path: ../src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
    startLine: 589
  assemblies:
  - Catalyst.Core.Lib
  namespace: Catalyst.Core.Lib.Repository
  syntax:
    content: public long LongCount(ISpecification<T> criteria)
    parameters:
    - id: criteria
      type: ISpecification{{T}}
    return:
      type: System.Int64
    content.vb: Public Function LongCount(criteria As ISpecification(Of T)) As Long
  overload: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.LongCount*
  nameWithType.vb: RepositoryWrapper(Of T).LongCount(ISpecification(Of T))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).LongCount(ISpecification(Of T))
  name.vb: LongCount(ISpecification(Of T))
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.LongCount(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.LongCount(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  id: LongCount(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper`1
  langs:
  - csharp
  - vb
  name: LongCount(Expression<Func<T, Boolean>>)
  nameWithType: RepositoryWrapper<T>.LongCount(Expression<Func<T, Boolean>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.LongCount(System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>)
  type: Method
  source:
    remote:
      path: src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
      branch: gh-pages
      repo: https://github.com/catalyst-network/Catalyst.Framework.git
    id: LongCount
    path: ../src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
    startLine: 594
  assemblies:
  - Catalyst.Core.Lib
  namespace: Catalyst.Core.Lib.Repository
  syntax:
    content: public long LongCount(Expression<Func<T, bool>> predicate)
    parameters:
    - id: predicate
      type: System.Linq.Expressions.Expression{System.Func{{T},System.Boolean}}
    return:
      type: System.Int64
    content.vb: Public Function LongCount(predicate As Expression(Of Func(Of T, Boolean))) As Long
  overload: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.LongCount*
  nameWithType.vb: RepositoryWrapper(Of T).LongCount(Expression(Of Func(Of T, Boolean)))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).LongCount(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)))
  name.vb: LongCount(Expression(Of Func(Of T, Boolean)))
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Max``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Max``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})
  id: Max``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper`1
  langs:
  - csharp
  - vb
  name: Max<TResult>(Expression<Func<T, TResult>>)
  nameWithType: RepositoryWrapper<T>.Max<TResult>(Expression<Func<T, TResult>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Max<TResult>(System.Linq.Expressions.Expression<System.Func<T, TResult>>)
  type: Method
  source:
    remote:
      path: src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
      branch: gh-pages
      repo: https://github.com/catalyst-network/Catalyst.Framework.git
    id: Max
    path: ../src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
    startLine: 599
  assemblies:
  - Catalyst.Core.Lib
  namespace: Catalyst.Core.Lib.Repository
  syntax:
    content: public TResult Max<TResult>(Expression<Func<T, TResult>> selector)
    parameters:
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{{T},{TResult}}}
    typeParameters:
    - id: TResult
    return:
      type: '{TResult}'
    content.vb: Public Function Max(Of TResult)(selector As Expression(Of Func(Of T, TResult))) As TResult
  overload: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Max*
  nameWithType.vb: RepositoryWrapper(Of T).Max(Of TResult)(Expression(Of Func(Of T, TResult)))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Max(Of TResult)(System.Linq.Expressions.Expression(Of System.Func(Of T, TResult)))
  name.vb: Max(Of TResult)(Expression(Of Func(Of T, TResult)))
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Max``1(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Max``1(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}})
  id: Max``1(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper`1
  langs:
  - csharp
  - vb
  name: Max<TResult>(ISpecification<T>, Expression<Func<T, TResult>>)
  nameWithType: RepositoryWrapper<T>.Max<TResult>(ISpecification<T>, Expression<Func<T, TResult>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Max<TResult>(ISpecification<T>, System.Linq.Expressions.Expression<System.Func<T, TResult>>)
  type: Method
  source:
    remote:
      path: src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
      branch: gh-pages
      repo: https://github.com/catalyst-network/Catalyst.Framework.git
    id: Max
    path: ../src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
    startLine: 604
  assemblies:
  - Catalyst.Core.Lib
  namespace: Catalyst.Core.Lib.Repository
  syntax:
    content: public TResult Max<TResult>(ISpecification<T> criteria, Expression<Func<T, TResult>> selector)
    parameters:
    - id: criteria
      type: ISpecification{{T}}
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{{T},{TResult}}}
    typeParameters:
    - id: TResult
    return:
      type: '{TResult}'
    content.vb: Public Function Max(Of TResult)(criteria As ISpecification(Of T), selector As Expression(Of Func(Of T, TResult))) As TResult
  overload: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Max*
  nameWithType.vb: RepositoryWrapper(Of T).Max(Of TResult)(ISpecification(Of T), Expression(Of Func(Of T, TResult)))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Max(Of TResult)(ISpecification(Of T), System.Linq.Expressions.Expression(Of System.Func(Of T, TResult)))
  name.vb: Max(Of TResult)(ISpecification(Of T), Expression(Of Func(Of T, TResult)))
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Max``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Max``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}})
  id: Max``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper`1
  langs:
  - csharp
  - vb
  name: Max<TResult>(Expression<Func<T, Boolean>>, Expression<Func<T, TResult>>)
  nameWithType: RepositoryWrapper<T>.Max<TResult>(Expression<Func<T, Boolean>>, Expression<Func<T, TResult>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Max<TResult>(System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<T, TResult>>)
  type: Method
  source:
    remote:
      path: src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
      branch: gh-pages
      repo: https://github.com/catalyst-network/Catalyst.Framework.git
    id: Max
    path: ../src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
    startLine: 609
  assemblies:
  - Catalyst.Core.Lib
  namespace: Catalyst.Core.Lib.Repository
  syntax:
    content: public TResult Max<TResult>(Expression<Func<T, bool>> predicate, Expression<Func<T, TResult>> selector)
    parameters:
    - id: predicate
      type: System.Linq.Expressions.Expression{System.Func{{T},System.Boolean}}
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{{T},{TResult}}}
    typeParameters:
    - id: TResult
    return:
      type: '{TResult}'
    content.vb: Public Function Max(Of TResult)(predicate As Expression(Of Func(Of T, Boolean)), selector As Expression(Of Func(Of T, TResult))) As TResult
  overload: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Max*
  nameWithType.vb: RepositoryWrapper(Of T).Max(Of TResult)(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, TResult)))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Max(Of TResult)(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of T, TResult)))
  name.vb: Max(Of TResult)(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, TResult)))
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Min``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Min``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})
  id: Min``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper`1
  langs:
  - csharp
  - vb
  name: Min<TResult>(Expression<Func<T, TResult>>)
  nameWithType: RepositoryWrapper<T>.Min<TResult>(Expression<Func<T, TResult>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Min<TResult>(System.Linq.Expressions.Expression<System.Func<T, TResult>>)
  type: Method
  source:
    remote:
      path: src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
      branch: gh-pages
      repo: https://github.com/catalyst-network/Catalyst.Framework.git
    id: Min
    path: ../src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
    startLine: 614
  assemblies:
  - Catalyst.Core.Lib
  namespace: Catalyst.Core.Lib.Repository
  syntax:
    content: public TResult Min<TResult>(Expression<Func<T, TResult>> selector)
    parameters:
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{{T},{TResult}}}
    typeParameters:
    - id: TResult
    return:
      type: '{TResult}'
    content.vb: Public Function Min(Of TResult)(selector As Expression(Of Func(Of T, TResult))) As TResult
  overload: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Min*
  nameWithType.vb: RepositoryWrapper(Of T).Min(Of TResult)(Expression(Of Func(Of T, TResult)))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Min(Of TResult)(System.Linq.Expressions.Expression(Of System.Func(Of T, TResult)))
  name.vb: Min(Of TResult)(Expression(Of Func(Of T, TResult)))
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Min``1(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Min``1(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}})
  id: Min``1(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper`1
  langs:
  - csharp
  - vb
  name: Min<TResult>(ISpecification<T>, Expression<Func<T, TResult>>)
  nameWithType: RepositoryWrapper<T>.Min<TResult>(ISpecification<T>, Expression<Func<T, TResult>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Min<TResult>(ISpecification<T>, System.Linq.Expressions.Expression<System.Func<T, TResult>>)
  type: Method
  source:
    remote:
      path: src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
      branch: gh-pages
      repo: https://github.com/catalyst-network/Catalyst.Framework.git
    id: Min
    path: ../src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
    startLine: 619
  assemblies:
  - Catalyst.Core.Lib
  namespace: Catalyst.Core.Lib.Repository
  syntax:
    content: public TResult Min<TResult>(ISpecification<T> criteria, Expression<Func<T, TResult>> selector)
    parameters:
    - id: criteria
      type: ISpecification{{T}}
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{{T},{TResult}}}
    typeParameters:
    - id: TResult
    return:
      type: '{TResult}'
    content.vb: Public Function Min(Of TResult)(criteria As ISpecification(Of T), selector As Expression(Of Func(Of T, TResult))) As TResult
  overload: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Min*
  nameWithType.vb: RepositoryWrapper(Of T).Min(Of TResult)(ISpecification(Of T), Expression(Of Func(Of T, TResult)))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Min(Of TResult)(ISpecification(Of T), System.Linq.Expressions.Expression(Of System.Func(Of T, TResult)))
  name.vb: Min(Of TResult)(ISpecification(Of T), Expression(Of Func(Of T, TResult)))
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Min``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Min``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}})
  id: Min``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper`1
  langs:
  - csharp
  - vb
  name: Min<TResult>(Expression<Func<T, Boolean>>, Expression<Func<T, TResult>>)
  nameWithType: RepositoryWrapper<T>.Min<TResult>(Expression<Func<T, Boolean>>, Expression<Func<T, TResult>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Min<TResult>(System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<T, TResult>>)
  type: Method
  source:
    remote:
      path: src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
      branch: gh-pages
      repo: https://github.com/catalyst-network/Catalyst.Framework.git
    id: Min
    path: ../src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
    startLine: 624
  assemblies:
  - Catalyst.Core.Lib
  namespace: Catalyst.Core.Lib.Repository
  syntax:
    content: public TResult Min<TResult>(Expression<Func<T, bool>> predicate, Expression<Func<T, TResult>> selector)
    parameters:
    - id: predicate
      type: System.Linq.Expressions.Expression{System.Func{{T},System.Boolean}}
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{{T},{TResult}}}
    typeParameters:
    - id: TResult
    return:
      type: '{TResult}'
    content.vb: Public Function Min(Of TResult)(predicate As Expression(Of Func(Of T, Boolean)), selector As Expression(Of Func(Of T, TResult))) As TResult
  overload: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Min*
  nameWithType.vb: RepositoryWrapper(Of T).Min(Of TResult)(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, TResult)))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Min(Of TResult)(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of T, TResult)))
  name.vb: Min(Of TResult)(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, TResult)))
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Int32}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Int32}})
  id: Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Int32}})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper`1
  langs:
  - csharp
  - vb
  name: Sum(Expression<Func<T, Int32>>)
  nameWithType: RepositoryWrapper<T>.Sum(Expression<Func<T, Int32>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Sum(System.Linq.Expressions.Expression<System.Func<T, System.Int32>>)
  type: Method
  source:
    remote:
      path: src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
      branch: gh-pages
      repo: https://github.com/catalyst-network/Catalyst.Framework.git
    id: Sum
    path: ../src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
    startLine: 629
  assemblies:
  - Catalyst.Core.Lib
  namespace: Catalyst.Core.Lib.Repository
  syntax:
    content: public int Sum(Expression<Func<T, int>> selector)
    parameters:
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{{T},System.Int32}}
    return:
      type: System.Int32
    content.vb: Public Function Sum(selector As Expression(Of Func(Of T, Integer))) As Integer
  overload: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum*
  nameWithType.vb: RepositoryWrapper(Of T).Sum(Expression(Of Func(Of T, Int32)))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Sum(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Int32)))
  name.vb: Sum(Expression(Of Func(Of T, Int32)))
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Int32}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Int32}})
  id: Sum(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Int32}})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper`1
  langs:
  - csharp
  - vb
  name: Sum(ISpecification<T>, Expression<Func<T, Int32>>)
  nameWithType: RepositoryWrapper<T>.Sum(ISpecification<T>, Expression<Func<T, Int32>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Sum(ISpecification<T>, System.Linq.Expressions.Expression<System.Func<T, System.Int32>>)
  type: Method
  source:
    remote:
      path: src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
      branch: gh-pages
      repo: https://github.com/catalyst-network/Catalyst.Framework.git
    id: Sum
    path: ../src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
    startLine: 634
  assemblies:
  - Catalyst.Core.Lib
  namespace: Catalyst.Core.Lib.Repository
  syntax:
    content: public int Sum(ISpecification<T> criteria, Expression<Func<T, int>> selector)
    parameters:
    - id: criteria
      type: ISpecification{{T}}
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{{T},System.Int32}}
    return:
      type: System.Int32
    content.vb: Public Function Sum(criteria As ISpecification(Of T), selector As Expression(Of Func(Of T, Integer))) As Integer
  overload: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum*
  nameWithType.vb: RepositoryWrapper(Of T).Sum(ISpecification(Of T), Expression(Of Func(Of T, Int32)))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Sum(ISpecification(Of T), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Int32)))
  name.vb: Sum(ISpecification(Of T), Expression(Of Func(Of T, Int32)))
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Int32}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Int32}})
  id: Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Int32}})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper`1
  langs:
  - csharp
  - vb
  name: Sum(Expression<Func<T, Boolean>>, Expression<Func<T, Int32>>)
  nameWithType: RepositoryWrapper<T>.Sum(Expression<Func<T, Boolean>>, Expression<Func<T, Int32>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Sum(System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<T, System.Int32>>)
  type: Method
  source:
    remote:
      path: src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
      branch: gh-pages
      repo: https://github.com/catalyst-network/Catalyst.Framework.git
    id: Sum
    path: ../src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
    startLine: 639
  assemblies:
  - Catalyst.Core.Lib
  namespace: Catalyst.Core.Lib.Repository
  syntax:
    content: public int Sum(Expression<Func<T, bool>> predicate, Expression<Func<T, int>> selector)
    parameters:
    - id: predicate
      type: System.Linq.Expressions.Expression{System.Func{{T},System.Boolean}}
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{{T},System.Int32}}
    return:
      type: System.Int32
    content.vb: Public Function Sum(predicate As Expression(Of Func(Of T, Boolean)), selector As Expression(Of Func(Of T, Integer))) As Integer
  overload: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum*
  nameWithType.vb: RepositoryWrapper(Of T).Sum(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Int32)))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Sum(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Int32)))
  name.vb: Sum(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Int32)))
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int32}}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int32}}})
  id: Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int32}}})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper`1
  langs:
  - csharp
  - vb
  name: Sum(Expression<Func<T, Nullable<Int32>>>)
  nameWithType: RepositoryWrapper<T>.Sum(Expression<Func<T, Nullable<Int32>>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Sum(System.Linq.Expressions.Expression<System.Func<T, System.Nullable<System.Int32>>>)
  type: Method
  source:
    remote:
      path: src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
      branch: gh-pages
      repo: https://github.com/catalyst-network/Catalyst.Framework.git
    id: Sum
    path: ../src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
    startLine: 644
  assemblies:
  - Catalyst.Core.Lib
  namespace: Catalyst.Core.Lib.Repository
  syntax:
    content: public int? Sum(Expression<Func<T, int? >> selector)
    parameters:
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{{T},System.Nullable{System.Int32}}}
    return:
      type: System.Nullable{System.Int32}
    content.vb: Public Function Sum(selector As Expression(Of Func(Of T, Integer?))) As Integer?
  overload: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum*
  nameWithType.vb: RepositoryWrapper(Of T).Sum(Expression(Of Func(Of T, Nullable(Of Int32))))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Sum(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Nullable(Of System.Int32))))
  name.vb: Sum(Expression(Of Func(Of T, Nullable(Of Int32))))
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int32}}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int32}}})
  id: Sum(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int32}}})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper`1
  langs:
  - csharp
  - vb
  name: Sum(ISpecification<T>, Expression<Func<T, Nullable<Int32>>>)
  nameWithType: RepositoryWrapper<T>.Sum(ISpecification<T>, Expression<Func<T, Nullable<Int32>>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Sum(ISpecification<T>, System.Linq.Expressions.Expression<System.Func<T, System.Nullable<System.Int32>>>)
  type: Method
  source:
    remote:
      path: src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
      branch: gh-pages
      repo: https://github.com/catalyst-network/Catalyst.Framework.git
    id: Sum
    path: ../src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
    startLine: 649
  assemblies:
  - Catalyst.Core.Lib
  namespace: Catalyst.Core.Lib.Repository
  syntax:
    content: public int? Sum(ISpecification<T> criteria, Expression<Func<T, int? >> selector)
    parameters:
    - id: criteria
      type: ISpecification{{T}}
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{{T},System.Nullable{System.Int32}}}
    return:
      type: System.Nullable{System.Int32}
    content.vb: Public Function Sum(criteria As ISpecification(Of T), selector As Expression(Of Func(Of T, Integer?))) As Integer?
  overload: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum*
  nameWithType.vb: RepositoryWrapper(Of T).Sum(ISpecification(Of T), Expression(Of Func(Of T, Nullable(Of Int32))))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Sum(ISpecification(Of T), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Nullable(Of System.Int32))))
  name.vb: Sum(ISpecification(Of T), Expression(Of Func(Of T, Nullable(Of Int32))))
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int32}}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int32}}})
  id: Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int32}}})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper`1
  langs:
  - csharp
  - vb
  name: Sum(Expression<Func<T, Boolean>>, Expression<Func<T, Nullable<Int32>>>)
  nameWithType: RepositoryWrapper<T>.Sum(Expression<Func<T, Boolean>>, Expression<Func<T, Nullable<Int32>>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Sum(System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<T, System.Nullable<System.Int32>>>)
  type: Method
  source:
    remote:
      path: src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
      branch: gh-pages
      repo: https://github.com/catalyst-network/Catalyst.Framework.git
    id: Sum
    path: ../src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
    startLine: 654
  assemblies:
  - Catalyst.Core.Lib
  namespace: Catalyst.Core.Lib.Repository
  syntax:
    content: public int? Sum(Expression<Func<T, bool>> predicate, Expression<Func<T, int? >> selector)
    parameters:
    - id: predicate
      type: System.Linq.Expressions.Expression{System.Func{{T},System.Boolean}}
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{{T},System.Nullable{System.Int32}}}
    return:
      type: System.Nullable{System.Int32}
    content.vb: Public Function Sum(predicate As Expression(Of Func(Of T, Boolean)), selector As Expression(Of Func(Of T, Integer?))) As Integer?
  overload: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum*
  nameWithType.vb: RepositoryWrapper(Of T).Sum(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Nullable(Of Int32))))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Sum(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Nullable(Of System.Int32))))
  name.vb: Sum(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Nullable(Of Int32))))
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Int64}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Int64}})
  id: Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Int64}})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper`1
  langs:
  - csharp
  - vb
  name: Sum(Expression<Func<T, Int64>>)
  nameWithType: RepositoryWrapper<T>.Sum(Expression<Func<T, Int64>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Sum(System.Linq.Expressions.Expression<System.Func<T, System.Int64>>)
  type: Method
  source:
    remote:
      path: src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
      branch: gh-pages
      repo: https://github.com/catalyst-network/Catalyst.Framework.git
    id: Sum
    path: ../src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
    startLine: 659
  assemblies:
  - Catalyst.Core.Lib
  namespace: Catalyst.Core.Lib.Repository
  syntax:
    content: public long Sum(Expression<Func<T, long>> selector)
    parameters:
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{{T},System.Int64}}
    return:
      type: System.Int64
    content.vb: Public Function Sum(selector As Expression(Of Func(Of T, Long))) As Long
  overload: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum*
  nameWithType.vb: RepositoryWrapper(Of T).Sum(Expression(Of Func(Of T, Int64)))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Sum(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Int64)))
  name.vb: Sum(Expression(Of Func(Of T, Int64)))
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Int64}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Int64}})
  id: Sum(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Int64}})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper`1
  langs:
  - csharp
  - vb
  name: Sum(ISpecification<T>, Expression<Func<T, Int64>>)
  nameWithType: RepositoryWrapper<T>.Sum(ISpecification<T>, Expression<Func<T, Int64>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Sum(ISpecification<T>, System.Linq.Expressions.Expression<System.Func<T, System.Int64>>)
  type: Method
  source:
    remote:
      path: src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
      branch: gh-pages
      repo: https://github.com/catalyst-network/Catalyst.Framework.git
    id: Sum
    path: ../src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
    startLine: 664
  assemblies:
  - Catalyst.Core.Lib
  namespace: Catalyst.Core.Lib.Repository
  syntax:
    content: public long Sum(ISpecification<T> criteria, Expression<Func<T, long>> selector)
    parameters:
    - id: criteria
      type: ISpecification{{T}}
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{{T},System.Int64}}
    return:
      type: System.Int64
    content.vb: Public Function Sum(criteria As ISpecification(Of T), selector As Expression(Of Func(Of T, Long))) As Long
  overload: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum*
  nameWithType.vb: RepositoryWrapper(Of T).Sum(ISpecification(Of T), Expression(Of Func(Of T, Int64)))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Sum(ISpecification(Of T), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Int64)))
  name.vb: Sum(ISpecification(Of T), Expression(Of Func(Of T, Int64)))
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Int64}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Int64}})
  id: Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Int64}})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper`1
  langs:
  - csharp
  - vb
  name: Sum(Expression<Func<T, Boolean>>, Expression<Func<T, Int64>>)
  nameWithType: RepositoryWrapper<T>.Sum(Expression<Func<T, Boolean>>, Expression<Func<T, Int64>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Sum(System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<T, System.Int64>>)
  type: Method
  source:
    remote:
      path: src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
      branch: gh-pages
      repo: https://github.com/catalyst-network/Catalyst.Framework.git
    id: Sum
    path: ../src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
    startLine: 669
  assemblies:
  - Catalyst.Core.Lib
  namespace: Catalyst.Core.Lib.Repository
  syntax:
    content: public long Sum(Expression<Func<T, bool>> predicate, Expression<Func<T, long>> selector)
    parameters:
    - id: predicate
      type: System.Linq.Expressions.Expression{System.Func{{T},System.Boolean}}
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{{T},System.Int64}}
    return:
      type: System.Int64
    content.vb: Public Function Sum(predicate As Expression(Of Func(Of T, Boolean)), selector As Expression(Of Func(Of T, Long))) As Long
  overload: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum*
  nameWithType.vb: RepositoryWrapper(Of T).Sum(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Int64)))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Sum(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Int64)))
  name.vb: Sum(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Int64)))
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int64}}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int64}}})
  id: Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int64}}})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper`1
  langs:
  - csharp
  - vb
  name: Sum(Expression<Func<T, Nullable<Int64>>>)
  nameWithType: RepositoryWrapper<T>.Sum(Expression<Func<T, Nullable<Int64>>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Sum(System.Linq.Expressions.Expression<System.Func<T, System.Nullable<System.Int64>>>)
  type: Method
  source:
    remote:
      path: src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
      branch: gh-pages
      repo: https://github.com/catalyst-network/Catalyst.Framework.git
    id: Sum
    path: ../src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
    startLine: 674
  assemblies:
  - Catalyst.Core.Lib
  namespace: Catalyst.Core.Lib.Repository
  syntax:
    content: public long? Sum(Expression<Func<T, long? >> selector)
    parameters:
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{{T},System.Nullable{System.Int64}}}
    return:
      type: System.Nullable{System.Int64}
    content.vb: Public Function Sum(selector As Expression(Of Func(Of T, Long?))) As Long?
  overload: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum*
  nameWithType.vb: RepositoryWrapper(Of T).Sum(Expression(Of Func(Of T, Nullable(Of Int64))))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Sum(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Nullable(Of System.Int64))))
  name.vb: Sum(Expression(Of Func(Of T, Nullable(Of Int64))))
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int64}}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int64}}})
  id: Sum(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int64}}})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper`1
  langs:
  - csharp
  - vb
  name: Sum(ISpecification<T>, Expression<Func<T, Nullable<Int64>>>)
  nameWithType: RepositoryWrapper<T>.Sum(ISpecification<T>, Expression<Func<T, Nullable<Int64>>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Sum(ISpecification<T>, System.Linq.Expressions.Expression<System.Func<T, System.Nullable<System.Int64>>>)
  type: Method
  source:
    remote:
      path: src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
      branch: gh-pages
      repo: https://github.com/catalyst-network/Catalyst.Framework.git
    id: Sum
    path: ../src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
    startLine: 679
  assemblies:
  - Catalyst.Core.Lib
  namespace: Catalyst.Core.Lib.Repository
  syntax:
    content: public long? Sum(ISpecification<T> criteria, Expression<Func<T, long? >> selector)
    parameters:
    - id: criteria
      type: ISpecification{{T}}
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{{T},System.Nullable{System.Int64}}}
    return:
      type: System.Nullable{System.Int64}
    content.vb: Public Function Sum(criteria As ISpecification(Of T), selector As Expression(Of Func(Of T, Long?))) As Long?
  overload: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum*
  nameWithType.vb: RepositoryWrapper(Of T).Sum(ISpecification(Of T), Expression(Of Func(Of T, Nullable(Of Int64))))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Sum(ISpecification(Of T), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Nullable(Of System.Int64))))
  name.vb: Sum(ISpecification(Of T), Expression(Of Func(Of T, Nullable(Of Int64))))
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int64}}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int64}}})
  id: Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int64}}})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper`1
  langs:
  - csharp
  - vb
  name: Sum(Expression<Func<T, Boolean>>, Expression<Func<T, Nullable<Int64>>>)
  nameWithType: RepositoryWrapper<T>.Sum(Expression<Func<T, Boolean>>, Expression<Func<T, Nullable<Int64>>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Sum(System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<T, System.Nullable<System.Int64>>>)
  type: Method
  source:
    remote:
      path: src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
      branch: gh-pages
      repo: https://github.com/catalyst-network/Catalyst.Framework.git
    id: Sum
    path: ../src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
    startLine: 684
  assemblies:
  - Catalyst.Core.Lib
  namespace: Catalyst.Core.Lib.Repository
  syntax:
    content: public long? Sum(Expression<Func<T, bool>> predicate, Expression<Func<T, long? >> selector)
    parameters:
    - id: predicate
      type: System.Linq.Expressions.Expression{System.Func{{T},System.Boolean}}
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{{T},System.Nullable{System.Int64}}}
    return:
      type: System.Nullable{System.Int64}
    content.vb: Public Function Sum(predicate As Expression(Of Func(Of T, Boolean)), selector As Expression(Of Func(Of T, Long?))) As Long?
  overload: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum*
  nameWithType.vb: RepositoryWrapper(Of T).Sum(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Nullable(Of Int64))))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Sum(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Nullable(Of System.Int64))))
  name.vb: Sum(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Nullable(Of Int64))))
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}})
  id: Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper`1
  langs:
  - csharp
  - vb
  name: Sum(Expression<Func<T, Decimal>>)
  nameWithType: RepositoryWrapper<T>.Sum(Expression<Func<T, Decimal>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Sum(System.Linq.Expressions.Expression<System.Func<T, System.Decimal>>)
  type: Method
  source:
    remote:
      path: src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
      branch: gh-pages
      repo: https://github.com/catalyst-network/Catalyst.Framework.git
    id: Sum
    path: ../src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
    startLine: 689
  assemblies:
  - Catalyst.Core.Lib
  namespace: Catalyst.Core.Lib.Repository
  syntax:
    content: public decimal Sum(Expression<Func<T, decimal>> selector)
    parameters:
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{{T},System.Decimal}}
    return:
      type: System.Decimal
    content.vb: Public Function Sum(selector As Expression(Of Func(Of T, Decimal))) As Decimal
  overload: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum*
  nameWithType.vb: RepositoryWrapper(Of T).Sum(Expression(Of Func(Of T, Decimal)))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Sum(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Decimal)))
  name.vb: Sum(Expression(Of Func(Of T, Decimal)))
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}})
  id: Sum(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper`1
  langs:
  - csharp
  - vb
  name: Sum(ISpecification<T>, Expression<Func<T, Decimal>>)
  nameWithType: RepositoryWrapper<T>.Sum(ISpecification<T>, Expression<Func<T, Decimal>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Sum(ISpecification<T>, System.Linq.Expressions.Expression<System.Func<T, System.Decimal>>)
  type: Method
  source:
    remote:
      path: src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
      branch: gh-pages
      repo: https://github.com/catalyst-network/Catalyst.Framework.git
    id: Sum
    path: ../src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
    startLine: 694
  assemblies:
  - Catalyst.Core.Lib
  namespace: Catalyst.Core.Lib.Repository
  syntax:
    content: public decimal Sum(ISpecification<T> criteria, Expression<Func<T, decimal>> selector)
    parameters:
    - id: criteria
      type: ISpecification{{T}}
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{{T},System.Decimal}}
    return:
      type: System.Decimal
    content.vb: Public Function Sum(criteria As ISpecification(Of T), selector As Expression(Of Func(Of T, Decimal))) As Decimal
  overload: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum*
  nameWithType.vb: RepositoryWrapper(Of T).Sum(ISpecification(Of T), Expression(Of Func(Of T, Decimal)))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Sum(ISpecification(Of T), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Decimal)))
  name.vb: Sum(ISpecification(Of T), Expression(Of Func(Of T, Decimal)))
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}})
  id: Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper`1
  langs:
  - csharp
  - vb
  name: Sum(Expression<Func<T, Boolean>>, Expression<Func<T, Decimal>>)
  nameWithType: RepositoryWrapper<T>.Sum(Expression<Func<T, Boolean>>, Expression<Func<T, Decimal>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Sum(System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<T, System.Decimal>>)
  type: Method
  source:
    remote:
      path: src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
      branch: gh-pages
      repo: https://github.com/catalyst-network/Catalyst.Framework.git
    id: Sum
    path: ../src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
    startLine: 699
  assemblies:
  - Catalyst.Core.Lib
  namespace: Catalyst.Core.Lib.Repository
  syntax:
    content: public decimal Sum(Expression<Func<T, bool>> predicate, Expression<Func<T, decimal>> selector)
    parameters:
    - id: predicate
      type: System.Linq.Expressions.Expression{System.Func{{T},System.Boolean}}
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{{T},System.Decimal}}
    return:
      type: System.Decimal
    content.vb: Public Function Sum(predicate As Expression(Of Func(Of T, Boolean)), selector As Expression(Of Func(Of T, Decimal))) As Decimal
  overload: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum*
  nameWithType.vb: RepositoryWrapper(Of T).Sum(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Decimal)))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Sum(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Decimal)))
  name.vb: Sum(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Decimal)))
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Decimal}}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Decimal}}})
  id: Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Decimal}}})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper`1
  langs:
  - csharp
  - vb
  name: Sum(Expression<Func<T, Nullable<Decimal>>>)
  nameWithType: RepositoryWrapper<T>.Sum(Expression<Func<T, Nullable<Decimal>>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Sum(System.Linq.Expressions.Expression<System.Func<T, System.Nullable<System.Decimal>>>)
  type: Method
  source:
    remote:
      path: src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
      branch: gh-pages
      repo: https://github.com/catalyst-network/Catalyst.Framework.git
    id: Sum
    path: ../src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
    startLine: 704
  assemblies:
  - Catalyst.Core.Lib
  namespace: Catalyst.Core.Lib.Repository
  syntax:
    content: public decimal? Sum(Expression<Func<T, decimal? >> selector)
    parameters:
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{{T},System.Nullable{System.Decimal}}}
    return:
      type: System.Nullable{System.Decimal}
    content.vb: Public Function Sum(selector As Expression(Of Func(Of T, Decimal?))) As Decimal?
  overload: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum*
  nameWithType.vb: RepositoryWrapper(Of T).Sum(Expression(Of Func(Of T, Nullable(Of Decimal))))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Sum(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Nullable(Of System.Decimal))))
  name.vb: Sum(Expression(Of Func(Of T, Nullable(Of Decimal))))
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Decimal}}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Decimal}}})
  id: Sum(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Decimal}}})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper`1
  langs:
  - csharp
  - vb
  name: Sum(ISpecification<T>, Expression<Func<T, Nullable<Decimal>>>)
  nameWithType: RepositoryWrapper<T>.Sum(ISpecification<T>, Expression<Func<T, Nullable<Decimal>>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Sum(ISpecification<T>, System.Linq.Expressions.Expression<System.Func<T, System.Nullable<System.Decimal>>>)
  type: Method
  source:
    remote:
      path: src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
      branch: gh-pages
      repo: https://github.com/catalyst-network/Catalyst.Framework.git
    id: Sum
    path: ../src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
    startLine: 709
  assemblies:
  - Catalyst.Core.Lib
  namespace: Catalyst.Core.Lib.Repository
  syntax:
    content: public decimal? Sum(ISpecification<T> criteria, Expression<Func<T, decimal? >> selector)
    parameters:
    - id: criteria
      type: ISpecification{{T}}
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{{T},System.Nullable{System.Decimal}}}
    return:
      type: System.Nullable{System.Decimal}
    content.vb: Public Function Sum(criteria As ISpecification(Of T), selector As Expression(Of Func(Of T, Decimal?))) As Decimal?
  overload: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum*
  nameWithType.vb: RepositoryWrapper(Of T).Sum(ISpecification(Of T), Expression(Of Func(Of T, Nullable(Of Decimal))))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Sum(ISpecification(Of T), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Nullable(Of System.Decimal))))
  name.vb: Sum(ISpecification(Of T), Expression(Of Func(Of T, Nullable(Of Decimal))))
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Decimal}}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Decimal}}})
  id: Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Decimal}}})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper`1
  langs:
  - csharp
  - vb
  name: Sum(Expression<Func<T, Boolean>>, Expression<Func<T, Nullable<Decimal>>>)
  nameWithType: RepositoryWrapper<T>.Sum(Expression<Func<T, Boolean>>, Expression<Func<T, Nullable<Decimal>>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Sum(System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<T, System.Nullable<System.Decimal>>>)
  type: Method
  source:
    remote:
      path: src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
      branch: gh-pages
      repo: https://github.com/catalyst-network/Catalyst.Framework.git
    id: Sum
    path: ../src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
    startLine: 714
  assemblies:
  - Catalyst.Core.Lib
  namespace: Catalyst.Core.Lib.Repository
  syntax:
    content: public decimal? Sum(Expression<Func<T, bool>> predicate, Expression<Func<T, decimal? >> selector)
    parameters:
    - id: predicate
      type: System.Linq.Expressions.Expression{System.Func{{T},System.Boolean}}
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{{T},System.Nullable{System.Decimal}}}
    return:
      type: System.Nullable{System.Decimal}
    content.vb: Public Function Sum(predicate As Expression(Of Func(Of T, Boolean)), selector As Expression(Of Func(Of T, Decimal?))) As Decimal?
  overload: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum*
  nameWithType.vb: RepositoryWrapper(Of T).Sum(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Nullable(Of Decimal))))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Sum(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Nullable(Of System.Decimal))))
  name.vb: Sum(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Nullable(Of Decimal))))
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Double}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Double}})
  id: Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Double}})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper`1
  langs:
  - csharp
  - vb
  name: Sum(Expression<Func<T, Double>>)
  nameWithType: RepositoryWrapper<T>.Sum(Expression<Func<T, Double>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Sum(System.Linq.Expressions.Expression<System.Func<T, System.Double>>)
  type: Method
  source:
    remote:
      path: src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
      branch: gh-pages
      repo: https://github.com/catalyst-network/Catalyst.Framework.git
    id: Sum
    path: ../src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
    startLine: 719
  assemblies:
  - Catalyst.Core.Lib
  namespace: Catalyst.Core.Lib.Repository
  syntax:
    content: public double Sum(Expression<Func<T, double>> selector)
    parameters:
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{{T},System.Double}}
    return:
      type: System.Double
    content.vb: Public Function Sum(selector As Expression(Of Func(Of T, Double))) As Double
  overload: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum*
  nameWithType.vb: RepositoryWrapper(Of T).Sum(Expression(Of Func(Of T, Double)))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Sum(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Double)))
  name.vb: Sum(Expression(Of Func(Of T, Double)))
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Double}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Double}})
  id: Sum(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Double}})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper`1
  langs:
  - csharp
  - vb
  name: Sum(ISpecification<T>, Expression<Func<T, Double>>)
  nameWithType: RepositoryWrapper<T>.Sum(ISpecification<T>, Expression<Func<T, Double>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Sum(ISpecification<T>, System.Linq.Expressions.Expression<System.Func<T, System.Double>>)
  type: Method
  source:
    remote:
      path: src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
      branch: gh-pages
      repo: https://github.com/catalyst-network/Catalyst.Framework.git
    id: Sum
    path: ../src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
    startLine: 724
  assemblies:
  - Catalyst.Core.Lib
  namespace: Catalyst.Core.Lib.Repository
  syntax:
    content: public double Sum(ISpecification<T> criteria, Expression<Func<T, double>> selector)
    parameters:
    - id: criteria
      type: ISpecification{{T}}
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{{T},System.Double}}
    return:
      type: System.Double
    content.vb: Public Function Sum(criteria As ISpecification(Of T), selector As Expression(Of Func(Of T, Double))) As Double
  overload: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum*
  nameWithType.vb: RepositoryWrapper(Of T).Sum(ISpecification(Of T), Expression(Of Func(Of T, Double)))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Sum(ISpecification(Of T), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Double)))
  name.vb: Sum(ISpecification(Of T), Expression(Of Func(Of T, Double)))
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Double}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Double}})
  id: Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Double}})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper`1
  langs:
  - csharp
  - vb
  name: Sum(Expression<Func<T, Boolean>>, Expression<Func<T, Double>>)
  nameWithType: RepositoryWrapper<T>.Sum(Expression<Func<T, Boolean>>, Expression<Func<T, Double>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Sum(System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<T, System.Double>>)
  type: Method
  source:
    remote:
      path: src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
      branch: gh-pages
      repo: https://github.com/catalyst-network/Catalyst.Framework.git
    id: Sum
    path: ../src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
    startLine: 729
  assemblies:
  - Catalyst.Core.Lib
  namespace: Catalyst.Core.Lib.Repository
  syntax:
    content: public double Sum(Expression<Func<T, bool>> predicate, Expression<Func<T, double>> selector)
    parameters:
    - id: predicate
      type: System.Linq.Expressions.Expression{System.Func{{T},System.Boolean}}
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{{T},System.Double}}
    return:
      type: System.Double
    content.vb: Public Function Sum(predicate As Expression(Of Func(Of T, Boolean)), selector As Expression(Of Func(Of T, Double))) As Double
  overload: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum*
  nameWithType.vb: RepositoryWrapper(Of T).Sum(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Double)))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Sum(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Double)))
  name.vb: Sum(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Double)))
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Double}}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Double}}})
  id: Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Double}}})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper`1
  langs:
  - csharp
  - vb
  name: Sum(Expression<Func<T, Nullable<Double>>>)
  nameWithType: RepositoryWrapper<T>.Sum(Expression<Func<T, Nullable<Double>>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Sum(System.Linq.Expressions.Expression<System.Func<T, System.Nullable<System.Double>>>)
  type: Method
  source:
    remote:
      path: src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
      branch: gh-pages
      repo: https://github.com/catalyst-network/Catalyst.Framework.git
    id: Sum
    path: ../src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
    startLine: 734
  assemblies:
  - Catalyst.Core.Lib
  namespace: Catalyst.Core.Lib.Repository
  syntax:
    content: public double? Sum(Expression<Func<T, double? >> selector)
    parameters:
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{{T},System.Nullable{System.Double}}}
    return:
      type: System.Nullable{System.Double}
    content.vb: Public Function Sum(selector As Expression(Of Func(Of T, Double?))) As Double?
  overload: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum*
  nameWithType.vb: RepositoryWrapper(Of T).Sum(Expression(Of Func(Of T, Nullable(Of Double))))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Sum(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Nullable(Of System.Double))))
  name.vb: Sum(Expression(Of Func(Of T, Nullable(Of Double))))
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Double}}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Double}}})
  id: Sum(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Double}}})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper`1
  langs:
  - csharp
  - vb
  name: Sum(ISpecification<T>, Expression<Func<T, Nullable<Double>>>)
  nameWithType: RepositoryWrapper<T>.Sum(ISpecification<T>, Expression<Func<T, Nullable<Double>>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Sum(ISpecification<T>, System.Linq.Expressions.Expression<System.Func<T, System.Nullable<System.Double>>>)
  type: Method
  source:
    remote:
      path: src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
      branch: gh-pages
      repo: https://github.com/catalyst-network/Catalyst.Framework.git
    id: Sum
    path: ../src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
    startLine: 739
  assemblies:
  - Catalyst.Core.Lib
  namespace: Catalyst.Core.Lib.Repository
  syntax:
    content: public double? Sum(ISpecification<T> criteria, Expression<Func<T, double? >> selector)
    parameters:
    - id: criteria
      type: ISpecification{{T}}
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{{T},System.Nullable{System.Double}}}
    return:
      type: System.Nullable{System.Double}
    content.vb: Public Function Sum(criteria As ISpecification(Of T), selector As Expression(Of Func(Of T, Double?))) As Double?
  overload: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum*
  nameWithType.vb: RepositoryWrapper(Of T).Sum(ISpecification(Of T), Expression(Of Func(Of T, Nullable(Of Double))))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Sum(ISpecification(Of T), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Nullable(Of System.Double))))
  name.vb: Sum(ISpecification(Of T), Expression(Of Func(Of T, Nullable(Of Double))))
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Double}}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Double}}})
  id: Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Double}}})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper`1
  langs:
  - csharp
  - vb
  name: Sum(Expression<Func<T, Boolean>>, Expression<Func<T, Nullable<Double>>>)
  nameWithType: RepositoryWrapper<T>.Sum(Expression<Func<T, Boolean>>, Expression<Func<T, Nullable<Double>>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Sum(System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<T, System.Nullable<System.Double>>>)
  type: Method
  source:
    remote:
      path: src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
      branch: gh-pages
      repo: https://github.com/catalyst-network/Catalyst.Framework.git
    id: Sum
    path: ../src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
    startLine: 744
  assemblies:
  - Catalyst.Core.Lib
  namespace: Catalyst.Core.Lib.Repository
  syntax:
    content: public double? Sum(Expression<Func<T, bool>> predicate, Expression<Func<T, double? >> selector)
    parameters:
    - id: predicate
      type: System.Linq.Expressions.Expression{System.Func{{T},System.Boolean}}
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{{T},System.Nullable{System.Double}}}
    return:
      type: System.Nullable{System.Double}
    content.vb: Public Function Sum(predicate As Expression(Of Func(Of T, Boolean)), selector As Expression(Of Func(Of T, Double?))) As Double?
  overload: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum*
  nameWithType.vb: RepositoryWrapper(Of T).Sum(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Nullable(Of Double))))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Sum(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Nullable(Of System.Double))))
  name.vb: Sum(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Nullable(Of Double))))
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Single}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Single}})
  id: Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Single}})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper`1
  langs:
  - csharp
  - vb
  name: Sum(Expression<Func<T, Single>>)
  nameWithType: RepositoryWrapper<T>.Sum(Expression<Func<T, Single>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Sum(System.Linq.Expressions.Expression<System.Func<T, System.Single>>)
  type: Method
  source:
    remote:
      path: src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
      branch: gh-pages
      repo: https://github.com/catalyst-network/Catalyst.Framework.git
    id: Sum
    path: ../src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
    startLine: 749
  assemblies:
  - Catalyst.Core.Lib
  namespace: Catalyst.Core.Lib.Repository
  syntax:
    content: public float Sum(Expression<Func<T, float>> selector)
    parameters:
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{{T},System.Single}}
    return:
      type: System.Single
    content.vb: Public Function Sum(selector As Expression(Of Func(Of T, Single))) As Single
  overload: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum*
  nameWithType.vb: RepositoryWrapper(Of T).Sum(Expression(Of Func(Of T, Single)))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Sum(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Single)))
  name.vb: Sum(Expression(Of Func(Of T, Single)))
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Single}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Single}})
  id: Sum(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Single}})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper`1
  langs:
  - csharp
  - vb
  name: Sum(ISpecification<T>, Expression<Func<T, Single>>)
  nameWithType: RepositoryWrapper<T>.Sum(ISpecification<T>, Expression<Func<T, Single>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Sum(ISpecification<T>, System.Linq.Expressions.Expression<System.Func<T, System.Single>>)
  type: Method
  source:
    remote:
      path: src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
      branch: gh-pages
      repo: https://github.com/catalyst-network/Catalyst.Framework.git
    id: Sum
    path: ../src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
    startLine: 754
  assemblies:
  - Catalyst.Core.Lib
  namespace: Catalyst.Core.Lib.Repository
  syntax:
    content: public float Sum(ISpecification<T> criteria, Expression<Func<T, float>> selector)
    parameters:
    - id: criteria
      type: ISpecification{{T}}
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{{T},System.Single}}
    return:
      type: System.Single
    content.vb: Public Function Sum(criteria As ISpecification(Of T), selector As Expression(Of Func(Of T, Single))) As Single
  overload: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum*
  nameWithType.vb: RepositoryWrapper(Of T).Sum(ISpecification(Of T), Expression(Of Func(Of T, Single)))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Sum(ISpecification(Of T), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Single)))
  name.vb: Sum(ISpecification(Of T), Expression(Of Func(Of T, Single)))
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Single}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Single}})
  id: Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Single}})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper`1
  langs:
  - csharp
  - vb
  name: Sum(Expression<Func<T, Boolean>>, Expression<Func<T, Single>>)
  nameWithType: RepositoryWrapper<T>.Sum(Expression<Func<T, Boolean>>, Expression<Func<T, Single>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Sum(System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<T, System.Single>>)
  type: Method
  source:
    remote:
      path: src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
      branch: gh-pages
      repo: https://github.com/catalyst-network/Catalyst.Framework.git
    id: Sum
    path: ../src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
    startLine: 759
  assemblies:
  - Catalyst.Core.Lib
  namespace: Catalyst.Core.Lib.Repository
  syntax:
    content: public float Sum(Expression<Func<T, bool>> predicate, Expression<Func<T, float>> selector)
    parameters:
    - id: predicate
      type: System.Linq.Expressions.Expression{System.Func{{T},System.Boolean}}
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{{T},System.Single}}
    return:
      type: System.Single
    content.vb: Public Function Sum(predicate As Expression(Of Func(Of T, Boolean)), selector As Expression(Of Func(Of T, Single))) As Single
  overload: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum*
  nameWithType.vb: RepositoryWrapper(Of T).Sum(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Single)))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Sum(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Single)))
  name.vb: Sum(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Single)))
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Single}}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Single}}})
  id: Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Single}}})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper`1
  langs:
  - csharp
  - vb
  name: Sum(Expression<Func<T, Nullable<Single>>>)
  nameWithType: RepositoryWrapper<T>.Sum(Expression<Func<T, Nullable<Single>>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Sum(System.Linq.Expressions.Expression<System.Func<T, System.Nullable<System.Single>>>)
  type: Method
  source:
    remote:
      path: src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
      branch: gh-pages
      repo: https://github.com/catalyst-network/Catalyst.Framework.git
    id: Sum
    path: ../src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
    startLine: 764
  assemblies:
  - Catalyst.Core.Lib
  namespace: Catalyst.Core.Lib.Repository
  syntax:
    content: public float? Sum(Expression<Func<T, float? >> selector)
    parameters:
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{{T},System.Nullable{System.Single}}}
    return:
      type: System.Nullable{System.Single}
    content.vb: Public Function Sum(selector As Expression(Of Func(Of T, Single?))) As Single?
  overload: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum*
  nameWithType.vb: RepositoryWrapper(Of T).Sum(Expression(Of Func(Of T, Nullable(Of Single))))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Sum(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Nullable(Of System.Single))))
  name.vb: Sum(Expression(Of Func(Of T, Nullable(Of Single))))
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Single}}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Single}}})
  id: Sum(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Single}}})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper`1
  langs:
  - csharp
  - vb
  name: Sum(ISpecification<T>, Expression<Func<T, Nullable<Single>>>)
  nameWithType: RepositoryWrapper<T>.Sum(ISpecification<T>, Expression<Func<T, Nullable<Single>>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Sum(ISpecification<T>, System.Linq.Expressions.Expression<System.Func<T, System.Nullable<System.Single>>>)
  type: Method
  source:
    remote:
      path: src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
      branch: gh-pages
      repo: https://github.com/catalyst-network/Catalyst.Framework.git
    id: Sum
    path: ../src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
    startLine: 769
  assemblies:
  - Catalyst.Core.Lib
  namespace: Catalyst.Core.Lib.Repository
  syntax:
    content: public float? Sum(ISpecification<T> criteria, Expression<Func<T, float? >> selector)
    parameters:
    - id: criteria
      type: ISpecification{{T}}
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{{T},System.Nullable{System.Single}}}
    return:
      type: System.Nullable{System.Single}
    content.vb: Public Function Sum(criteria As ISpecification(Of T), selector As Expression(Of Func(Of T, Single?))) As Single?
  overload: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum*
  nameWithType.vb: RepositoryWrapper(Of T).Sum(ISpecification(Of T), Expression(Of Func(Of T, Nullable(Of Single))))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Sum(ISpecification(Of T), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Nullable(Of System.Single))))
  name.vb: Sum(ISpecification(Of T), Expression(Of Func(Of T, Nullable(Of Single))))
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Single}}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Single}}})
  id: Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Single}}})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper`1
  langs:
  - csharp
  - vb
  name: Sum(Expression<Func<T, Boolean>>, Expression<Func<T, Nullable<Single>>>)
  nameWithType: RepositoryWrapper<T>.Sum(Expression<Func<T, Boolean>>, Expression<Func<T, Nullable<Single>>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Sum(System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<T, System.Nullable<System.Single>>>)
  type: Method
  source:
    remote:
      path: src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
      branch: gh-pages
      repo: https://github.com/catalyst-network/Catalyst.Framework.git
    id: Sum
    path: ../src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
    startLine: 774
  assemblies:
  - Catalyst.Core.Lib
  namespace: Catalyst.Core.Lib.Repository
  syntax:
    content: public float? Sum(Expression<Func<T, bool>> predicate, Expression<Func<T, float? >> selector)
    parameters:
    - id: predicate
      type: System.Linq.Expressions.Expression{System.Func{{T},System.Boolean}}
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{{T},System.Nullable{System.Single}}}
    return:
      type: System.Nullable{System.Single}
    content.vb: Public Function Sum(predicate As Expression(Of Func(Of T, Boolean)), selector As Expression(Of Func(Of T, Single?))) As Single?
  overload: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum*
  nameWithType.vb: RepositoryWrapper(Of T).Sum(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Nullable(Of Single))))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Sum(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Nullable(Of System.Single))))
  name.vb: Sum(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Nullable(Of Single))))
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.TryFind(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},`0@)
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.TryFind(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},`0@)
  id: TryFind(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},`0@)
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper`1
  langs:
  - csharp
  - vb
  name: TryFind(Expression<Func<T, Boolean>>, out T)
  nameWithType: RepositoryWrapper<T>.TryFind(Expression<Func<T, Boolean>>, out T)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.TryFind(System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>, out T)
  type: Method
  source:
    remote:
      path: src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
      branch: gh-pages
      repo: https://github.com/catalyst-network/Catalyst.Framework.git
    id: TryFind
    path: ../src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
    startLine: 779
  assemblies:
  - Catalyst.Core.Lib
  namespace: Catalyst.Core.Lib.Repository
  syntax:
    content: public bool TryFind(Expression<Func<T, bool>> predicate, out T entity)
    parameters:
    - id: predicate
      type: System.Linq.Expressions.Expression{System.Func{{T},System.Boolean}}
    - id: entity
      type: '{T}'
    return:
      type: System.Boolean
    content.vb: Public Function TryFind(predicate As Expression(Of Func(Of T, Boolean)), ByRef entity As T) As Boolean
  overload: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.TryFind*
  nameWithType.vb: RepositoryWrapper(Of T).TryFind(Expression(Of Func(Of T, Boolean)), ByRef T)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).TryFind(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)), ByRef T)
  name.vb: TryFind(Expression(Of Func(Of T, Boolean)), ByRef T)
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.TryFind(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},IQueryOptions{`0},`0@)
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.TryFind(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},IQueryOptions{`0},`0@)
  id: TryFind(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},IQueryOptions{`0},`0@)
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper`1
  langs:
  - csharp
  - vb
  name: TryFind(Expression<Func<T, Boolean>>, IQueryOptions<T>, out T)
  nameWithType: RepositoryWrapper<T>.TryFind(Expression<Func<T, Boolean>>, IQueryOptions<T>, out T)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.TryFind(System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>, IQueryOptions<T>, out T)
  type: Method
  source:
    remote:
      path: src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
      branch: gh-pages
      repo: https://github.com/catalyst-network/Catalyst.Framework.git
    id: TryFind
    path: ../src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
    startLine: 784
  assemblies:
  - Catalyst.Core.Lib
  namespace: Catalyst.Core.Lib.Repository
  syntax:
    content: public bool TryFind(Expression<Func<T, bool>> predicate, IQueryOptions<T> queryOptions, out T entity)
    parameters:
    - id: predicate
      type: System.Linq.Expressions.Expression{System.Func{{T},System.Boolean}}
    - id: queryOptions
      type: IQueryOptions{{T}}
    - id: entity
      type: '{T}'
    return:
      type: System.Boolean
    content.vb: Public Function TryFind(predicate As Expression(Of Func(Of T, Boolean)), queryOptions As IQueryOptions(Of T), ByRef entity As T) As Boolean
  overload: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.TryFind*
  nameWithType.vb: RepositoryWrapper(Of T).TryFind(Expression(Of Func(Of T, Boolean)), IQueryOptions(Of T), ByRef T)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).TryFind(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)), IQueryOptions(Of T), ByRef T)
  name.vb: TryFind(Expression(Of Func(Of T, Boolean)), IQueryOptions(Of T), ByRef T)
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.TryFind``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},``0@)
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.TryFind``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},``0@)
  id: TryFind``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},``0@)
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper`1
  langs:
  - csharp
  - vb
  name: TryFind<TResult>(Expression<Func<T, Boolean>>, Expression<Func<T, TResult>>, out TResult)
  nameWithType: RepositoryWrapper<T>.TryFind<TResult>(Expression<Func<T, Boolean>>, Expression<Func<T, TResult>>, out TResult)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.TryFind<TResult>(System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<T, TResult>>, out TResult)
  type: Method
  source:
    remote:
      path: src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
      branch: gh-pages
      repo: https://github.com/catalyst-network/Catalyst.Framework.git
    id: TryFind
    path: ../src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
    startLine: 789
  assemblies:
  - Catalyst.Core.Lib
  namespace: Catalyst.Core.Lib.Repository
  syntax:
    content: public bool TryFind<TResult>(Expression<Func<T, bool>> predicate, Expression<Func<T, TResult>> selector, out TResult entity)
    parameters:
    - id: predicate
      type: System.Linq.Expressions.Expression{System.Func{{T},System.Boolean}}
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{{T},{TResult}}}
    - id: entity
      type: '{TResult}'
    typeParameters:
    - id: TResult
    return:
      type: System.Boolean
    content.vb: Public Function TryFind(Of TResult)(predicate As Expression(Of Func(Of T, Boolean)), selector As Expression(Of Func(Of T, TResult)), ByRef entity As TResult) As Boolean
  overload: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.TryFind*
  nameWithType.vb: RepositoryWrapper(Of T).TryFind(Of TResult)(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, TResult)), ByRef TResult)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).TryFind(Of TResult)(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of T, TResult)), ByRef TResult)
  name.vb: TryFind(Of TResult)(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, TResult)), ByRef TResult)
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.TryFind``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},IQueryOptions{`0},``0@)
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.TryFind``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},IQueryOptions{`0},``0@)
  id: TryFind``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},IQueryOptions{`0},``0@)
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper`1
  langs:
  - csharp
  - vb
  name: TryFind<TResult>(Expression<Func<T, Boolean>>, Expression<Func<T, TResult>>, IQueryOptions<T>, out TResult)
  nameWithType: RepositoryWrapper<T>.TryFind<TResult>(Expression<Func<T, Boolean>>, Expression<Func<T, TResult>>, IQueryOptions<T>, out TResult)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.TryFind<TResult>(System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<T, TResult>>, IQueryOptions<T>, out TResult)
  type: Method
  source:
    remote:
      path: src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
      branch: gh-pages
      repo: https://github.com/catalyst-network/Catalyst.Framework.git
    id: TryFind
    path: ../src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
    startLine: 794
  assemblies:
  - Catalyst.Core.Lib
  namespace: Catalyst.Core.Lib.Repository
  syntax:
    content: public bool TryFind<TResult>(Expression<Func<T, bool>> predicate, Expression<Func<T, TResult>> selector, IQueryOptions<T> queryOptions, out TResult entity)
    parameters:
    - id: predicate
      type: System.Linq.Expressions.Expression{System.Func{{T},System.Boolean}}
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{{T},{TResult}}}
    - id: queryOptions
      type: IQueryOptions{{T}}
    - id: entity
      type: '{TResult}'
    typeParameters:
    - id: TResult
    return:
      type: System.Boolean
    content.vb: Public Function TryFind(Of TResult)(predicate As Expression(Of Func(Of T, Boolean)), selector As Expression(Of Func(Of T, TResult)), queryOptions As IQueryOptions(Of T), ByRef entity As TResult) As Boolean
  overload: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.TryFind*
  nameWithType.vb: RepositoryWrapper(Of T).TryFind(Of TResult)(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, TResult)), IQueryOptions(Of T), ByRef TResult)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).TryFind(Of TResult)(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of T, TResult)), IQueryOptions(Of T), ByRef TResult)
  name.vb: TryFind(Of TResult)(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, TResult)), IQueryOptions(Of T), ByRef TResult)
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.TryFind(ISpecification{`0},`0@)
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.TryFind(ISpecification{`0},`0@)
  id: TryFind(ISpecification{`0},`0@)
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper`1
  langs:
  - csharp
  - vb
  name: TryFind(ISpecification<T>, out T)
  nameWithType: RepositoryWrapper<T>.TryFind(ISpecification<T>, out T)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.TryFind(ISpecification<T>, out T)
  type: Method
  source:
    remote:
      path: src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
      branch: gh-pages
      repo: https://github.com/catalyst-network/Catalyst.Framework.git
    id: TryFind
    path: ../src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
    startLine: 799
  assemblies:
  - Catalyst.Core.Lib
  namespace: Catalyst.Core.Lib.Repository
  syntax:
    content: public bool TryFind(ISpecification<T> criteria, out T entity)
    parameters:
    - id: criteria
      type: ISpecification{{T}}
    - id: entity
      type: '{T}'
    return:
      type: System.Boolean
    content.vb: Public Function TryFind(criteria As ISpecification(Of T), ByRef entity As T) As Boolean
  overload: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.TryFind*
  nameWithType.vb: RepositoryWrapper(Of T).TryFind(ISpecification(Of T), ByRef T)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).TryFind(ISpecification(Of T), ByRef T)
  name.vb: TryFind(ISpecification(Of T), ByRef T)
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.TryFind(ISpecification{`0},IQueryOptions{`0},`0@)
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.TryFind(ISpecification{`0},IQueryOptions{`0},`0@)
  id: TryFind(ISpecification{`0},IQueryOptions{`0},`0@)
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper`1
  langs:
  - csharp
  - vb
  name: TryFind(ISpecification<T>, IQueryOptions<T>, out T)
  nameWithType: RepositoryWrapper<T>.TryFind(ISpecification<T>, IQueryOptions<T>, out T)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.TryFind(ISpecification<T>, IQueryOptions<T>, out T)
  type: Method
  source:
    remote:
      path: src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
      branch: gh-pages
      repo: https://github.com/catalyst-network/Catalyst.Framework.git
    id: TryFind
    path: ../src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
    startLine: 804
  assemblies:
  - Catalyst.Core.Lib
  namespace: Catalyst.Core.Lib.Repository
  syntax:
    content: public bool TryFind(ISpecification<T> criteria, IQueryOptions<T> queryOptions, out T entity)
    parameters:
    - id: criteria
      type: ISpecification{{T}}
    - id: queryOptions
      type: IQueryOptions{{T}}
    - id: entity
      type: '{T}'
    return:
      type: System.Boolean
    content.vb: Public Function TryFind(criteria As ISpecification(Of T), queryOptions As IQueryOptions(Of T), ByRef entity As T) As Boolean
  overload: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.TryFind*
  nameWithType.vb: RepositoryWrapper(Of T).TryFind(ISpecification(Of T), IQueryOptions(Of T), ByRef T)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).TryFind(ISpecification(Of T), IQueryOptions(Of T), ByRef T)
  name.vb: TryFind(ISpecification(Of T), IQueryOptions(Of T), ByRef T)
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.TryFind``1(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}},``0@)
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.TryFind``1(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}},``0@)
  id: TryFind``1(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}},``0@)
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper`1
  langs:
  - csharp
  - vb
  name: TryFind<TResult>(ISpecification<T>, Expression<Func<T, TResult>>, out TResult)
  nameWithType: RepositoryWrapper<T>.TryFind<TResult>(ISpecification<T>, Expression<Func<T, TResult>>, out TResult)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.TryFind<TResult>(ISpecification<T>, System.Linq.Expressions.Expression<System.Func<T, TResult>>, out TResult)
  type: Method
  source:
    remote:
      path: src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
      branch: gh-pages
      repo: https://github.com/catalyst-network/Catalyst.Framework.git
    id: TryFind
    path: ../src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
    startLine: 809
  assemblies:
  - Catalyst.Core.Lib
  namespace: Catalyst.Core.Lib.Repository
  syntax:
    content: public bool TryFind<TResult>(ISpecification<T> criteria, Expression<Func<T, TResult>> selector, out TResult entity)
    parameters:
    - id: criteria
      type: ISpecification{{T}}
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{{T},{TResult}}}
    - id: entity
      type: '{TResult}'
    typeParameters:
    - id: TResult
    return:
      type: System.Boolean
    content.vb: Public Function TryFind(Of TResult)(criteria As ISpecification(Of T), selector As Expression(Of Func(Of T, TResult)), ByRef entity As TResult) As Boolean
  overload: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.TryFind*
  nameWithType.vb: RepositoryWrapper(Of T).TryFind(Of TResult)(ISpecification(Of T), Expression(Of Func(Of T, TResult)), ByRef TResult)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).TryFind(Of TResult)(ISpecification(Of T), System.Linq.Expressions.Expression(Of System.Func(Of T, TResult)), ByRef TResult)
  name.vb: TryFind(Of TResult)(ISpecification(Of T), Expression(Of Func(Of T, TResult)), ByRef TResult)
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.TryFind``1(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}},IQueryOptions{`0},``0@)
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.TryFind``1(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}},IQueryOptions{`0},``0@)
  id: TryFind``1(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}},IQueryOptions{`0},``0@)
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper`1
  langs:
  - csharp
  - vb
  name: TryFind<TResult>(ISpecification<T>, Expression<Func<T, TResult>>, IQueryOptions<T>, out TResult)
  nameWithType: RepositoryWrapper<T>.TryFind<TResult>(ISpecification<T>, Expression<Func<T, TResult>>, IQueryOptions<T>, out TResult)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.TryFind<TResult>(ISpecification<T>, System.Linq.Expressions.Expression<System.Func<T, TResult>>, IQueryOptions<T>, out TResult)
  type: Method
  source:
    remote:
      path: src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
      branch: gh-pages
      repo: https://github.com/catalyst-network/Catalyst.Framework.git
    id: TryFind
    path: ../src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
    startLine: 814
  assemblies:
  - Catalyst.Core.Lib
  namespace: Catalyst.Core.Lib.Repository
  syntax:
    content: public bool TryFind<TResult>(ISpecification<T> criteria, Expression<Func<T, TResult>> selector, IQueryOptions<T> queryOptions, out TResult entity)
    parameters:
    - id: criteria
      type: ISpecification{{T}}
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{{T},{TResult}}}
    - id: queryOptions
      type: IQueryOptions{{T}}
    - id: entity
      type: '{TResult}'
    typeParameters:
    - id: TResult
    return:
      type: System.Boolean
    content.vb: Public Function TryFind(Of TResult)(criteria As ISpecification(Of T), selector As Expression(Of Func(Of T, TResult)), queryOptions As IQueryOptions(Of T), ByRef entity As TResult) As Boolean
  overload: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.TryFind*
  nameWithType.vb: RepositoryWrapper(Of T).TryFind(Of TResult)(ISpecification(Of T), Expression(Of Func(Of T, TResult)), IQueryOptions(Of T), ByRef TResult)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).TryFind(Of TResult)(ISpecification(Of T), System.Linq.Expressions.Expression(Of System.Func(Of T, TResult)), IQueryOptions(Of T), ByRef TResult)
  name.vb: TryFind(Of TResult)(ISpecification(Of T), Expression(Of Func(Of T, TResult)), IQueryOptions(Of T), ByRef TResult)
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.TryGet(System.String,`0@)
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.TryGet(System.String,`0@)
  id: TryGet(System.String,`0@)
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper`1
  langs:
  - csharp
  - vb
  name: TryGet(String, out T)
  nameWithType: RepositoryWrapper<T>.TryGet(String, out T)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.TryGet(System.String, out T)
  type: Method
  source:
    remote:
      path: src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
      branch: gh-pages
      repo: https://github.com/catalyst-network/Catalyst.Framework.git
    id: TryGet
    path: ../src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
    startLine: 819
  assemblies:
  - Catalyst.Core.Lib
  namespace: Catalyst.Core.Lib.Repository
  syntax:
    content: public bool TryGet(string key, out T entity)
    parameters:
    - id: key
      type: System.String
    - id: entity
      type: '{T}'
    return:
      type: System.Boolean
    content.vb: Public Function TryGet(key As String, ByRef entity As T) As Boolean
  overload: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.TryGet*
  nameWithType.vb: RepositoryWrapper(Of T).TryGet(String, ByRef T)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).TryGet(System.String, ByRef T)
  name.vb: TryGet(String, ByRef T)
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.TryGet``1(System.String,System.Linq.Expressions.Expression{System.Func{`0,``0}},``0@)
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.TryGet``1(System.String,System.Linq.Expressions.Expression{System.Func{`0,``0}},``0@)
  id: TryGet``1(System.String,System.Linq.Expressions.Expression{System.Func{`0,``0}},``0@)
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper`1
  langs:
  - csharp
  - vb
  name: TryGet<TResult>(String, Expression<Func<T, TResult>>, out TResult)
  nameWithType: RepositoryWrapper<T>.TryGet<TResult>(String, Expression<Func<T, TResult>>, out TResult)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.TryGet<TResult>(System.String, System.Linq.Expressions.Expression<System.Func<T, TResult>>, out TResult)
  type: Method
  source:
    remote:
      path: src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
      branch: gh-pages
      repo: https://github.com/catalyst-network/Catalyst.Framework.git
    id: TryGet
    path: ../src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
    startLine: 824
  assemblies:
  - Catalyst.Core.Lib
  namespace: Catalyst.Core.Lib.Repository
  syntax:
    content: public bool TryGet<TResult>(string key, Expression<Func<T, TResult>> selector, out TResult entity)
    parameters:
    - id: key
      type: System.String
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{{T},{TResult}}}
    - id: entity
      type: '{TResult}'
    typeParameters:
    - id: TResult
    return:
      type: System.Boolean
    content.vb: Public Function TryGet(Of TResult)(key As String, selector As Expression(Of Func(Of T, TResult)), ByRef entity As TResult) As Boolean
  overload: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.TryGet*
  nameWithType.vb: RepositoryWrapper(Of T).TryGet(Of TResult)(String, Expression(Of Func(Of T, TResult)), ByRef TResult)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).TryGet(Of TResult)(System.String, System.Linq.Expressions.Expression(Of System.Func(Of T, TResult)), ByRef TResult)
  name.vb: TryGet(Of TResult)(String, Expression(Of Func(Of T, TResult)), ByRef TResult)
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Update(`0)
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Update(`0)
  id: Update(`0)
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper`1
  langs:
  - csharp
  - vb
  name: Update(T)
  nameWithType: RepositoryWrapper<T>.Update(T)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Update(T)
  type: Method
  source:
    remote:
      path: src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
      branch: gh-pages
      repo: https://github.com/catalyst-network/Catalyst.Framework.git
    id: Update
    path: ../src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
    startLine: 829
  assemblies:
  - Catalyst.Core.Lib
  namespace: Catalyst.Core.Lib.Repository
  syntax:
    content: public void Update(T entity)
    parameters:
    - id: entity
      type: '{T}'
    content.vb: Public Sub Update(entity As T)
  overload: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Update*
  nameWithType.vb: RepositoryWrapper(Of T).Update(T)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Update(T)
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Update(System.Collections.Generic.IEnumerable{`0})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Update(System.Collections.Generic.IEnumerable{`0})
  id: Update(System.Collections.Generic.IEnumerable{`0})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper`1
  langs:
  - csharp
  - vb
  name: Update(IEnumerable<T>)
  nameWithType: RepositoryWrapper<T>.Update(IEnumerable<T>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Update(System.Collections.Generic.IEnumerable<T>)
  type: Method
  source:
    remote:
      path: src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
      branch: gh-pages
      repo: https://github.com/catalyst-network/Catalyst.Framework.git
    id: Update
    path: ../src/Catalyst.Core.Lib/Repository/RepositoryWrapper.cs
    startLine: 834
  assemblies:
  - Catalyst.Core.Lib
  namespace: Catalyst.Core.Lib.Repository
  syntax:
    content: public void Update(IEnumerable<T> entities)
    parameters:
    - id: entities
      type: System.Collections.Generic.IEnumerable{{T}}
    content.vb: Public Sub Update(entities As IEnumerable(Of T))
  overload: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Update*
  nameWithType.vb: RepositoryWrapper(Of T).Update(IEnumerable(Of T))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Update(System.Collections.Generic.IEnumerable(Of T))
  name.vb: Update(IEnumerable(Of T))
references:
- uid: Catalyst.Core.Lib.Repository
  commentId: N:Catalyst.Core.Lib.Repository
  name: Catalyst.Core.Lib.Repository
  nameWithType: Catalyst.Core.Lib.Repository
  fullName: Catalyst.Core.Lib.Repository
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Catalyst.Abstractions.Repository.IRepositoryWrapper{{T}}
  commentId: T:Catalyst.Abstractions.Repository.IRepositoryWrapper{`0}
  parent: Catalyst.Abstractions.Repository
  definition: Catalyst.Abstractions.Repository.IRepositoryWrapper`1
  name: IRepositoryWrapper<T>
  nameWithType: IRepositoryWrapper<T>
  fullName: Catalyst.Abstractions.Repository.IRepositoryWrapper<T>
  nameWithType.vb: IRepositoryWrapper(Of T)
  fullName.vb: Catalyst.Abstractions.Repository.IRepositoryWrapper(Of T)
  name.vb: IRepositoryWrapper(Of T)
  spec.csharp:
  - uid: Catalyst.Abstractions.Repository.IRepositoryWrapper`1
    name: IRepositoryWrapper
    nameWithType: IRepositoryWrapper
    fullName: Catalyst.Abstractions.Repository.IRepositoryWrapper
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Catalyst.Abstractions.Repository.IRepositoryWrapper`1
    name: IRepositoryWrapper
    nameWithType: IRepositoryWrapper
    fullName: Catalyst.Abstractions.Repository.IRepositoryWrapper
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: IRepository{{T},System.String}
  commentId: '!:IRepository{`0,System.String}'
  definition: IRepository`2
  name: IRepository<T, String>
  nameWithType: IRepository<T, String>
  fullName: IRepository<T, System.String>
  nameWithType.vb: IRepository(Of T, String)
  fullName.vb: IRepository(Of T, System.String)
  name.vb: IRepository(Of T, String)
  spec.csharp:
  - uid: IRepository`2
    name: IRepository
    nameWithType: IRepository
    fullName: IRepository
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IRepository`2
    name: IRepository
    nameWithType: IRepository
    fullName: IRepository
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Catalyst.Abstractions.Repository.IRepositoryWrapper`1
  commentId: T:Catalyst.Abstractions.Repository.IRepositoryWrapper`1
  name: IRepositoryWrapper<T>
  nameWithType: IRepositoryWrapper<T>
  fullName: Catalyst.Abstractions.Repository.IRepositoryWrapper<T>
  nameWithType.vb: IRepositoryWrapper(Of T)
  fullName.vb: Catalyst.Abstractions.Repository.IRepositoryWrapper(Of T)
  name.vb: IRepositoryWrapper(Of T)
  spec.csharp:
  - uid: Catalyst.Abstractions.Repository.IRepositoryWrapper`1
    name: IRepositoryWrapper
    nameWithType: IRepositoryWrapper
    fullName: Catalyst.Abstractions.Repository.IRepositoryWrapper
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Catalyst.Abstractions.Repository.IRepositoryWrapper`1
    name: IRepositoryWrapper
    nameWithType: IRepositoryWrapper
    fullName: Catalyst.Abstractions.Repository.IRepositoryWrapper
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Abstractions.Repository
  commentId: N:Catalyst.Abstractions.Repository
  name: Catalyst.Abstractions.Repository
  nameWithType: Catalyst.Abstractions.Repository
  fullName: Catalyst.Abstractions.Repository
- uid: IRepository`2
  isExternal: true
  name: IRepository<, >
  nameWithType: IRepository<, >
  fullName: IRepository<, >
  nameWithType.vb: IRepository(Of , )
  fullName.vb: IRepository(Of , )
  name.vb: IRepository(Of , )
  spec.csharp:
  - uid: IRepository`2
    name: IRepository
    nameWithType: IRepository
    fullName: IRepository
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IRepository`2
    name: IRepository
    nameWithType: IRepository
    fullName: IRepository
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.#ctor*
  commentId: Overload:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.#ctor
  name: RepositoryWrapper
  nameWithType: RepositoryWrapper<T>.RepositoryWrapper
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.RepositoryWrapper
  nameWithType.vb: RepositoryWrapper(Of T).RepositoryWrapper
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).RepositoryWrapper
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Conventions*
  commentId: Overload:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Conventions
  name: Conventions
  nameWithType: RepositoryWrapper<T>.Conventions
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Conventions
  nameWithType.vb: RepositoryWrapper(Of T).Conventions
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Conventions
- uid: IRepositoryConventions
  commentId: '!:IRepositoryConventions'
  isExternal: true
  name: IRepositoryConventions
  nameWithType: IRepositoryConventions
  fullName: IRepositoryConventions
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.EntityType*
  commentId: Overload:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.EntityType
  name: EntityType
  nameWithType: RepositoryWrapper<T>.EntityType
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.EntityType
  nameWithType.vb: RepositoryWrapper(Of T).EntityType
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).EntityType
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.KeyType*
  commentId: Overload:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.KeyType
  name: KeyType
  nameWithType: RepositoryWrapper<T>.KeyType
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.KeyType
  nameWithType.vb: RepositoryWrapper(Of T).KeyType
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).KeyType
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.CachingStrategy*
  commentId: Overload:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.CachingStrategy
  name: CachingStrategy
  nameWithType: RepositoryWrapper<T>.CachingStrategy
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.CachingStrategy
  nameWithType.vb: RepositoryWrapper(Of T).CachingStrategy
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).CachingStrategy
- uid: ICachingStrategy{{T},System.String}
  commentId: '!:ICachingStrategy{`0,System.String}'
  definition: ICachingStrategy`2
  name: ICachingStrategy<T, String>
  nameWithType: ICachingStrategy<T, String>
  fullName: ICachingStrategy<T, System.String>
  nameWithType.vb: ICachingStrategy(Of T, String)
  fullName.vb: ICachingStrategy(Of T, System.String)
  name.vb: ICachingStrategy(Of T, String)
  spec.csharp:
  - uid: ICachingStrategy`2
    name: ICachingStrategy
    nameWithType: ICachingStrategy
    fullName: ICachingStrategy
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: ICachingStrategy`2
    name: ICachingStrategy
    nameWithType: ICachingStrategy
    fullName: ICachingStrategy
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: ICachingStrategy`2
  isExternal: true
  name: ICachingStrategy<, >
  nameWithType: ICachingStrategy<, >
  fullName: ICachingStrategy<, >
  nameWithType.vb: ICachingStrategy(Of , )
  fullName.vb: ICachingStrategy(Of , )
  name.vb: ICachingStrategy(Of , )
  spec.csharp:
  - uid: ICachingStrategy`2
    name: ICachingStrategy
    nameWithType: ICachingStrategy
    fullName: ICachingStrategy
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: ICachingStrategy`2
    name: ICachingStrategy
    nameWithType: ICachingStrategy
    fullName: ICachingStrategy
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.CachingEnabled*
  commentId: Overload:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.CachingEnabled
  name: CachingEnabled
  nameWithType: RepositoryWrapper<T>.CachingEnabled
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.CachingEnabled
  nameWithType.vb: RepositoryWrapper(Of T).CachingEnabled
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).CachingEnabled
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.CacheUsed*
  commentId: Overload:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.CacheUsed
  name: CacheUsed
  nameWithType: RepositoryWrapper<T>.CacheUsed
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.CacheUsed
  nameWithType.vb: RepositoryWrapper(Of T).CacheUsed
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).CacheUsed
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.TraceInfo*
  commentId: Overload:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.TraceInfo
  name: TraceInfo
  nameWithType: RepositoryWrapper<T>.TraceInfo
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.TraceInfo
  nameWithType.vb: RepositoryWrapper(Of T).TraceInfo
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).TraceInfo
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GenerateKeyOnAdd*
  commentId: Overload:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GenerateKeyOnAdd
  name: GenerateKeyOnAdd
  nameWithType: RepositoryWrapper<T>.GenerateKeyOnAdd
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.GenerateKeyOnAdd
  nameWithType.vb: RepositoryWrapper(Of T).GenerateKeyOnAdd
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).GenerateKeyOnAdd
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Add*
  commentId: Overload:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Add
  name: Add
  nameWithType: RepositoryWrapper<T>.Add
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Add
  nameWithType.vb: RepositoryWrapper(Of T).Add
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Add
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: System.Collections.Generic.IEnumerable{{T}}
  commentId: T:System.Collections.Generic.IEnumerable{``0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.AsQueryable*
  commentId: Overload:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.AsQueryable
  name: AsQueryable
  nameWithType: RepositoryWrapper<T>.AsQueryable
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.AsQueryable
  nameWithType.vb: RepositoryWrapper(Of T).AsQueryable
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).AsQueryable
- uid: System.Linq.IQueryable{{T}}
  commentId: T:System.Linq.IQueryable{`0}
  parent: System.Linq
  definition: System.Linq.IQueryable`1
  name: IQueryable<T>
  nameWithType: IQueryable<T>
  fullName: System.Linq.IQueryable<T>
  nameWithType.vb: IQueryable(Of T)
  fullName.vb: System.Linq.IQueryable(Of T)
  name.vb: IQueryable(Of T)
  spec.csharp:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.IQueryable`1
  commentId: T:System.Linq.IQueryable`1
  isExternal: true
  name: IQueryable<T>
  nameWithType: IQueryable<T>
  fullName: System.Linq.IQueryable<T>
  nameWithType.vb: IQueryable(Of T)
  fullName.vb: System.Linq.IQueryable(Of T)
  name.vb: IQueryable(Of T)
  spec.csharp:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq
  commentId: N:System.Linq
  isExternal: true
  name: System.Linq
  nameWithType: System.Linq
  fullName: System.Linq
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average*
  commentId: Overload:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average
  name: Average
  nameWithType: RepositoryWrapper<T>.Average
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Average
  nameWithType.vb: RepositoryWrapper(Of T).Average
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Average
- uid: System.Linq.Expressions.Expression{System.Func{{T},System.Int32}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{`0,System.Int32}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<T, Int32>>
  nameWithType: Expression<Func<T, Int32>>
  fullName: System.Linq.Expressions.Expression<System.Func<T, System.Int32>>
  nameWithType.vb: Expression(Of Func(Of T, Int32))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of T, System.Int32))
  name.vb: Expression(Of Func(Of T, Int32))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Double
  commentId: T:System.Double
  parent: System
  isExternal: true
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: System.Linq.Expressions.Expression`1
  commentId: T:System.Linq.Expressions.Expression`1
  isExternal: true
  name: Expression<TDelegate>
  nameWithType: Expression<TDelegate>
  fullName: System.Linq.Expressions.Expression<TDelegate>
  nameWithType.vb: Expression(Of TDelegate)
  fullName.vb: System.Linq.Expressions.Expression(Of TDelegate)
  name.vb: Expression(Of TDelegate)
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TDelegate
    nameWithType: TDelegate
    fullName: TDelegate
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TDelegate
    nameWithType: TDelegate
    fullName: TDelegate
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions
  commentId: N:System.Linq.Expressions
  isExternal: true
  name: System.Linq.Expressions
  nameWithType: System.Linq.Expressions
  fullName: System.Linq.Expressions
- uid: ISpecification{{T}}
  commentId: '!:ISpecification{`0}'
  definition: ISpecification`1
  name: ISpecification<T>
  nameWithType: ISpecification<T>
  fullName: ISpecification<T>
  nameWithType.vb: ISpecification(Of T)
  fullName.vb: ISpecification(Of T)
  name.vb: ISpecification(Of T)
  spec.csharp:
  - uid: ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: ISpecification`1
  isExternal: true
  name: ISpecification<>
  nameWithType: ISpecification<>
  fullName: ISpecification<>
  nameWithType.vb: ISpecification(Of )
  fullName.vb: ISpecification(Of )
  name.vb: ISpecification(Of )
  spec.csharp:
  - uid: ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions.Expression{System.Func{{T},System.Boolean}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<T, Boolean>>
  nameWithType: Expression<Func<T, Boolean>>
  fullName: System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>
  nameWithType.vb: Expression(Of Func(Of T, Boolean))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean))
  name.vb: Expression(Of Func(Of T, Boolean))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions.Expression{System.Func{{T},System.Nullable{System.Int32}}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int32}}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<T, Nullable<Int32>>>
  nameWithType: Expression<Func<T, Nullable<Int32>>>
  fullName: System.Linq.Expressions.Expression<System.Func<T, System.Nullable<System.Int32>>>
  nameWithType.vb: Expression(Of Func(Of T, Nullable(Of Int32)))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of T, System.Nullable(Of System.Int32)))
  name.vb: Expression(Of Func(Of T, Nullable(Of Int32)))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable{System.Double}
  commentId: T:System.Nullable{System.Double}
  parent: System
  definition: System.Nullable`1
  name: Nullable<Double>
  nameWithType: Nullable<Double>
  fullName: System.Nullable<System.Double>
  nameWithType.vb: Nullable(Of Double)
  fullName.vb: System.Nullable(Of System.Double)
  name.vb: Nullable(Of Double)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions.Expression{System.Func{{T},System.Int64}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{`0,System.Int64}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<T, Int64>>
  nameWithType: Expression<Func<T, Int64>>
  fullName: System.Linq.Expressions.Expression<System.Func<T, System.Int64>>
  nameWithType.vb: Expression(Of Func(Of T, Int64))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of T, System.Int64))
  name.vb: Expression(Of Func(Of T, Int64))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions.Expression{System.Func{{T},System.Nullable{System.Int64}}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int64}}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<T, Nullable<Int64>>>
  nameWithType: Expression<Func<T, Nullable<Int64>>>
  fullName: System.Linq.Expressions.Expression<System.Func<T, System.Nullable<System.Int64>>>
  nameWithType.vb: Expression(Of Func(Of T, Nullable(Of Int64)))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of T, System.Nullable(Of System.Int64)))
  name.vb: Expression(Of Func(Of T, Nullable(Of Int64)))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions.Expression{System.Func{{T},System.Decimal}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<T, Decimal>>
  nameWithType: Expression<Func<T, Decimal>>
  fullName: System.Linq.Expressions.Expression<System.Func<T, System.Decimal>>
  nameWithType.vb: Expression(Of Func(Of T, Decimal))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of T, System.Decimal))
  name.vb: Expression(Of Func(Of T, Decimal))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Decimal
  commentId: T:System.Decimal
  parent: System
  isExternal: true
  name: Decimal
  nameWithType: Decimal
  fullName: System.Decimal
- uid: System.Linq.Expressions.Expression{System.Func{{T},System.Nullable{System.Decimal}}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Decimal}}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<T, Nullable<Decimal>>>
  nameWithType: Expression<Func<T, Nullable<Decimal>>>
  fullName: System.Linq.Expressions.Expression<System.Func<T, System.Nullable<System.Decimal>>>
  nameWithType.vb: Expression(Of Func(Of T, Nullable(Of Decimal)))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of T, System.Nullable(Of System.Decimal)))
  name.vb: Expression(Of Func(Of T, Nullable(Of Decimal)))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable{System.Decimal}
  commentId: T:System.Nullable{System.Decimal}
  parent: System
  definition: System.Nullable`1
  name: Nullable<Decimal>
  nameWithType: Nullable<Decimal>
  fullName: System.Nullable<System.Decimal>
  nameWithType.vb: Nullable(Of Decimal)
  fullName.vb: System.Nullable(Of System.Decimal)
  name.vb: Nullable(Of Decimal)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions.Expression{System.Func{{T},System.Double}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{`0,System.Double}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<T, Double>>
  nameWithType: Expression<Func<T, Double>>
  fullName: System.Linq.Expressions.Expression<System.Func<T, System.Double>>
  nameWithType.vb: Expression(Of Func(Of T, Double))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of T, System.Double))
  name.vb: Expression(Of Func(Of T, Double))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions.Expression{System.Func{{T},System.Nullable{System.Double}}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Double}}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<T, Nullable<Double>>>
  nameWithType: Expression<Func<T, Nullable<Double>>>
  fullName: System.Linq.Expressions.Expression<System.Func<T, System.Nullable<System.Double>>>
  nameWithType.vb: Expression(Of Func(Of T, Nullable(Of Double)))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of T, System.Nullable(Of System.Double)))
  name.vb: Expression(Of Func(Of T, Nullable(Of Double)))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions.Expression{System.Func{{T},System.Single}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{`0,System.Single}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<T, Single>>
  nameWithType: Expression<Func<T, Single>>
  fullName: System.Linq.Expressions.Expression<System.Func<T, System.Single>>
  nameWithType.vb: Expression(Of Func(Of T, Single))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of T, System.Single))
  name.vb: Expression(Of Func(Of T, Single))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Single
  commentId: T:System.Single
  parent: System
  isExternal: true
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: System.Linq.Expressions.Expression{System.Func{{T},System.Nullable{System.Single}}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Single}}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<T, Nullable<Single>>>
  nameWithType: Expression<Func<T, Nullable<Single>>>
  fullName: System.Linq.Expressions.Expression<System.Func<T, System.Nullable<System.Single>>>
  nameWithType.vb: Expression(Of Func(Of T, Nullable(Of Single)))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of T, System.Nullable(Of System.Single)))
  name.vb: Expression(Of Func(Of T, Nullable(Of Single)))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable{System.Single}
  commentId: T:System.Nullable{System.Single}
  parent: System
  definition: System.Nullable`1
  name: Nullable<Single>
  nameWithType: Nullable<Single>
  fullName: System.Nullable<System.Single>
  nameWithType.vb: Nullable(Of Single)
  fullName.vb: System.Nullable(Of System.Single)
  name.vb: Nullable(Of Single)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.BeginBatch*
  commentId: Overload:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.BeginBatch
  name: BeginBatch
  nameWithType: RepositoryWrapper<T>.BeginBatch
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.BeginBatch
  nameWithType.vb: RepositoryWrapper(Of T).BeginBatch
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).BeginBatch
- uid: IBatch{{T}}
  commentId: '!:IBatch{`0}'
  definition: IBatch`1
  name: IBatch<T>
  nameWithType: IBatch<T>
  fullName: IBatch<T>
  nameWithType.vb: IBatch(Of T)
  fullName.vb: IBatch(Of T)
  name.vb: IBatch(Of T)
  spec.csharp:
  - uid: IBatch`1
    name: IBatch
    nameWithType: IBatch
    fullName: IBatch
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IBatch`1
    name: IBatch
    nameWithType: IBatch
    fullName: IBatch
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: IBatch`1
  commentId: '!:IBatch`1'
  isExternal: true
  name: IBatch<>
  nameWithType: IBatch<>
  fullName: IBatch<>
  nameWithType.vb: IBatch(Of )
  fullName.vb: IBatch(Of )
  name.vb: IBatch(Of )
  spec.csharp:
  - uid: IBatch`1
    name: IBatch
    nameWithType: IBatch
    fullName: IBatch
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IBatch`1
    name: IBatch
    nameWithType: IBatch
    fullName: IBatch
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.ClearCache*
  commentId: Overload:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.ClearCache
  name: ClearCache
  nameWithType: RepositoryWrapper<T>.ClearCache
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.ClearCache
  nameWithType.vb: RepositoryWrapper(Of T).ClearCache
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).ClearCache
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Count*
  commentId: Overload:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Count
  name: Count
  nameWithType: RepositoryWrapper<T>.Count
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Count
  nameWithType.vb: RepositoryWrapper(Of T).Count
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Count
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Delete*
  commentId: Overload:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Delete
  name: Delete
  nameWithType: RepositoryWrapper<T>.Delete
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Delete
  nameWithType.vb: RepositoryWrapper(Of T).Delete
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Delete
- uid: System.Collections.Generic.IEnumerable{System.String}
  commentId: T:System.Collections.Generic.IEnumerable{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<String>
  nameWithType: IEnumerable<String>
  fullName: System.Collections.Generic.IEnumerable<System.String>
  nameWithType.vb: IEnumerable(Of String)
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.String)
  name.vb: IEnumerable(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.String[]
  isExternal: true
  name: String[]
  nameWithType: String[]
  fullName: System.String[]
  nameWithType.vb: String()
  fullName.vb: System.String()
  name.vb: String()
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.DisableCaching*
  commentId: Overload:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.DisableCaching
  name: DisableCaching
  nameWithType: RepositoryWrapper<T>.DisableCaching
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.DisableCaching
  nameWithType.vb: RepositoryWrapper(Of T).DisableCaching
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).DisableCaching
- uid: IDisabledCache
  commentId: '!:IDisabledCache'
  isExternal: true
  name: IDisabledCache
  nameWithType: IDisabledCache
  fullName: IDisabledCache
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Dispose*
  commentId: Overload:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Dispose
  name: Dispose
  nameWithType: RepositoryWrapper<T>.Dispose
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Dispose
  nameWithType.vb: RepositoryWrapper(Of T).Dispose
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Dispose
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Exists*
  commentId: Overload:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Exists
  name: Exists
  nameWithType: RepositoryWrapper<T>.Exists
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Exists
  nameWithType.vb: RepositoryWrapper(Of T).Exists
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Exists
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Find*
  commentId: Overload:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Find
  name: Find
  nameWithType: RepositoryWrapper<T>.Find
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Find
  nameWithType.vb: RepositoryWrapper(Of T).Find
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Find
- uid: IQueryOptions{{T}}
  commentId: '!:IQueryOptions{`0}'
  definition: IQueryOptions`1
  name: IQueryOptions<T>
  nameWithType: IQueryOptions<T>
  fullName: IQueryOptions<T>
  nameWithType.vb: IQueryOptions(Of T)
  fullName.vb: IQueryOptions(Of T)
  name.vb: IQueryOptions(Of T)
  spec.csharp:
  - uid: IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: IQueryOptions
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: IQueryOptions
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: IQueryOptions`1
  isExternal: true
  name: IQueryOptions<>
  nameWithType: IQueryOptions<>
  fullName: IQueryOptions<>
  nameWithType.vb: IQueryOptions(Of )
  fullName.vb: IQueryOptions(Of )
  name.vb: IQueryOptions(Of )
  spec.csharp:
  - uid: IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: IQueryOptions
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: IQueryOptions
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions.Expression{System.Func{{T},{TResult}}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{`0,``0}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<T, TResult>>
  nameWithType: Expression<Func<T, TResult>>
  fullName: System.Linq.Expressions.Expression<System.Func<T, TResult>>
  nameWithType.vb: Expression(Of Func(Of T, TResult))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of T, TResult))
  name.vb: Expression(Of Func(Of T, TResult))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: '{TResult}'
  commentId: '!:TResult'
  definition: TResult
  name: TResult
  nameWithType: TResult
  fullName: TResult
- uid: TResult
  name: TResult
  nameWithType: TResult
  fullName: TResult
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.FindAll*
  commentId: Overload:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.FindAll
  name: FindAll
  nameWithType: RepositoryWrapper<T>.FindAll
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.FindAll
  nameWithType.vb: RepositoryWrapper(Of T).FindAll
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).FindAll
- uid: System.Collections.Generic.IEnumerable{{TResult}}
  commentId: T:System.Collections.Generic.IEnumerable{``0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<TResult>
  nameWithType: IEnumerable<TResult>
  fullName: System.Collections.Generic.IEnumerable<TResult>
  nameWithType.vb: IEnumerable(Of TResult)
  fullName.vb: System.Collections.Generic.IEnumerable(Of TResult)
  name.vb: IEnumerable(Of TResult)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Get*
  commentId: Overload:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Get
  name: Get
  nameWithType: RepositoryWrapper<T>.Get
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Get
  nameWithType.vb: RepositoryWrapper(Of T).Get
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Get
- uid: IFetchStrategy{{T}}
  commentId: '!:IFetchStrategy{`0}'
  definition: IFetchStrategy`1
  name: IFetchStrategy<T>
  nameWithType: IFetchStrategy<T>
  fullName: IFetchStrategy<T>
  nameWithType.vb: IFetchStrategy(Of T)
  fullName.vb: IFetchStrategy(Of T)
  name.vb: IFetchStrategy(Of T)
  spec.csharp:
  - uid: IFetchStrategy`1
    name: IFetchStrategy
    nameWithType: IFetchStrategy
    fullName: IFetchStrategy
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IFetchStrategy`1
    name: IFetchStrategy
    nameWithType: IFetchStrategy
    fullName: IFetchStrategy
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: IFetchStrategy`1
  isExternal: true
  name: IFetchStrategy<>
  nameWithType: IFetchStrategy<>
  fullName: IFetchStrategy<>
  nameWithType.vb: IFetchStrategy(Of )
  fullName.vb: IFetchStrategy(Of )
  name.vb: IFetchStrategy(Of )
  spec.csharp:
  - uid: IFetchStrategy`1
    name: IFetchStrategy
    nameWithType: IFetchStrategy
    fullName: IFetchStrategy
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IFetchStrategy`1
    name: IFetchStrategy
    nameWithType: IFetchStrategy
    fullName: IFetchStrategy
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions.Expression{System.Func{{T},System.Object}}[]
  isExternal: true
  name: Expression<Func<T, Object>>[]
  nameWithType: Expression<Func<T, Object>>[]
  fullName: System.Linq.Expressions.Expression<System.Func<T, System.Object>>[]
  nameWithType.vb: Expression(Of Func(Of T, Object))()
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of T, System.Object))()
  name.vb: Expression(Of Func(Of T, Object))()
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll*
  commentId: Overload:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll
  name: GetAll
  nameWithType: RepositoryWrapper<T>.GetAll
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.GetAll
  nameWithType.vb: RepositoryWrapper(Of T).GetAll
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).GetAll
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetMany*
  commentId: Overload:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetMany
  name: GetMany
  nameWithType: RepositoryWrapper<T>.GetMany
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.GetMany
  nameWithType.vb: RepositoryWrapper(Of T).GetMany
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).GetMany
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetManyAsDictionary*
  commentId: Overload:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetManyAsDictionary
  name: GetManyAsDictionary
  nameWithType: RepositoryWrapper<T>.GetManyAsDictionary
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.GetManyAsDictionary
  nameWithType.vb: RepositoryWrapper(Of T).GetManyAsDictionary
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).GetManyAsDictionary
- uid: System.Collections.Generic.IDictionary{System.String,{T}}
  commentId: T:System.Collections.Generic.IDictionary{System.String,`0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IDictionary`2
  name: IDictionary<String, T>
  nameWithType: IDictionary<String, T>
  fullName: System.Collections.Generic.IDictionary<System.String, T>
  nameWithType.vb: IDictionary(Of String, T)
  fullName.vb: System.Collections.Generic.IDictionary(Of System.String, T)
  name.vb: IDictionary(Of String, T)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IDictionary`2
  commentId: T:System.Collections.Generic.IDictionary`2
  isExternal: true
  name: IDictionary<TKey, TValue>
  nameWithType: IDictionary<TKey, TValue>
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>
  nameWithType.vb: IDictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.IDictionary(Of TKey, TValue)
  name.vb: IDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetPrimaryKey*
  commentId: Overload:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetPrimaryKey
  name: GetPrimaryKey
  nameWithType: RepositoryWrapper<T>.GetPrimaryKey
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.GetPrimaryKey
  nameWithType.vb: RepositoryWrapper(Of T).GetPrimaryKey
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).GetPrimaryKey
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GroupBy*
  commentId: Overload:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GroupBy
  name: GroupBy
  nameWithType: RepositoryWrapper<T>.GroupBy
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.GroupBy
  nameWithType.vb: RepositoryWrapper(Of T).GroupBy
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).GroupBy
- uid: System.Linq.Expressions.Expression{System.Func{{T},{TGroupKey}}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{`0,``0}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<T, TGroupKey>>
  nameWithType: Expression<Func<T, TGroupKey>>
  fullName: System.Linq.Expressions.Expression<System.Func<T, TGroupKey>>
  nameWithType.vb: Expression(Of Func(Of T, TGroupKey))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of T, TGroupKey))
  name.vb: Expression(Of Func(Of T, TGroupKey))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TGroupKey
    nameWithType: TGroupKey
    fullName: TGroupKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TGroupKey
    nameWithType: TGroupKey
    fullName: TGroupKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions.Expression{System.Func{System.Linq.IGrouping{{TGroupKey},{T}},{TResult}}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{System.Linq.IGrouping{``0,`0},``1}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<IGrouping<TGroupKey, T>, TResult>>
  nameWithType: Expression<Func<IGrouping<TGroupKey, T>, TResult>>
  fullName: System.Linq.Expressions.Expression<System.Func<System.Linq.IGrouping<TGroupKey, T>, TResult>>
  nameWithType.vb: Expression(Of Func(Of IGrouping(Of TGroupKey, T), TResult))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of System.Linq.IGrouping(Of TGroupKey, T), TResult))
  name.vb: Expression(Of Func(Of IGrouping(Of TGroupKey, T), TResult))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Linq.IGrouping`2
    name: IGrouping
    nameWithType: IGrouping
    fullName: System.Linq.IGrouping
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TGroupKey
    nameWithType: TGroupKey
    fullName: TGroupKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Linq.IGrouping`2
    name: IGrouping
    nameWithType: IGrouping
    fullName: System.Linq.IGrouping
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TGroupKey
    nameWithType: TGroupKey
    fullName: TGroupKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GroupCount*
  commentId: Overload:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GroupCount
  name: GroupCount
  nameWithType: RepositoryWrapper<T>.GroupCount
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.GroupCount
  nameWithType.vb: RepositoryWrapper(Of T).GroupCount
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).GroupCount
- uid: System.Collections.Generic.IDictionary{{TGroupKey},System.Int32}
  commentId: T:System.Collections.Generic.IDictionary{``0,System.Int32}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IDictionary`2
  name: IDictionary<TGroupKey, Int32>
  nameWithType: IDictionary<TGroupKey, Int32>
  fullName: System.Collections.Generic.IDictionary<TGroupKey, System.Int32>
  nameWithType.vb: IDictionary(Of TGroupKey, Int32)
  fullName.vb: System.Collections.Generic.IDictionary(Of TGroupKey, System.Int32)
  name.vb: IDictionary(Of TGroupKey, Int32)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TGroupKey
    nameWithType: TGroupKey
    fullName: TGroupKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TGroupKey
    nameWithType: TGroupKey
    fullName: TGroupKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GroupLongCount*
  commentId: Overload:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GroupLongCount
  name: GroupLongCount
  nameWithType: RepositoryWrapper<T>.GroupLongCount
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.GroupLongCount
  nameWithType.vb: RepositoryWrapper(Of T).GroupLongCount
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).GroupLongCount
- uid: System.Collections.Generic.IDictionary{{TGroupKey},System.Int64}
  commentId: T:System.Collections.Generic.IDictionary{``0,System.Int64}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IDictionary`2
  name: IDictionary<TGroupKey, Int64>
  nameWithType: IDictionary<TGroupKey, Int64>
  fullName: System.Collections.Generic.IDictionary<TGroupKey, System.Int64>
  nameWithType.vb: IDictionary(Of TGroupKey, Int64)
  fullName.vb: System.Collections.Generic.IDictionary(Of TGroupKey, System.Int64)
  name.vb: IDictionary(Of TGroupKey, Int64)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TGroupKey
    nameWithType: TGroupKey
    fullName: TGroupKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TGroupKey
    nameWithType: TGroupKey
    fullName: TGroupKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Join*
  commentId: Overload:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Join
  name: Join
  nameWithType: RepositoryWrapper<T>.Join
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Join
  nameWithType.vb: RepositoryWrapper(Of T).Join
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Join
- uid: IRepositoryQueryable{{TInner}}
  commentId: '!:IRepositoryQueryable{``1}'
  definition: IRepositoryQueryable`1
  name: IRepositoryQueryable<TInner>
  nameWithType: IRepositoryQueryable<TInner>
  fullName: IRepositoryQueryable<TInner>
  nameWithType.vb: IRepositoryQueryable(Of TInner)
  fullName.vb: IRepositoryQueryable(Of TInner)
  name.vb: IRepositoryQueryable(Of TInner)
  spec.csharp:
  - uid: IRepositoryQueryable`1
    name: IRepositoryQueryable
    nameWithType: IRepositoryQueryable
    fullName: IRepositoryQueryable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IRepositoryQueryable`1
    name: IRepositoryQueryable
    nameWithType: IRepositoryQueryable
    fullName: IRepositoryQueryable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions.Expression{System.Func{{T},{TJoinKey}}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{`0,``0}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<T, TJoinKey>>
  nameWithType: Expression<Func<T, TJoinKey>>
  fullName: System.Linq.Expressions.Expression<System.Func<T, TJoinKey>>
  nameWithType.vb: Expression(Of Func(Of T, TJoinKey))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of T, TJoinKey))
  name.vb: Expression(Of Func(Of T, TJoinKey))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TJoinKey
    nameWithType: TJoinKey
    fullName: TJoinKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TJoinKey
    nameWithType: TJoinKey
    fullName: TJoinKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions.Expression{System.Func{{TInner},{TJoinKey}}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{``1,``0}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<TInner, TJoinKey>>
  nameWithType: Expression<Func<TInner, TJoinKey>>
  fullName: System.Linq.Expressions.Expression<System.Func<TInner, TJoinKey>>
  nameWithType.vb: Expression(Of Func(Of TInner, TJoinKey))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of TInner, TJoinKey))
  name.vb: Expression(Of Func(Of TInner, TJoinKey))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TJoinKey
    nameWithType: TJoinKey
    fullName: TJoinKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TJoinKey
    nameWithType: TJoinKey
    fullName: TJoinKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions.Expression{System.Func{{T},{TInner},{TResult}}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{`0,``1,``2}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<T, TInner, TResult>>
  nameWithType: Expression<Func<T, TInner, TResult>>
  fullName: System.Linq.Expressions.Expression<System.Func<T, TInner, TResult>>
  nameWithType.vb: Expression(Of Func(Of T, TInner, TResult))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of T, TInner, TResult))
  name.vb: Expression(Of Func(Of T, TInner, TResult))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: IRepositoryQueryable{{TResult}}
  commentId: '!:IRepositoryQueryable{``2}'
  definition: IRepositoryQueryable`1
  name: IRepositoryQueryable<TResult>
  nameWithType: IRepositoryQueryable<TResult>
  fullName: IRepositoryQueryable<TResult>
  nameWithType.vb: IRepositoryQueryable(Of TResult)
  fullName.vb: IRepositoryQueryable(Of TResult)
  name.vb: IRepositoryQueryable(Of TResult)
  spec.csharp:
  - uid: IRepositoryQueryable`1
    name: IRepositoryQueryable
    nameWithType: IRepositoryQueryable
    fullName: IRepositoryQueryable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IRepositoryQueryable`1
    name: IRepositoryQueryable
    nameWithType: IRepositoryQueryable
    fullName: IRepositoryQueryable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: IRepositoryQueryable`1
  isExternal: true
  name: IRepositoryQueryable<>
  nameWithType: IRepositoryQueryable<>
  fullName: IRepositoryQueryable<>
  nameWithType.vb: IRepositoryQueryable(Of )
  fullName.vb: IRepositoryQueryable(Of )
  name.vb: IRepositoryQueryable(Of )
  spec.csharp:
  - uid: IRepositoryQueryable`1
    name: IRepositoryQueryable
    nameWithType: IRepositoryQueryable
    fullName: IRepositoryQueryable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IRepositoryQueryable`1
    name: IRepositoryQueryable
    nameWithType: IRepositoryQueryable
    fullName: IRepositoryQueryable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.LongCount*
  commentId: Overload:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.LongCount
  name: LongCount
  nameWithType: RepositoryWrapper<T>.LongCount
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.LongCount
  nameWithType.vb: RepositoryWrapper(Of T).LongCount
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).LongCount
- uid: System.Int64
  commentId: T:System.Int64
  parent: System
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Max*
  commentId: Overload:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Max
  name: Max
  nameWithType: RepositoryWrapper<T>.Max
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Max
  nameWithType.vb: RepositoryWrapper(Of T).Max
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Max
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Min*
  commentId: Overload:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Min
  name: Min
  nameWithType: RepositoryWrapper<T>.Min
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Min
  nameWithType.vb: RepositoryWrapper(Of T).Min
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Min
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum*
  commentId: Overload:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum
  name: Sum
  nameWithType: RepositoryWrapper<T>.Sum
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Sum
  nameWithType.vb: RepositoryWrapper(Of T).Sum
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Sum
- uid: System.Nullable{System.Int32}
  commentId: T:System.Nullable{System.Int32}
  parent: System
  definition: System.Nullable`1
  name: Nullable<Int32>
  nameWithType: Nullable<Int32>
  fullName: System.Nullable<System.Int32>
  nameWithType.vb: Nullable(Of Int32)
  fullName.vb: System.Nullable(Of System.Int32)
  name.vb: Nullable(Of Int32)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable{System.Int64}
  commentId: T:System.Nullable{System.Int64}
  parent: System
  definition: System.Nullable`1
  name: Nullable<Int64>
  nameWithType: Nullable<Int64>
  fullName: System.Nullable<System.Int64>
  nameWithType.vb: Nullable(Of Int64)
  fullName.vb: System.Nullable(Of System.Int64)
  name.vb: Nullable(Of Int64)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.TryFind*
  commentId: Overload:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.TryFind
  name: TryFind
  nameWithType: RepositoryWrapper<T>.TryFind
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.TryFind
  nameWithType.vb: RepositoryWrapper(Of T).TryFind
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).TryFind
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.TryGet*
  commentId: Overload:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.TryGet
  name: TryGet
  nameWithType: RepositoryWrapper<T>.TryGet
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.TryGet
  nameWithType.vb: RepositoryWrapper(Of T).TryGet
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).TryGet
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Update*
  commentId: Overload:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Update
  name: Update
  nameWithType: RepositoryWrapper<T>.Update
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Update
  nameWithType.vb: RepositoryWrapper(Of T).Update
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Update
