### YamlMime:ManagedReference
items:
- uid: Catalyst.Core.Lib.IO.Handlers.ProtocolMessageSignHandler
  commentId: T:Catalyst.Core.Lib.IO.Handlers.ProtocolMessageSignHandler
  id: ProtocolMessageSignHandler
  parent: Catalyst.Core.Lib.IO.Handlers
  children:
  - Catalyst.Core.Lib.IO.Handlers.ProtocolMessageSignHandler.#ctor(Catalyst.Abstractions.KeySigner.IKeySigner,SigningContext)
  - Catalyst.Core.Lib.IO.Handlers.ProtocolMessageSignHandler.WriteAsync0(IChannelHandlerContext,Catalyst.Abstractions.IO.Messaging.Dto.IMessageDto{ProtocolMessage})
  langs:
  - csharp
  - vb
  name: ProtocolMessageSignHandler
  nameWithType: ProtocolMessageSignHandler
  fullName: Catalyst.Core.Lib.IO.Handlers.ProtocolMessageSignHandler
  type: Class
  source:
    remote:
      path: src/Catalyst.Core.Lib/IO/Handlers/ProtocolMessageSignHandler.cs
      branch: gh-pages
      repo: https://github.com/catalyst-network/Catalyst.Framework.git
    id: ProtocolMessageSignHandler
    path: ../src/Catalyst.Core.Lib/IO/Handlers/ProtocolMessageSignHandler.cs
    startLine: 36
  assemblies:
  - Catalyst.Core.Lib
  namespace: Catalyst.Core.Lib.IO.Handlers
  syntax:
    content: 'public sealed class ProtocolMessageSignHandler : OutboundChannelHandlerBase<IMessageDto<ProtocolMessage>>'
    content.vb: >-
      Public NotInheritable Class ProtocolMessageSignHandler

          Inherits OutboundChannelHandlerBase(Of IMessageDto(Of ProtocolMessage))
  inheritance:
  - System.Object
  - Catalyst.Core.Lib.IO.Handlers.OutboundChannelHandlerBase{Catalyst.Abstractions.IO.Messaging.Dto.IMessageDto{ProtocolMessage}}
  inheritedMembers:
  - Catalyst.Core.Lib.IO.Handlers.OutboundChannelHandlerBase{Catalyst.Abstractions.IO.Messaging.Dto.IMessageDto{ProtocolMessage}}.WriteAsync(IChannelHandlerContext,System.Object)
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: Catalyst.Core.Lib.IO.Handlers.ProtocolMessageSignHandler.#ctor(Catalyst.Abstractions.KeySigner.IKeySigner,SigningContext)
  commentId: M:Catalyst.Core.Lib.IO.Handlers.ProtocolMessageSignHandler.#ctor(Catalyst.Abstractions.KeySigner.IKeySigner,SigningContext)
  id: '#ctor(Catalyst.Abstractions.KeySigner.IKeySigner,SigningContext)'
  parent: Catalyst.Core.Lib.IO.Handlers.ProtocolMessageSignHandler
  langs:
  - csharp
  - vb
  name: ProtocolMessageSignHandler(IKeySigner, SigningContext)
  nameWithType: ProtocolMessageSignHandler.ProtocolMessageSignHandler(IKeySigner, SigningContext)
  fullName: Catalyst.Core.Lib.IO.Handlers.ProtocolMessageSignHandler.ProtocolMessageSignHandler(Catalyst.Abstractions.KeySigner.IKeySigner, SigningContext)
  type: Constructor
  source:
    remote:
      path: src/Catalyst.Core.Lib/IO/Handlers/ProtocolMessageSignHandler.cs
      branch: gh-pages
      repo: https://github.com/catalyst-network/Catalyst.Framework.git
    id: .ctor
    path: ../src/Catalyst.Core.Lib/IO/Handlers/ProtocolMessageSignHandler.cs
    startLine: 43
  assemblies:
  - Catalyst.Core.Lib
  namespace: Catalyst.Core.Lib.IO.Handlers
  syntax:
    content: public ProtocolMessageSignHandler(IKeySigner keySigner, SigningContext signingContext)
    parameters:
    - id: keySigner
      type: Catalyst.Abstractions.KeySigner.IKeySigner
    - id: signingContext
      type: SigningContext
    content.vb: Public Sub New(keySigner As IKeySigner, signingContext As SigningContext)
  overload: Catalyst.Core.Lib.IO.Handlers.ProtocolMessageSignHandler.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Catalyst.Core.Lib.IO.Handlers.ProtocolMessageSignHandler.WriteAsync0(IChannelHandlerContext,Catalyst.Abstractions.IO.Messaging.Dto.IMessageDto{ProtocolMessage})
  commentId: M:Catalyst.Core.Lib.IO.Handlers.ProtocolMessageSignHandler.WriteAsync0(IChannelHandlerContext,Catalyst.Abstractions.IO.Messaging.Dto.IMessageDto{ProtocolMessage})
  id: WriteAsync0(IChannelHandlerContext,Catalyst.Abstractions.IO.Messaging.Dto.IMessageDto{ProtocolMessage})
  parent: Catalyst.Core.Lib.IO.Handlers.ProtocolMessageSignHandler
  langs:
  - csharp
  - vb
  name: WriteAsync0(IChannelHandlerContext, IMessageDto<ProtocolMessage>)
  nameWithType: ProtocolMessageSignHandler.WriteAsync0(IChannelHandlerContext, IMessageDto<ProtocolMessage>)
  fullName: Catalyst.Core.Lib.IO.Handlers.ProtocolMessageSignHandler.WriteAsync0(IChannelHandlerContext, Catalyst.Abstractions.IO.Messaging.Dto.IMessageDto<ProtocolMessage>)
  type: Method
  source:
    remote:
      path: src/Catalyst.Core.Lib/IO/Handlers/ProtocolMessageSignHandler.cs
      branch: gh-pages
      repo: https://github.com/catalyst-network/Catalyst.Framework.git
    id: WriteAsync0
    path: ../src/Catalyst.Core.Lib/IO/Handlers/ProtocolMessageSignHandler.cs
    startLine: 55
  assemblies:
  - Catalyst.Core.Lib
  namespace: Catalyst.Core.Lib.IO.Handlers
  summary: "\nSigns a protocol message, or straight WriteAndFlush non-protocolMessages\n"
  example: []
  syntax:
    content: protected override Task WriteAsync0(IChannelHandlerContext context, IMessageDto<ProtocolMessage> message)
    parameters:
    - id: context
      type: IChannelHandlerContext
      description: ''
    - id: message
      type: Catalyst.Abstractions.IO.Messaging.Dto.IMessageDto{ProtocolMessage}
      description: ''
    return:
      type: System.Threading.Tasks.Task
      description: ''
    content.vb: Protected Overrides Function WriteAsync0(context As IChannelHandlerContext, message As IMessageDto(Of ProtocolMessage)) As Task
  overridden: Catalyst.Core.Lib.IO.Handlers.OutboundChannelHandlerBase{Catalyst.Abstractions.IO.Messaging.Dto.IMessageDto{ProtocolMessage}}.WriteAsync0(IChannelHandlerContext,Catalyst.Abstractions.IO.Messaging.Dto.IMessageDto{ProtocolMessage})
  overload: Catalyst.Core.Lib.IO.Handlers.ProtocolMessageSignHandler.WriteAsync0*
  nameWithType.vb: ProtocolMessageSignHandler.WriteAsync0(IChannelHandlerContext, IMessageDto(Of ProtocolMessage))
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
  fullName.vb: Catalyst.Core.Lib.IO.Handlers.ProtocolMessageSignHandler.WriteAsync0(IChannelHandlerContext, Catalyst.Abstractions.IO.Messaging.Dto.IMessageDto(Of ProtocolMessage))
  name.vb: WriteAsync0(IChannelHandlerContext, IMessageDto(Of ProtocolMessage))
references:
- uid: Catalyst.Core.Lib.IO.Handlers
  commentId: N:Catalyst.Core.Lib.IO.Handlers
  name: Catalyst.Core.Lib.IO.Handlers
  nameWithType: Catalyst.Core.Lib.IO.Handlers
  fullName: Catalyst.Core.Lib.IO.Handlers
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Catalyst.Core.Lib.IO.Handlers.OutboundChannelHandlerBase{Catalyst.Abstractions.IO.Messaging.Dto.IMessageDto{ProtocolMessage}}
  commentId: T:Catalyst.Core.Lib.IO.Handlers.OutboundChannelHandlerBase{Catalyst.Abstractions.IO.Messaging.Dto.IMessageDto{ProtocolMessage}}
  parent: Catalyst.Core.Lib.IO.Handlers
  definition: Catalyst.Core.Lib.IO.Handlers.OutboundChannelHandlerBase`1
  name: OutboundChannelHandlerBase<IMessageDto<ProtocolMessage>>
  nameWithType: OutboundChannelHandlerBase<IMessageDto<ProtocolMessage>>
  fullName: Catalyst.Core.Lib.IO.Handlers.OutboundChannelHandlerBase<Catalyst.Abstractions.IO.Messaging.Dto.IMessageDto<ProtocolMessage>>
  nameWithType.vb: OutboundChannelHandlerBase(Of IMessageDto(Of ProtocolMessage))
  fullName.vb: Catalyst.Core.Lib.IO.Handlers.OutboundChannelHandlerBase(Of Catalyst.Abstractions.IO.Messaging.Dto.IMessageDto(Of ProtocolMessage))
  name.vb: OutboundChannelHandlerBase(Of IMessageDto(Of ProtocolMessage))
  spec.csharp:
  - uid: Catalyst.Core.Lib.IO.Handlers.OutboundChannelHandlerBase`1
    name: OutboundChannelHandlerBase
    nameWithType: OutboundChannelHandlerBase
    fullName: Catalyst.Core.Lib.IO.Handlers.OutboundChannelHandlerBase
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Abstractions.IO.Messaging.Dto.IMessageDto`1
    name: IMessageDto
    nameWithType: IMessageDto
    fullName: Catalyst.Abstractions.IO.Messaging.Dto.IMessageDto
  - name: <
    nameWithType: <
    fullName: <
  - uid: ProtocolMessage
    name: ProtocolMessage
    nameWithType: ProtocolMessage
    fullName: ProtocolMessage
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Catalyst.Core.Lib.IO.Handlers.OutboundChannelHandlerBase`1
    name: OutboundChannelHandlerBase
    nameWithType: OutboundChannelHandlerBase
    fullName: Catalyst.Core.Lib.IO.Handlers.OutboundChannelHandlerBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Abstractions.IO.Messaging.Dto.IMessageDto`1
    name: IMessageDto
    nameWithType: IMessageDto
    fullName: Catalyst.Abstractions.IO.Messaging.Dto.IMessageDto
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: ProtocolMessage
    name: ProtocolMessage
    nameWithType: ProtocolMessage
    fullName: ProtocolMessage
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.IO.Handlers.OutboundChannelHandlerBase{Catalyst.Abstractions.IO.Messaging.Dto.IMessageDto{ProtocolMessage}}.WriteAsync(IChannelHandlerContext,System.Object)
  commentId: M:Catalyst.Core.Lib.IO.Handlers.OutboundChannelHandlerBase{Catalyst.Abstractions.IO.Messaging.Dto.IMessageDto{ProtocolMessage}}.WriteAsync(IChannelHandlerContext,System.Object)
  parent: Catalyst.Core.Lib.IO.Handlers.OutboundChannelHandlerBase{Catalyst.Abstractions.IO.Messaging.Dto.IMessageDto{ProtocolMessage}}
  definition: Catalyst.Core.Lib.IO.Handlers.OutboundChannelHandlerBase`1.WriteAsync(IChannelHandlerContext,System.Object)
  name: WriteAsync(IChannelHandlerContext, Object)
  nameWithType: OutboundChannelHandlerBase<IMessageDto<ProtocolMessage>>.WriteAsync(IChannelHandlerContext, Object)
  fullName: Catalyst.Core.Lib.IO.Handlers.OutboundChannelHandlerBase<Catalyst.Abstractions.IO.Messaging.Dto.IMessageDto<ProtocolMessage>>.WriteAsync(IChannelHandlerContext, System.Object)
  nameWithType.vb: OutboundChannelHandlerBase(Of IMessageDto(Of ProtocolMessage)).WriteAsync(IChannelHandlerContext, Object)
  fullName.vb: Catalyst.Core.Lib.IO.Handlers.OutboundChannelHandlerBase(Of Catalyst.Abstractions.IO.Messaging.Dto.IMessageDto(Of ProtocolMessage)).WriteAsync(IChannelHandlerContext, System.Object)
  spec.csharp:
  - uid: Catalyst.Core.Lib.IO.Handlers.OutboundChannelHandlerBase`1.WriteAsync(IChannelHandlerContext,System.Object)
    name: WriteAsync
    nameWithType: OutboundChannelHandlerBase<IMessageDto<ProtocolMessage>>.WriteAsync
    fullName: Catalyst.Core.Lib.IO.Handlers.OutboundChannelHandlerBase<Catalyst.Abstractions.IO.Messaging.Dto.IMessageDto<ProtocolMessage>>.WriteAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: IChannelHandlerContext
    name: IChannelHandlerContext
    nameWithType: IChannelHandlerContext
    fullName: IChannelHandlerContext
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.IO.Handlers.OutboundChannelHandlerBase`1.WriteAsync(IChannelHandlerContext,System.Object)
    name: WriteAsync
    nameWithType: OutboundChannelHandlerBase(Of IMessageDto(Of ProtocolMessage)).WriteAsync
    fullName: Catalyst.Core.Lib.IO.Handlers.OutboundChannelHandlerBase(Of Catalyst.Abstractions.IO.Messaging.Dto.IMessageDto(Of ProtocolMessage)).WriteAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: IChannelHandlerContext
    name: IChannelHandlerContext
    nameWithType: IChannelHandlerContext
    fullName: IChannelHandlerContext
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Catalyst.Core.Lib.IO.Handlers.OutboundChannelHandlerBase`1
  commentId: T:Catalyst.Core.Lib.IO.Handlers.OutboundChannelHandlerBase`1
  name: OutboundChannelHandlerBase<T>
  nameWithType: OutboundChannelHandlerBase<T>
  fullName: Catalyst.Core.Lib.IO.Handlers.OutboundChannelHandlerBase<T>
  nameWithType.vb: OutboundChannelHandlerBase(Of T)
  fullName.vb: Catalyst.Core.Lib.IO.Handlers.OutboundChannelHandlerBase(Of T)
  name.vb: OutboundChannelHandlerBase(Of T)
  spec.csharp:
  - uid: Catalyst.Core.Lib.IO.Handlers.OutboundChannelHandlerBase`1
    name: OutboundChannelHandlerBase
    nameWithType: OutboundChannelHandlerBase
    fullName: Catalyst.Core.Lib.IO.Handlers.OutboundChannelHandlerBase
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Catalyst.Core.Lib.IO.Handlers.OutboundChannelHandlerBase`1
    name: OutboundChannelHandlerBase
    nameWithType: OutboundChannelHandlerBase
    fullName: Catalyst.Core.Lib.IO.Handlers.OutboundChannelHandlerBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.IO.Handlers.OutboundChannelHandlerBase`1.WriteAsync(IChannelHandlerContext,System.Object)
  commentId: M:Catalyst.Core.Lib.IO.Handlers.OutboundChannelHandlerBase`1.WriteAsync(IChannelHandlerContext,System.Object)
  isExternal: true
  name: WriteAsync(IChannelHandlerContext, Object)
  nameWithType: OutboundChannelHandlerBase<T>.WriteAsync(IChannelHandlerContext, Object)
  fullName: Catalyst.Core.Lib.IO.Handlers.OutboundChannelHandlerBase<T>.WriteAsync(IChannelHandlerContext, System.Object)
  nameWithType.vb: OutboundChannelHandlerBase(Of T).WriteAsync(IChannelHandlerContext, Object)
  fullName.vb: Catalyst.Core.Lib.IO.Handlers.OutboundChannelHandlerBase(Of T).WriteAsync(IChannelHandlerContext, System.Object)
  spec.csharp:
  - uid: Catalyst.Core.Lib.IO.Handlers.OutboundChannelHandlerBase`1.WriteAsync(IChannelHandlerContext,System.Object)
    name: WriteAsync
    nameWithType: OutboundChannelHandlerBase<T>.WriteAsync
    fullName: Catalyst.Core.Lib.IO.Handlers.OutboundChannelHandlerBase<T>.WriteAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: IChannelHandlerContext
    name: IChannelHandlerContext
    nameWithType: IChannelHandlerContext
    fullName: IChannelHandlerContext
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.IO.Handlers.OutboundChannelHandlerBase`1.WriteAsync(IChannelHandlerContext,System.Object)
    name: WriteAsync
    nameWithType: OutboundChannelHandlerBase(Of T).WriteAsync
    fullName: Catalyst.Core.Lib.IO.Handlers.OutboundChannelHandlerBase(Of T).WriteAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: IChannelHandlerContext
    name: IChannelHandlerContext
    nameWithType: IChannelHandlerContext
    fullName: IChannelHandlerContext
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.IO.Handlers.ProtocolMessageSignHandler.#ctor*
  commentId: Overload:Catalyst.Core.Lib.IO.Handlers.ProtocolMessageSignHandler.#ctor
  name: ProtocolMessageSignHandler
  nameWithType: ProtocolMessageSignHandler.ProtocolMessageSignHandler
  fullName: Catalyst.Core.Lib.IO.Handlers.ProtocolMessageSignHandler.ProtocolMessageSignHandler
- uid: Catalyst.Abstractions.KeySigner.IKeySigner
  commentId: T:Catalyst.Abstractions.KeySigner.IKeySigner
  parent: Catalyst.Abstractions.KeySigner
  name: IKeySigner
  nameWithType: IKeySigner
  fullName: Catalyst.Abstractions.KeySigner.IKeySigner
- uid: SigningContext
  isExternal: true
  name: SigningContext
  nameWithType: SigningContext
  fullName: SigningContext
- uid: Catalyst.Abstractions.KeySigner
  commentId: N:Catalyst.Abstractions.KeySigner
  name: Catalyst.Abstractions.KeySigner
  nameWithType: Catalyst.Abstractions.KeySigner
  fullName: Catalyst.Abstractions.KeySigner
- uid: Catalyst.Core.Lib.IO.Handlers.OutboundChannelHandlerBase{Catalyst.Abstractions.IO.Messaging.Dto.IMessageDto{ProtocolMessage}}.WriteAsync0(IChannelHandlerContext,Catalyst.Abstractions.IO.Messaging.Dto.IMessageDto{ProtocolMessage})
  commentId: M:Catalyst.Core.Lib.IO.Handlers.OutboundChannelHandlerBase{Catalyst.Abstractions.IO.Messaging.Dto.IMessageDto{ProtocolMessage}}.WriteAsync0(IChannelHandlerContext,Catalyst.Abstractions.IO.Messaging.Dto.IMessageDto{ProtocolMessage})
  parent: Catalyst.Core.Lib.IO.Handlers.OutboundChannelHandlerBase{Catalyst.Abstractions.IO.Messaging.Dto.IMessageDto{ProtocolMessage}}
  definition: Catalyst.Core.Lib.IO.Handlers.OutboundChannelHandlerBase`1.WriteAsync0(IChannelHandlerContext,`0)
  name: WriteAsync0(IChannelHandlerContext, IMessageDto<ProtocolMessage>)
  nameWithType: OutboundChannelHandlerBase<IMessageDto<ProtocolMessage>>.WriteAsync0(IChannelHandlerContext, IMessageDto<ProtocolMessage>)
  fullName: Catalyst.Core.Lib.IO.Handlers.OutboundChannelHandlerBase<Catalyst.Abstractions.IO.Messaging.Dto.IMessageDto<ProtocolMessage>>.WriteAsync0(IChannelHandlerContext, Catalyst.Abstractions.IO.Messaging.Dto.IMessageDto<ProtocolMessage>)
  nameWithType.vb: OutboundChannelHandlerBase(Of IMessageDto(Of ProtocolMessage)).WriteAsync0(IChannelHandlerContext, IMessageDto(Of ProtocolMessage))
  fullName.vb: Catalyst.Core.Lib.IO.Handlers.OutboundChannelHandlerBase(Of Catalyst.Abstractions.IO.Messaging.Dto.IMessageDto(Of ProtocolMessage)).WriteAsync0(IChannelHandlerContext, Catalyst.Abstractions.IO.Messaging.Dto.IMessageDto(Of ProtocolMessage))
  name.vb: WriteAsync0(IChannelHandlerContext, IMessageDto(Of ProtocolMessage))
  spec.csharp:
  - uid: Catalyst.Core.Lib.IO.Handlers.OutboundChannelHandlerBase`1.WriteAsync0(IChannelHandlerContext,`0)
    name: WriteAsync0
    nameWithType: OutboundChannelHandlerBase<IMessageDto<ProtocolMessage>>.WriteAsync0
    fullName: Catalyst.Core.Lib.IO.Handlers.OutboundChannelHandlerBase<Catalyst.Abstractions.IO.Messaging.Dto.IMessageDto<ProtocolMessage>>.WriteAsync0
  - name: (
    nameWithType: (
    fullName: (
  - uid: IChannelHandlerContext
    name: IChannelHandlerContext
    nameWithType: IChannelHandlerContext
    fullName: IChannelHandlerContext
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Catalyst.Abstractions.IO.Messaging.Dto.IMessageDto`1
    name: IMessageDto
    nameWithType: IMessageDto
    fullName: Catalyst.Abstractions.IO.Messaging.Dto.IMessageDto
  - name: <
    nameWithType: <
    fullName: <
  - uid: ProtocolMessage
    name: ProtocolMessage
    nameWithType: ProtocolMessage
    fullName: ProtocolMessage
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.IO.Handlers.OutboundChannelHandlerBase`1.WriteAsync0(IChannelHandlerContext,`0)
    name: WriteAsync0
    nameWithType: OutboundChannelHandlerBase(Of IMessageDto(Of ProtocolMessage)).WriteAsync0
    fullName: Catalyst.Core.Lib.IO.Handlers.OutboundChannelHandlerBase(Of Catalyst.Abstractions.IO.Messaging.Dto.IMessageDto(Of ProtocolMessage)).WriteAsync0
  - name: (
    nameWithType: (
    fullName: (
  - uid: IChannelHandlerContext
    name: IChannelHandlerContext
    nameWithType: IChannelHandlerContext
    fullName: IChannelHandlerContext
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Catalyst.Abstractions.IO.Messaging.Dto.IMessageDto`1
    name: IMessageDto
    nameWithType: IMessageDto
    fullName: Catalyst.Abstractions.IO.Messaging.Dto.IMessageDto
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: ProtocolMessage
    name: ProtocolMessage
    nameWithType: ProtocolMessage
    fullName: ProtocolMessage
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.IO.Handlers.ProtocolMessageSignHandler.WriteAsync0*
  commentId: Overload:Catalyst.Core.Lib.IO.Handlers.ProtocolMessageSignHandler.WriteAsync0
  name: WriteAsync0
  nameWithType: ProtocolMessageSignHandler.WriteAsync0
  fullName: Catalyst.Core.Lib.IO.Handlers.ProtocolMessageSignHandler.WriteAsync0
- uid: IChannelHandlerContext
  isExternal: true
  name: IChannelHandlerContext
  nameWithType: IChannelHandlerContext
  fullName: IChannelHandlerContext
- uid: Catalyst.Abstractions.IO.Messaging.Dto.IMessageDto{ProtocolMessage}
  commentId: T:Catalyst.Abstractions.IO.Messaging.Dto.IMessageDto{ProtocolMessage}
  parent: Catalyst.Abstractions.IO.Messaging.Dto
  definition: Catalyst.Abstractions.IO.Messaging.Dto.IMessageDto`1
  name: IMessageDto<ProtocolMessage>
  nameWithType: IMessageDto<ProtocolMessage>
  fullName: Catalyst.Abstractions.IO.Messaging.Dto.IMessageDto<ProtocolMessage>
  nameWithType.vb: IMessageDto(Of ProtocolMessage)
  fullName.vb: Catalyst.Abstractions.IO.Messaging.Dto.IMessageDto(Of ProtocolMessage)
  name.vb: IMessageDto(Of ProtocolMessage)
  spec.csharp:
  - uid: Catalyst.Abstractions.IO.Messaging.Dto.IMessageDto`1
    name: IMessageDto
    nameWithType: IMessageDto
    fullName: Catalyst.Abstractions.IO.Messaging.Dto.IMessageDto
  - name: <
    nameWithType: <
    fullName: <
  - uid: ProtocolMessage
    name: ProtocolMessage
    nameWithType: ProtocolMessage
    fullName: ProtocolMessage
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Catalyst.Abstractions.IO.Messaging.Dto.IMessageDto`1
    name: IMessageDto
    nameWithType: IMessageDto
    fullName: Catalyst.Abstractions.IO.Messaging.Dto.IMessageDto
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: ProtocolMessage
    name: ProtocolMessage
    nameWithType: ProtocolMessage
    fullName: ProtocolMessage
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: Catalyst.Core.Lib.IO.Handlers.OutboundChannelHandlerBase`1.WriteAsync0(IChannelHandlerContext,`0)
  commentId: M:Catalyst.Core.Lib.IO.Handlers.OutboundChannelHandlerBase`1.WriteAsync0(IChannelHandlerContext,`0)
  isExternal: true
  name: WriteAsync0(IChannelHandlerContext, T)
  nameWithType: OutboundChannelHandlerBase<T>.WriteAsync0(IChannelHandlerContext, T)
  fullName: Catalyst.Core.Lib.IO.Handlers.OutboundChannelHandlerBase<T>.WriteAsync0(IChannelHandlerContext, T)
  nameWithType.vb: OutboundChannelHandlerBase(Of T).WriteAsync0(IChannelHandlerContext, T)
  fullName.vb: Catalyst.Core.Lib.IO.Handlers.OutboundChannelHandlerBase(Of T).WriteAsync0(IChannelHandlerContext, T)
  spec.csharp:
  - uid: Catalyst.Core.Lib.IO.Handlers.OutboundChannelHandlerBase`1.WriteAsync0(IChannelHandlerContext,`0)
    name: WriteAsync0
    nameWithType: OutboundChannelHandlerBase<T>.WriteAsync0
    fullName: Catalyst.Core.Lib.IO.Handlers.OutboundChannelHandlerBase<T>.WriteAsync0
  - name: (
    nameWithType: (
    fullName: (
  - uid: IChannelHandlerContext
    name: IChannelHandlerContext
    nameWithType: IChannelHandlerContext
    fullName: IChannelHandlerContext
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.IO.Handlers.OutboundChannelHandlerBase`1.WriteAsync0(IChannelHandlerContext,`0)
    name: WriteAsync0
    nameWithType: OutboundChannelHandlerBase(Of T).WriteAsync0
    fullName: Catalyst.Core.Lib.IO.Handlers.OutboundChannelHandlerBase(Of T).WriteAsync0
  - name: (
    nameWithType: (
    fullName: (
  - uid: IChannelHandlerContext
    name: IChannelHandlerContext
    nameWithType: IChannelHandlerContext
    fullName: IChannelHandlerContext
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Abstractions.IO.Messaging.Dto.IMessageDto`1
  commentId: T:Catalyst.Abstractions.IO.Messaging.Dto.IMessageDto`1
  name: IMessageDto<T>
  nameWithType: IMessageDto<T>
  fullName: Catalyst.Abstractions.IO.Messaging.Dto.IMessageDto<T>
  nameWithType.vb: IMessageDto(Of T)
  fullName.vb: Catalyst.Abstractions.IO.Messaging.Dto.IMessageDto(Of T)
  name.vb: IMessageDto(Of T)
  spec.csharp:
  - uid: Catalyst.Abstractions.IO.Messaging.Dto.IMessageDto`1
    name: IMessageDto
    nameWithType: IMessageDto
    fullName: Catalyst.Abstractions.IO.Messaging.Dto.IMessageDto
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Catalyst.Abstractions.IO.Messaging.Dto.IMessageDto`1
    name: IMessageDto
    nameWithType: IMessageDto
    fullName: Catalyst.Abstractions.IO.Messaging.Dto.IMessageDto
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Abstractions.IO.Messaging.Dto
  commentId: N:Catalyst.Abstractions.IO.Messaging.Dto
  name: Catalyst.Abstractions.IO.Messaging.Dto
  nameWithType: Catalyst.Abstractions.IO.Messaging.Dto
  fullName: Catalyst.Abstractions.IO.Messaging.Dto
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
