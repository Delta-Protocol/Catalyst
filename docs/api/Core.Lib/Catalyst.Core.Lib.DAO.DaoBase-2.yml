### YamlMime:ManagedReference
items:
- uid: Catalyst.Core.Lib.DAO.DaoBase`2
  commentId: T:Catalyst.Core.Lib.DAO.DaoBase`2
  id: DaoBase`2
  parent: Catalyst.Core.Lib.DAO
  children:
  - Catalyst.Core.Lib.DAO.DaoBase`2.Convert(`0,ResolutionContext)
  - Catalyst.Core.Lib.DAO.DaoBase`2.Convert(`1,ResolutionContext)
  - Catalyst.Core.Lib.DAO.DaoBase`2.Id
  - Catalyst.Core.Lib.DAO.DaoBase`2.InitMappers(IMapperConfigurationExpression)
  - Catalyst.Core.Lib.DAO.DaoBase`2.ToDao(`0)
  - Catalyst.Core.Lib.DAO.DaoBase`2.ToProtoBuff
  langs:
  - csharp
  - vb
  name: DaoBase<TProto, TDao>
  nameWithType: DaoBase<TProto, TDao>
  fullName: Catalyst.Core.Lib.DAO.DaoBase<TProto, TDao>
  type: Class
  source:
    remote:
      path: src/Catalyst.Core.Lib/DAO/DaoBase.cs
      branch: gh-pages
      repo: https://github.com/catalyst-network/Catalyst.Framework.git
    id: DaoBase
    path: ../src/Catalyst.Core.Lib/DAO/DaoBase.cs
    startLine: 30
  assemblies:
  - Catalyst.Core.Lib
  namespace: Catalyst.Core.Lib.DAO
  syntax:
    content: 'public abstract class DaoBase<TProto, TDao> : IMapperInitializer, IValueConverter<TProto, TDao>'
    typeParameters:
    - id: TProto
    - id: TDao
    content.vb: >-
      Public MustInherit Class DaoBase(Of TProto, TDao)

          Implements IMapperInitializer, IValueConverter(Of TProto, TDao)
  inheritance:
  - System.Object
  derivedClasses:
  - Catalyst.Core.Lib.DAO.BaseEntryDao
  - Catalyst.Core.Lib.DAO.CoinbaseEntryDao
  - Catalyst.Core.Lib.DAO.ConfidentialEntryDao
  - Catalyst.Core.Lib.DAO.ContractEntryDao
  - Catalyst.Core.Lib.DAO.Deltas.CandidateDeltaBroadcastDao
  - Catalyst.Core.Lib.DAO.Deltas.DeltaDao
  - Catalyst.Core.Lib.DAO.Deltas.DeltaDfsHashBroadcastDao
  - Catalyst.Core.Lib.DAO.Deltas.FavouriteDeltaBroadcastDao
  - Catalyst.Core.Lib.DAO.PeerDao
  - Catalyst.Core.Lib.DAO.PeerIdDao
  - Catalyst.Core.Lib.DAO.ProtocolErrorMessageSignedDao
  - Catalyst.Core.Lib.DAO.ProtocolMessageDao
  - Catalyst.Core.Lib.DAO.PublicEntryDao
  - Catalyst.Core.Lib.DAO.SignatureDao
  - Catalyst.Core.Lib.DAO.SigningContextDao
  - Catalyst.Core.Lib.DAO.TransactionBroadcastDao
  implements:
  - Catalyst.Abstractions.DAO.IMapperInitializer
  - IValueConverter{{TProto},{TDao}}
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  nameWithType.vb: DaoBase(Of TProto, TDao)
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
  fullName.vb: Catalyst.Core.Lib.DAO.DaoBase(Of TProto, TDao)
  name.vb: DaoBase(Of TProto, TDao)
- uid: Catalyst.Core.Lib.DAO.DaoBase`2.Id
  commentId: P:Catalyst.Core.Lib.DAO.DaoBase`2.Id
  id: Id
  parent: Catalyst.Core.Lib.DAO.DaoBase`2
  langs:
  - csharp
  - vb
  name: Id
  nameWithType: DaoBase<TProto, TDao>.Id
  fullName: Catalyst.Core.Lib.DAO.DaoBase<TProto, TDao>.Id
  type: Property
  source:
    remote:
      path: src/Catalyst.Core.Lib/DAO/DaoBase.cs
      branch: gh-pages
      repo: https://github.com/catalyst-network/Catalyst.Framework.git
    id: Id
    path: ../src/Catalyst.Core.Lib/DAO/DaoBase.cs
    startLine: 33
  assemblies:
  - Catalyst.Core.Lib
  namespace: Catalyst.Core.Lib.DAO
  syntax:
    content: >-
      [Key]

      public string Id { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: >-
      <Key>

      Public Property Id As String
  overload: Catalyst.Core.Lib.DAO.DaoBase`2.Id*
  attributes:
  - type: System.ComponentModel.DataAnnotations.KeyAttribute
    ctor: System.ComponentModel.DataAnnotations.KeyAttribute.#ctor
    arguments: []
  nameWithType.vb: DaoBase(Of TProto, TDao).Id
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: Catalyst.Core.Lib.DAO.DaoBase(Of TProto, TDao).Id
- uid: Catalyst.Core.Lib.DAO.DaoBase`2.ToProtoBuff
  commentId: M:Catalyst.Core.Lib.DAO.DaoBase`2.ToProtoBuff
  id: ToProtoBuff
  parent: Catalyst.Core.Lib.DAO.DaoBase`2
  langs:
  - csharp
  - vb
  name: ToProtoBuff()
  nameWithType: DaoBase<TProto, TDao>.ToProtoBuff()
  fullName: Catalyst.Core.Lib.DAO.DaoBase<TProto, TDao>.ToProtoBuff()
  type: Method
  source:
    remote:
      path: src/Catalyst.Core.Lib/DAO/DaoBase.cs
      branch: gh-pages
      repo: https://github.com/catalyst-network/Catalyst.Framework.git
    id: ToProtoBuff
    path: ../src/Catalyst.Core.Lib/DAO/DaoBase.cs
    startLine: 37
  assemblies:
  - Catalyst.Core.Lib
  namespace: Catalyst.Core.Lib.DAO
  syntax:
    content: public TProto ToProtoBuff()
    return:
      type: '{TProto}'
    content.vb: Public Function ToProtoBuff As TProto
  overload: Catalyst.Core.Lib.DAO.DaoBase`2.ToProtoBuff*
  nameWithType.vb: DaoBase(Of TProto, TDao).ToProtoBuff()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Catalyst.Core.Lib.DAO.DaoBase(Of TProto, TDao).ToProtoBuff()
- uid: Catalyst.Core.Lib.DAO.DaoBase`2.ToDao(`0)
  commentId: M:Catalyst.Core.Lib.DAO.DaoBase`2.ToDao(`0)
  id: ToDao(`0)
  parent: Catalyst.Core.Lib.DAO.DaoBase`2
  langs:
  - csharp
  - vb
  name: ToDao(TProto)
  nameWithType: DaoBase<TProto, TDao>.ToDao(TProto)
  fullName: Catalyst.Core.Lib.DAO.DaoBase<TProto, TDao>.ToDao(TProto)
  type: Method
  source:
    remote:
      path: src/Catalyst.Core.Lib/DAO/DaoBase.cs
      branch: gh-pages
      repo: https://github.com/catalyst-network/Catalyst.Framework.git
    id: ToDao
    path: ../src/Catalyst.Core.Lib/DAO/DaoBase.cs
    startLine: 42
  assemblies:
  - Catalyst.Core.Lib
  namespace: Catalyst.Core.Lib.DAO
  syntax:
    content: public TDao ToDao(TProto protoBuff)
    parameters:
    - id: protoBuff
      type: '{TProto}'
    return:
      type: '{TDao}'
    content.vb: Public Function ToDao(protoBuff As TProto) As TDao
  overload: Catalyst.Core.Lib.DAO.DaoBase`2.ToDao*
  nameWithType.vb: DaoBase(Of TProto, TDao).ToDao(TProto)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Catalyst.Core.Lib.DAO.DaoBase(Of TProto, TDao).ToDao(TProto)
- uid: Catalyst.Core.Lib.DAO.DaoBase`2.InitMappers(IMapperConfigurationExpression)
  commentId: M:Catalyst.Core.Lib.DAO.DaoBase`2.InitMappers(IMapperConfigurationExpression)
  id: InitMappers(IMapperConfigurationExpression)
  parent: Catalyst.Core.Lib.DAO.DaoBase`2
  langs:
  - csharp
  - vb
  name: InitMappers(IMapperConfigurationExpression)
  nameWithType: DaoBase<TProto, TDao>.InitMappers(IMapperConfigurationExpression)
  fullName: Catalyst.Core.Lib.DAO.DaoBase<TProto, TDao>.InitMappers(IMapperConfigurationExpression)
  type: Method
  source:
    remote:
      path: src/Catalyst.Core.Lib/DAO/DaoBase.cs
      branch: gh-pages
      repo: https://github.com/catalyst-network/Catalyst.Framework.git
    id: InitMappers
    path: ../src/Catalyst.Core.Lib/DAO/DaoBase.cs
    startLine: 47
  assemblies:
  - Catalyst.Core.Lib
  namespace: Catalyst.Core.Lib.DAO
  syntax:
    content: public abstract void InitMappers(IMapperConfigurationExpression cfg)
    parameters:
    - id: cfg
      type: IMapperConfigurationExpression
    content.vb: Public MustOverride Sub InitMappers(cfg As IMapperConfigurationExpression)
  overload: Catalyst.Core.Lib.DAO.DaoBase`2.InitMappers*
  nameWithType.vb: DaoBase(Of TProto, TDao).InitMappers(IMapperConfigurationExpression)
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
  fullName.vb: Catalyst.Core.Lib.DAO.DaoBase(Of TProto, TDao).InitMappers(IMapperConfigurationExpression)
- uid: Catalyst.Core.Lib.DAO.DaoBase`2.Convert(`0,ResolutionContext)
  commentId: M:Catalyst.Core.Lib.DAO.DaoBase`2.Convert(`0,ResolutionContext)
  id: Convert(`0,ResolutionContext)
  parent: Catalyst.Core.Lib.DAO.DaoBase`2
  langs:
  - csharp
  - vb
  name: Convert(TProto, ResolutionContext)
  nameWithType: DaoBase<TProto, TDao>.Convert(TProto, ResolutionContext)
  fullName: Catalyst.Core.Lib.DAO.DaoBase<TProto, TDao>.Convert(TProto, ResolutionContext)
  type: Method
  source:
    remote:
      path: src/Catalyst.Core.Lib/DAO/DaoBase.cs
      branch: gh-pages
      repo: https://github.com/catalyst-network/Catalyst.Framework.git
    id: Convert
    path: ../src/Catalyst.Core.Lib/DAO/DaoBase.cs
    startLine: 49
  assemblies:
  - Catalyst.Core.Lib
  namespace: Catalyst.Core.Lib.DAO
  syntax:
    content: public TDao Convert(TProto sourceMember, ResolutionContext context)
    parameters:
    - id: sourceMember
      type: '{TProto}'
    - id: context
      type: ResolutionContext
    return:
      type: '{TDao}'
    content.vb: Public Function Convert(sourceMember As TProto, context As ResolutionContext) As TDao
  overload: Catalyst.Core.Lib.DAO.DaoBase`2.Convert*
  nameWithType.vb: DaoBase(Of TProto, TDao).Convert(TProto, ResolutionContext)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Catalyst.Core.Lib.DAO.DaoBase(Of TProto, TDao).Convert(TProto, ResolutionContext)
- uid: Catalyst.Core.Lib.DAO.DaoBase`2.Convert(`1,ResolutionContext)
  commentId: M:Catalyst.Core.Lib.DAO.DaoBase`2.Convert(`1,ResolutionContext)
  id: Convert(`1,ResolutionContext)
  parent: Catalyst.Core.Lib.DAO.DaoBase`2
  langs:
  - csharp
  - vb
  name: Convert(TDao, ResolutionContext)
  nameWithType: DaoBase<TProto, TDao>.Convert(TDao, ResolutionContext)
  fullName: Catalyst.Core.Lib.DAO.DaoBase<TProto, TDao>.Convert(TDao, ResolutionContext)
  type: Method
  source:
    remote:
      path: src/Catalyst.Core.Lib/DAO/DaoBase.cs
      branch: gh-pages
      repo: https://github.com/catalyst-network/Catalyst.Framework.git
    id: Convert
    path: ../src/Catalyst.Core.Lib/DAO/DaoBase.cs
    startLine: 54
  assemblies:
  - Catalyst.Core.Lib
  namespace: Catalyst.Core.Lib.DAO
  syntax:
    content: public TProto Convert(TDao sourceMember, ResolutionContext context)
    parameters:
    - id: sourceMember
      type: '{TDao}'
    - id: context
      type: ResolutionContext
    return:
      type: '{TProto}'
    content.vb: Public Function Convert(sourceMember As TDao, context As ResolutionContext) As TProto
  overload: Catalyst.Core.Lib.DAO.DaoBase`2.Convert*
  nameWithType.vb: DaoBase(Of TProto, TDao).Convert(TDao, ResolutionContext)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Catalyst.Core.Lib.DAO.DaoBase(Of TProto, TDao).Convert(TDao, ResolutionContext)
references:
- uid: Catalyst.Core.Lib.DAO
  commentId: N:Catalyst.Core.Lib.DAO
  name: Catalyst.Core.Lib.DAO
  nameWithType: Catalyst.Core.Lib.DAO
  fullName: Catalyst.Core.Lib.DAO
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Catalyst.Abstractions.DAO.IMapperInitializer
  commentId: T:Catalyst.Abstractions.DAO.IMapperInitializer
  parent: Catalyst.Abstractions.DAO
  name: IMapperInitializer
  nameWithType: IMapperInitializer
  fullName: Catalyst.Abstractions.DAO.IMapperInitializer
- uid: IValueConverter{{TProto},{TDao}}
  commentId: '!:IValueConverter{`0,`1}'
  definition: IValueConverter`2
  name: IValueConverter<TProto, TDao>
  nameWithType: IValueConverter<TProto, TDao>
  fullName: IValueConverter<TProto, TDao>
  nameWithType.vb: IValueConverter(Of TProto, TDao)
  fullName.vb: IValueConverter(Of TProto, TDao)
  name.vb: IValueConverter(Of TProto, TDao)
  spec.csharp:
  - uid: IValueConverter`2
    name: IValueConverter
    nameWithType: IValueConverter
    fullName: IValueConverter
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TProto
    nameWithType: TProto
    fullName: TProto
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDao
    nameWithType: TDao
    fullName: TDao
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IValueConverter`2
    name: IValueConverter
    nameWithType: IValueConverter
    fullName: IValueConverter
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TProto
    nameWithType: TProto
    fullName: TProto
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDao
    nameWithType: TDao
    fullName: TDao
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Catalyst.Abstractions.DAO
  commentId: N:Catalyst.Abstractions.DAO
  name: Catalyst.Abstractions.DAO
  nameWithType: Catalyst.Abstractions.DAO
  fullName: Catalyst.Abstractions.DAO
- uid: IValueConverter`2
  isExternal: true
  name: IValueConverter<, >
  nameWithType: IValueConverter<, >
  fullName: IValueConverter<, >
  nameWithType.vb: IValueConverter(Of , )
  fullName.vb: IValueConverter(Of , )
  name.vb: IValueConverter(Of , )
  spec.csharp:
  - uid: IValueConverter`2
    name: IValueConverter
    nameWithType: IValueConverter
    fullName: IValueConverter
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IValueConverter`2
    name: IValueConverter
    nameWithType: IValueConverter
    fullName: IValueConverter
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.DAO.DaoBase`2.Id*
  commentId: Overload:Catalyst.Core.Lib.DAO.DaoBase`2.Id
  name: Id
  nameWithType: DaoBase<TProto, TDao>.Id
  fullName: Catalyst.Core.Lib.DAO.DaoBase<TProto, TDao>.Id
  nameWithType.vb: DaoBase(Of TProto, TDao).Id
  fullName.vb: Catalyst.Core.Lib.DAO.DaoBase(Of TProto, TDao).Id
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Catalyst.Core.Lib.DAO.DaoBase`2.ToProtoBuff*
  commentId: Overload:Catalyst.Core.Lib.DAO.DaoBase`2.ToProtoBuff
  name: ToProtoBuff
  nameWithType: DaoBase<TProto, TDao>.ToProtoBuff
  fullName: Catalyst.Core.Lib.DAO.DaoBase<TProto, TDao>.ToProtoBuff
  nameWithType.vb: DaoBase(Of TProto, TDao).ToProtoBuff
  fullName.vb: Catalyst.Core.Lib.DAO.DaoBase(Of TProto, TDao).ToProtoBuff
- uid: '{TProto}'
  commentId: '!:TProto'
  definition: TProto
  name: TProto
  nameWithType: TProto
  fullName: TProto
- uid: TProto
  name: TProto
  nameWithType: TProto
  fullName: TProto
- uid: Catalyst.Core.Lib.DAO.DaoBase`2.ToDao*
  commentId: Overload:Catalyst.Core.Lib.DAO.DaoBase`2.ToDao
  name: ToDao
  nameWithType: DaoBase<TProto, TDao>.ToDao
  fullName: Catalyst.Core.Lib.DAO.DaoBase<TProto, TDao>.ToDao
  nameWithType.vb: DaoBase(Of TProto, TDao).ToDao
  fullName.vb: Catalyst.Core.Lib.DAO.DaoBase(Of TProto, TDao).ToDao
- uid: '{TDao}'
  commentId: '!:TDao'
  definition: TDao
  name: TDao
  nameWithType: TDao
  fullName: TDao
- uid: TDao
  name: TDao
  nameWithType: TDao
  fullName: TDao
- uid: Catalyst.Core.Lib.DAO.DaoBase`2.InitMappers*
  commentId: Overload:Catalyst.Core.Lib.DAO.DaoBase`2.InitMappers
  name: InitMappers
  nameWithType: DaoBase<TProto, TDao>.InitMappers
  fullName: Catalyst.Core.Lib.DAO.DaoBase<TProto, TDao>.InitMappers
  nameWithType.vb: DaoBase(Of TProto, TDao).InitMappers
  fullName.vb: Catalyst.Core.Lib.DAO.DaoBase(Of TProto, TDao).InitMappers
- uid: IMapperConfigurationExpression
  isExternal: true
  name: IMapperConfigurationExpression
  nameWithType: IMapperConfigurationExpression
  fullName: IMapperConfigurationExpression
- uid: Catalyst.Core.Lib.DAO.DaoBase`2.Convert*
  commentId: Overload:Catalyst.Core.Lib.DAO.DaoBase`2.Convert
  name: Convert
  nameWithType: DaoBase<TProto, TDao>.Convert
  fullName: Catalyst.Core.Lib.DAO.DaoBase<TProto, TDao>.Convert
  nameWithType.vb: DaoBase(Of TProto, TDao).Convert
  fullName.vb: Catalyst.Core.Lib.DAO.DaoBase(Of TProto, TDao).Convert
- uid: ResolutionContext
  isExternal: true
  name: ResolutionContext
  nameWithType: ResolutionContext
  fullName: ResolutionContext
