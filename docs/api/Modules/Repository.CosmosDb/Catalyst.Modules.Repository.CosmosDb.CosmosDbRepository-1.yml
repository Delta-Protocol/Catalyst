### YamlMime:ManagedReference
items:
- uid: Catalyst.Modules.Repository.CosmosDb.CosmosDbRepository`1
  commentId: T:Catalyst.Modules.Repository.CosmosDb.CosmosDbRepository`1
  id: CosmosDbRepository`1
  parent: Catalyst.Modules.Repository.CosmosDb
  children:
  - Catalyst.Modules.Repository.CosmosDb.CosmosDbRepository`1.#ctor(System.String,System.String,System.String,System.Boolean,System.String,ICachingStrategy{`0,System.String})
  - Catalyst.Modules.Repository.CosmosDb.CosmosDbRepository`1.Client
  - Catalyst.Modules.Repository.CosmosDb.CosmosDbRepository`1.Database
  langs:
  - csharp
  - vb
  name: CosmosDbRepository<T>
  nameWithType: CosmosDbRepository<T>
  fullName: Catalyst.Modules.Repository.CosmosDb.CosmosDbRepository<T>
  type: Class
  source:
    remote:
      path: src/Catalyst.Modules.Repository.CosmosDb/CosmosDbRepository.cs
      branch: gh-pages
      repo: https://github.com/catalyst-network/Catalyst.Framework.git
    id: CosmosDbRepository
    path: ../src/Catalyst.Modules.Repository.CosmosDb/CosmosDbRepository.cs
    startLine: 34
  assemblies:
  - Catalyst.Modules.Repository.CosmosDb
  namespace: Catalyst.Modules.Repository.CosmosDb
  syntax:
    content: 'public class CosmosDbRepository<T> : DocumentDbRepository<T, string> where T : class, new()'
    typeParameters:
    - id: T
    content.vb: >-
      Public Class CosmosDbRepository(Of T As {Class, New})

          Inherits DocumentDbRepository(Of T, String)
  inheritance:
  - System.Object
  nameWithType.vb: CosmosDbRepository(Of T)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: Catalyst.Modules.Repository.CosmosDb.CosmosDbRepository(Of T)
  name.vb: CosmosDbRepository(Of T)
- uid: Catalyst.Modules.Repository.CosmosDb.CosmosDbRepository`1.Client
  commentId: P:Catalyst.Modules.Repository.CosmosDb.CosmosDbRepository`1.Client
  id: Client
  parent: Catalyst.Modules.Repository.CosmosDb.CosmosDbRepository`1
  langs:
  - csharp
  - vb
  name: Client
  nameWithType: CosmosDbRepository<T>.Client
  fullName: Catalyst.Modules.Repository.CosmosDb.CosmosDbRepository<T>.Client
  type: Property
  source:
    remote:
      path: src/Catalyst.Modules.Repository.CosmosDb/CosmosDbRepository.cs
      branch: gh-pages
      repo: https://github.com/catalyst-network/Catalyst.Framework.git
    id: Client
    path: ../src/Catalyst.Modules.Repository.CosmosDb/CosmosDbRepository.cs
    startLine: 37
  assemblies:
  - Catalyst.Modules.Repository.CosmosDb
  namespace: Catalyst.Modules.Repository.CosmosDb
  syntax:
    content: public DocumentClient Client { get; }
    parameters: []
    return:
      type: DocumentClient
    content.vb: Public ReadOnly Property Client As DocumentClient
  overload: Catalyst.Modules.Repository.CosmosDb.CosmosDbRepository`1.Client*
  nameWithType.vb: CosmosDbRepository(Of T).Client
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: Catalyst.Modules.Repository.CosmosDb.CosmosDbRepository(Of T).Client
- uid: Catalyst.Modules.Repository.CosmosDb.CosmosDbRepository`1.Database
  commentId: P:Catalyst.Modules.Repository.CosmosDb.CosmosDbRepository`1.Database
  id: Database
  parent: Catalyst.Modules.Repository.CosmosDb.CosmosDbRepository`1
  langs:
  - csharp
  - vb
  name: Database
  nameWithType: CosmosDbRepository<T>.Database
  fullName: Catalyst.Modules.Repository.CosmosDb.CosmosDbRepository<T>.Database
  type: Property
  source:
    remote:
      path: src/Catalyst.Modules.Repository.CosmosDb/CosmosDbRepository.cs
      branch: gh-pages
      repo: https://github.com/catalyst-network/Catalyst.Framework.git
    id: Database
    path: ../src/Catalyst.Modules.Repository.CosmosDb/CosmosDbRepository.cs
    startLine: 39
  assemblies:
  - Catalyst.Modules.Repository.CosmosDb
  namespace: Catalyst.Modules.Repository.CosmosDb
  syntax:
    content: public Database Database { get; }
    parameters: []
    return:
      type: Database
    content.vb: Public ReadOnly Property Database As Database
  overload: Catalyst.Modules.Repository.CosmosDb.CosmosDbRepository`1.Database*
  nameWithType.vb: CosmosDbRepository(Of T).Database
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: Catalyst.Modules.Repository.CosmosDb.CosmosDbRepository(Of T).Database
- uid: Catalyst.Modules.Repository.CosmosDb.CosmosDbRepository`1.#ctor(System.String,System.String,System.String,System.Boolean,System.String,ICachingStrategy{`0,System.String})
  commentId: M:Catalyst.Modules.Repository.CosmosDb.CosmosDbRepository`1.#ctor(System.String,System.String,System.String,System.Boolean,System.String,ICachingStrategy{`0,System.String})
  id: '#ctor(System.String,System.String,System.String,System.Boolean,System.String,ICachingStrategy{`0,System.String})'
  parent: Catalyst.Modules.Repository.CosmosDb.CosmosDbRepository`1
  langs:
  - csharp
  - vb
  name: CosmosDbRepository(String, String, String, Boolean, String, ICachingStrategy<T, String>)
  nameWithType: CosmosDbRepository<T>.CosmosDbRepository(String, String, String, Boolean, String, ICachingStrategy<T, String>)
  fullName: Catalyst.Modules.Repository.CosmosDb.CosmosDbRepository<T>.CosmosDbRepository(System.String, System.String, System.String, System.Boolean, System.String, ICachingStrategy<T, System.String>)
  type: Constructor
  source:
    remote:
      path: src/Catalyst.Modules.Repository.CosmosDb/CosmosDbRepository.cs
      branch: gh-pages
      repo: https://github.com/catalyst-network/Catalyst.Framework.git
    id: .ctor
    path: ../src/Catalyst.Modules.Repository.CosmosDb/CosmosDbRepository.cs
    startLine: 41
  assemblies:
  - Catalyst.Modules.Repository.CosmosDb
  namespace: Catalyst.Modules.Repository.CosmosDb
  syntax:
    content: public CosmosDbRepository(string endpointUrl, string authorizationKey, string databaseId, bool createIfNotExists, string collectionId = null, ICachingStrategy<T, string> cachingStrategy = null)
    parameters:
    - id: endpointUrl
      type: System.String
    - id: authorizationKey
      type: System.String
    - id: databaseId
      type: System.String
    - id: createIfNotExists
      type: System.Boolean
    - id: collectionId
      type: System.String
    - id: cachingStrategy
      type: ICachingStrategy{{T},System.String}
    content.vb: Public Sub New(endpointUrl As String, authorizationKey As String, databaseId As String, createIfNotExists As Boolean, collectionId As String = Nothing, cachingStrategy As ICachingStrategy(Of T, String) = Nothing)
  overload: Catalyst.Modules.Repository.CosmosDb.CosmosDbRepository`1.#ctor*
  nameWithType.vb: CosmosDbRepository(Of T).CosmosDbRepository(String, String, String, Boolean, String, ICachingStrategy(Of T, String))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Catalyst.Modules.Repository.CosmosDb.CosmosDbRepository(Of T).CosmosDbRepository(System.String, System.String, System.String, System.Boolean, System.String, ICachingStrategy(Of T, System.String))
  name.vb: CosmosDbRepository(String, String, String, Boolean, String, ICachingStrategy(Of T, String))
references:
- uid: Catalyst.Modules.Repository.CosmosDb
  commentId: N:Catalyst.Modules.Repository.CosmosDb
  name: Catalyst.Modules.Repository.CosmosDb
  nameWithType: Catalyst.Modules.Repository.CosmosDb
  fullName: Catalyst.Modules.Repository.CosmosDb
- uid: Catalyst.Modules.Repository.CosmosDb.CosmosDbRepository`1.Client*
  commentId: Overload:Catalyst.Modules.Repository.CosmosDb.CosmosDbRepository`1.Client
  name: Client
  nameWithType: CosmosDbRepository<T>.Client
  fullName: Catalyst.Modules.Repository.CosmosDb.CosmosDbRepository<T>.Client
  nameWithType.vb: CosmosDbRepository(Of T).Client
  fullName.vb: Catalyst.Modules.Repository.CosmosDb.CosmosDbRepository(Of T).Client
- uid: DocumentClient
  commentId: '!:DocumentClient'
  isExternal: true
  name: DocumentClient
  nameWithType: DocumentClient
  fullName: DocumentClient
- uid: Catalyst.Modules.Repository.CosmosDb.CosmosDbRepository`1.Database*
  commentId: Overload:Catalyst.Modules.Repository.CosmosDb.CosmosDbRepository`1.Database
  name: Database
  nameWithType: CosmosDbRepository<T>.Database
  fullName: Catalyst.Modules.Repository.CosmosDb.CosmosDbRepository<T>.Database
  nameWithType.vb: CosmosDbRepository(Of T).Database
  fullName.vb: Catalyst.Modules.Repository.CosmosDb.CosmosDbRepository(Of T).Database
- uid: Database
  commentId: '!:Database'
  isExternal: true
  name: Database
  nameWithType: Database
  fullName: Database
- uid: Catalyst.Modules.Repository.CosmosDb.CosmosDbRepository`1.#ctor*
  commentId: Overload:Catalyst.Modules.Repository.CosmosDb.CosmosDbRepository`1.#ctor
  name: CosmosDbRepository
  nameWithType: CosmosDbRepository<T>.CosmosDbRepository
  fullName: Catalyst.Modules.Repository.CosmosDb.CosmosDbRepository<T>.CosmosDbRepository
  nameWithType.vb: CosmosDbRepository(Of T).CosmosDbRepository
  fullName.vb: Catalyst.Modules.Repository.CosmosDb.CosmosDbRepository(Of T).CosmosDbRepository
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: ICachingStrategy{{T},System.String}
  commentId: '!:ICachingStrategy{`0,System.String}'
  definition: ICachingStrategy`2
  name: ICachingStrategy<T, String>
  nameWithType: ICachingStrategy<T, String>
  fullName: ICachingStrategy<T, System.String>
  nameWithType.vb: ICachingStrategy(Of T, String)
  fullName.vb: ICachingStrategy(Of T, System.String)
  name.vb: ICachingStrategy(Of T, String)
  spec.csharp:
  - uid: ICachingStrategy`2
    name: ICachingStrategy
    nameWithType: ICachingStrategy
    fullName: ICachingStrategy
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: ICachingStrategy`2
    name: ICachingStrategy
    nameWithType: ICachingStrategy
    fullName: ICachingStrategy
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: ICachingStrategy`2
  commentId: '!:ICachingStrategy`2'
  isExternal: true
  name: ICachingStrategy<, >
  nameWithType: ICachingStrategy<, >
  fullName: ICachingStrategy<, >
  nameWithType.vb: ICachingStrategy(Of , )
  fullName.vb: ICachingStrategy(Of , )
  name.vb: ICachingStrategy(Of , )
  spec.csharp:
  - uid: ICachingStrategy`2
    name: ICachingStrategy
    nameWithType: ICachingStrategy
    fullName: ICachingStrategy
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: ICachingStrategy`2
    name: ICachingStrategy
    nameWithType: ICachingStrategy
    fullName: ICachingStrategy
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
