### YamlMime:ManagedReference
items:
- uid: Catalyst.Core.Modules.Authentication.Repository.AuthCredentialRepository
  commentId: T:Catalyst.Core.Modules.Authentication.Repository.AuthCredentialRepository
  id: AuthCredentialRepository
  parent: Catalyst.Core.Modules.Authentication.Repository
  children:
  - Catalyst.Core.Modules.Authentication.Repository.AuthCredentialRepository.#ctor(IRepository{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.String})
  langs:
  - csharp
  - vb
  name: AuthCredentialRepository
  nameWithType: AuthCredentialRepository
  fullName: Catalyst.Core.Modules.Authentication.Repository.AuthCredentialRepository
  type: Class
  source:
    remote:
      path: src/Catalyst.Core.Modules.Authentication/Repository/AuthCredentialRepository.cs
      branch: gh-pages
      repo: https://github.com/catalyst-network/Catalyst.Framework.git
    id: AuthCredentialRepository
    path: ../src/Catalyst.Core.Modules.Authentication/Repository/AuthCredentialRepository.cs
    startLine: 29
  assemblies:
  - Catalyst.Core.Modules.Authentication
  namespace: Catalyst.Core.Modules.Authentication.Repository
  syntax:
    content: 'public sealed class AuthCredentialRepository : RepositoryWrapper<AuthCredentials>, IRepositoryWrapper<AuthCredentials>, IAuthCredentialRepository, IRepositoryWrapper<AuthCredentials>'
    content.vb: >-
      Public NotInheritable Class AuthCredentialRepository

          Inherits RepositoryWrapper(Of AuthCredentials)

          Implements IRepositoryWrapper(Of AuthCredentials), IAuthCredentialRepository, IRepositoryWrapper(Of AuthCredentials)
  inheritance:
  - System.Object
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}
  implements:
  - Catalyst.Abstractions.Repository.IRepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}
  - Catalyst.Core.Modules.Authentication.Repository.IAuthCredentialRepository
  - IRepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}
  inheritedMembers:
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Repository
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Conventions
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.EntityType
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.KeyType
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.CachingStrategy
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.CachingEnabled
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.CacheUsed
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.TraceInfo
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.GenerateKeyOnAdd
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Add(Catalyst.Core.Modules.Authentication.Models.AuthCredentials)
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Add(System.Collections.Generic.IEnumerable{Catalyst.Core.Modules.Authentication.Models.AuthCredentials})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.AsQueryable
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Average(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Int32}})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Average(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Int32}})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Average(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Int32}})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Average(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Nullable{System.Int32}}})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Average(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Nullable{System.Int32}}})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Average(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Nullable{System.Int32}}})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Average(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Int64}})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Average(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Int64}})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Average(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Int64}})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Average(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Nullable{System.Int64}}})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Average(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Nullable{System.Int64}}})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Average(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Nullable{System.Int64}}})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Average(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Decimal}})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Average(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Decimal}})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Average(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Decimal}})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Average(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Nullable{System.Decimal}}})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Average(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Nullable{System.Decimal}}})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Average(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Nullable{System.Decimal}}})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Average(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Double}})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Average(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Double}})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Average(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Double}})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Average(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Nullable{System.Double}}})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Average(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Nullable{System.Double}}})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Average(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Nullable{System.Double}}})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Average(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Single}})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Average(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Single}})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Average(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Single}})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Average(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Nullable{System.Single}}})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Average(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Nullable{System.Single}}})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Average(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Nullable{System.Single}}})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.BeginBatch
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.ClearCache
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Count
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Count(ISpecification{`0})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Count(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Boolean}})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Delete(System.String)
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Delete(System.Collections.Generic.IEnumerable{System.String})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Delete(System.String[])
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Delete(Catalyst.Core.Modules.Authentication.Models.AuthCredentials)
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Delete(System.Collections.Generic.IEnumerable{Catalyst.Core.Modules.Authentication.Models.AuthCredentials})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Delete(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Boolean}})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Delete(ISpecification{`0})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.DisableCaching
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Dispose
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Exists(System.String)
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Exists(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Boolean}})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Exists(ISpecification{`0})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Find(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Boolean}},IQueryOptions{`0})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Find``1(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,{TResult}}},IQueryOptions{`0})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Find(ISpecification{`0},IQueryOptions{`0})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Find``1(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,{TResult}}},IQueryOptions{`0})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.FindAll(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Boolean}},IQueryOptions{`0})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.FindAll``1(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,{TResult}}},IQueryOptions{`0})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.FindAll(ISpecification{`0},IQueryOptions{`0})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.FindAll``1(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,{TResult}}},IQueryOptions{`0})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Get(System.String)
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Get(System.String,IFetchStrategy{`0})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Get(System.String,System.String[])
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Get(System.String,System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Object}}[])
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Get``1(System.String,System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,{TResult}}})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Get``1(System.String,System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,{TResult}}},IFetchStrategy{`0})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Get``1(System.String,System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,{TResult}}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Object}}[])
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Get``1(System.String,System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,{TResult}}},System.String[])
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.GetAll
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.GetAll(IFetchStrategy{`0})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.GetAll(System.String[])
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.GetAll(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Object}}[])
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.GetAll(IQueryOptions{`0})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.GetAll(IQueryOptions{`0},IFetchStrategy{`0})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.GetAll(IQueryOptions{`0},System.String[])
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.GetAll(IQueryOptions{`0},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Object}}[])
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.GetAll``1(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,{TResult}}})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.GetAll``1(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,{TResult}}},IQueryOptions{`0})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.GetAll``1(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,{TResult}}},IFetchStrategy{`0})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.GetAll``1(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,{TResult}}},System.String[])
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.GetAll``1(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,{TResult}}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Object}}[])
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.GetAll``1(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,{TResult}}},IQueryOptions{`0},IFetchStrategy{`0})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.GetAll``1(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,{TResult}}},IQueryOptions{`0},System.String[])
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.GetAll``1(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,{TResult}}},IQueryOptions{`0},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Object}}[])
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.GetMany(System.String[])
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.GetMany(System.Collections.Generic.IEnumerable{System.String})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.GetMany(System.Collections.Generic.IEnumerable{System.String},IFetchStrategy{`0})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.GetMany``1(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,{TResult}}},System.String[])
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.GetMany``1(System.Collections.Generic.IEnumerable{System.String},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,{TResult}}})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.GetManyAsDictionary(System.String[])
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.GetManyAsDictionary(System.Collections.Generic.IEnumerable{System.String})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.GetManyAsDictionary(System.Collections.Generic.IEnumerable{System.String},IFetchStrategy{`0})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.GetPrimaryKey(Catalyst.Core.Modules.Authentication.Models.AuthCredentials)
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.GroupBy``2(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,{TGroupKey}}},System.Linq.Expressions.Expression{System.Func{System.Linq.IGrouping{{TGroupKey},Catalyst.Core.Modules.Authentication.Models.AuthCredentials},{TResult}}})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.GroupBy``2(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,{TGroupKey}}},System.Linq.Expressions.Expression{System.Func{System.Linq.IGrouping{{TGroupKey},Catalyst.Core.Modules.Authentication.Models.AuthCredentials},{TResult}}})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.GroupBy``2(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,{TGroupKey}}},System.Linq.Expressions.Expression{System.Func{System.Linq.IGrouping{{TGroupKey},Catalyst.Core.Modules.Authentication.Models.AuthCredentials},{TResult}}})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.GroupCount``1(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,{TGroupKey}}})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.GroupCount``1(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,{TGroupKey}}})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.GroupCount``1(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,{TGroupKey}}})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.GroupLongCount``1(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,{TGroupKey}}})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.GroupLongCount``1(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,{TGroupKey}}})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.GroupLongCount``1(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,{TGroupKey}}})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Join``3(IRepositoryQueryable{`0},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,{TJoinKey}}},System.Linq.Expressions.Expression{System.Func{{TInner},{TJoinKey}}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,{TInner},{TResult}}})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.LongCount
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.LongCount(ISpecification{`0})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.LongCount(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Boolean}})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Max``1(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,{TResult}}})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Max``1(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,{TResult}}})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Max``1(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,{TResult}}})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Min``1(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,{TResult}}})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Min``1(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,{TResult}}})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Min``1(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,{TResult}}})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Sum(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Int32}})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Sum(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Int32}})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Sum(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Int32}})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Sum(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Nullable{System.Int32}}})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Sum(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Nullable{System.Int32}}})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Sum(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Nullable{System.Int32}}})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Sum(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Int64}})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Sum(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Int64}})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Sum(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Int64}})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Sum(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Nullable{System.Int64}}})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Sum(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Nullable{System.Int64}}})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Sum(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Nullable{System.Int64}}})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Sum(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Decimal}})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Sum(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Decimal}})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Sum(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Decimal}})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Sum(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Nullable{System.Decimal}}})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Sum(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Nullable{System.Decimal}}})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Sum(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Nullable{System.Decimal}}})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Sum(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Double}})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Sum(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Double}})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Sum(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Double}})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Sum(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Nullable{System.Double}}})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Sum(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Nullable{System.Double}}})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Sum(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Nullable{System.Double}}})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Sum(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Single}})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Sum(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Single}})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Sum(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Single}})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Sum(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Nullable{System.Single}}})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Sum(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Nullable{System.Single}}})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Sum(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Nullable{System.Single}}})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.TryFind(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Boolean}},Catalyst.Core.Modules.Authentication.Models.AuthCredentials@)
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.TryFind(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Boolean}},IQueryOptions{`0},Catalyst.Core.Modules.Authentication.Models.AuthCredentials@)
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.TryFind``1(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,{TResult}}},{TResult}@)
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.TryFind``1(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,{TResult}}},IQueryOptions{`0},{TResult}@)
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.TryFind(ISpecification{`0},Catalyst.Core.Modules.Authentication.Models.AuthCredentials@)
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.TryFind(ISpecification{`0},IQueryOptions{`0},Catalyst.Core.Modules.Authentication.Models.AuthCredentials@)
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.TryFind``1(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,{TResult}}},{TResult}@)
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.TryFind``1(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,{TResult}}},IQueryOptions{`0},{TResult}@)
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.TryGet(System.String,Catalyst.Core.Modules.Authentication.Models.AuthCredentials@)
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.TryGet``1(System.String,System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,{TResult}}},{TResult}@)
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Update(Catalyst.Core.Modules.Authentication.Models.AuthCredentials)
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Update(System.Collections.Generic.IEnumerable{Catalyst.Core.Modules.Authentication.Models.AuthCredentials})
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: Catalyst.Core.Modules.Authentication.Repository.AuthCredentialRepository.#ctor(IRepository{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.String})
  commentId: M:Catalyst.Core.Modules.Authentication.Repository.AuthCredentialRepository.#ctor(IRepository{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.String})
  id: '#ctor(IRepository{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.String})'
  parent: Catalyst.Core.Modules.Authentication.Repository.AuthCredentialRepository
  langs:
  - csharp
  - vb
  name: AuthCredentialRepository(IRepository<AuthCredentials, String>)
  nameWithType: AuthCredentialRepository.AuthCredentialRepository(IRepository<AuthCredentials, String>)
  fullName: Catalyst.Core.Modules.Authentication.Repository.AuthCredentialRepository.AuthCredentialRepository(IRepository<Catalyst.Core.Modules.Authentication.Models.AuthCredentials, System.String>)
  type: Constructor
  source:
    remote:
      path: src/Catalyst.Core.Modules.Authentication/Repository/AuthCredentialRepository.cs
      branch: gh-pages
      repo: https://github.com/catalyst-network/Catalyst.Framework.git
    id: .ctor
    path: ../src/Catalyst.Core.Modules.Authentication/Repository/AuthCredentialRepository.cs
    startLine: 31
  assemblies:
  - Catalyst.Core.Modules.Authentication
  namespace: Catalyst.Core.Modules.Authentication.Repository
  syntax:
    content: public AuthCredentialRepository(IRepository<AuthCredentials, string> repository)
    parameters:
    - id: repository
      type: IRepository{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.String}
    content.vb: Public Sub New(repository As IRepository(Of AuthCredentials, String))
  overload: Catalyst.Core.Modules.Authentication.Repository.AuthCredentialRepository.#ctor*
  nameWithType.vb: AuthCredentialRepository.AuthCredentialRepository(IRepository(Of AuthCredentials, String))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Catalyst.Core.Modules.Authentication.Repository.AuthCredentialRepository.AuthCredentialRepository(IRepository(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials, System.String))
  name.vb: AuthCredentialRepository(IRepository(Of AuthCredentials, String))
references:
- uid: Catalyst.Core.Modules.Authentication.Repository
  commentId: N:Catalyst.Core.Modules.Authentication.Repository
  name: Catalyst.Core.Modules.Authentication.Repository
  nameWithType: Catalyst.Core.Modules.Authentication.Repository
  fullName: Catalyst.Core.Modules.Authentication.Repository
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}
  commentId: T:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}
  parent: Catalyst.Core.Lib.Repository
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1
  name: RepositoryWrapper<AuthCredentials>
  nameWithType: RepositoryWrapper<AuthCredentials>
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>
  nameWithType.vb: RepositoryWrapper(Of AuthCredentials)
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials)
  name.vb: RepositoryWrapper(Of AuthCredentials)
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1
    name: RepositoryWrapper
    nameWithType: RepositoryWrapper
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1
    name: RepositoryWrapper
    nameWithType: RepositoryWrapper
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Abstractions.Repository.IRepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}
  commentId: '!:Catalyst.Abstractions.Repository.IRepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}'
  definition: Catalyst.Abstractions.Repository.IRepositoryWrapper`1
  name: IRepositoryWrapper<AuthCredentials>
  nameWithType: IRepositoryWrapper<AuthCredentials>
  fullName: Catalyst.Abstractions.Repository.IRepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>
  nameWithType.vb: IRepositoryWrapper(Of AuthCredentials)
  fullName.vb: Catalyst.Abstractions.Repository.IRepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials)
  name.vb: IRepositoryWrapper(Of AuthCredentials)
  spec.csharp:
  - uid: Catalyst.Abstractions.Repository.IRepositoryWrapper`1
    name: IRepositoryWrapper
    nameWithType: IRepositoryWrapper
    fullName: Catalyst.Abstractions.Repository.IRepositoryWrapper
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Catalyst.Abstractions.Repository.IRepositoryWrapper`1
    name: IRepositoryWrapper
    nameWithType: IRepositoryWrapper
    fullName: Catalyst.Abstractions.Repository.IRepositoryWrapper
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Modules.Authentication.Repository.IAuthCredentialRepository
  commentId: T:Catalyst.Core.Modules.Authentication.Repository.IAuthCredentialRepository
  parent: Catalyst.Core.Modules.Authentication.Repository
  name: IAuthCredentialRepository
  nameWithType: IAuthCredentialRepository
  fullName: Catalyst.Core.Modules.Authentication.Repository.IAuthCredentialRepository
- uid: IRepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}
  commentId: '!:IRepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}'
  definition: IRepositoryWrapper`1
  name: IRepositoryWrapper<AuthCredentials>
  nameWithType: IRepositoryWrapper<AuthCredentials>
  fullName: IRepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>
  nameWithType.vb: IRepositoryWrapper(Of AuthCredentials)
  fullName.vb: IRepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials)
  name.vb: IRepositoryWrapper(Of AuthCredentials)
  spec.csharp:
  - uid: IRepositoryWrapper`1
    name: IRepositoryWrapper
    nameWithType: IRepositoryWrapper
    fullName: IRepositoryWrapper
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IRepositoryWrapper`1
    name: IRepositoryWrapper
    nameWithType: IRepositoryWrapper
    fullName: IRepositoryWrapper
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Repository
  commentId: F:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Repository
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Repository
  name: Repository
  nameWithType: RepositoryWrapper<AuthCredentials>.Repository
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.Repository
  nameWithType.vb: RepositoryWrapper(Of AuthCredentials).Repository
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).Repository
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Conventions
  commentId: P:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Conventions
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Conventions
  name: Conventions
  nameWithType: RepositoryWrapper<AuthCredentials>.Conventions
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.Conventions
  nameWithType.vb: RepositoryWrapper(Of AuthCredentials).Conventions
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).Conventions
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.EntityType
  commentId: P:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.EntityType
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.EntityType
  name: EntityType
  nameWithType: RepositoryWrapper<AuthCredentials>.EntityType
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.EntityType
  nameWithType.vb: RepositoryWrapper(Of AuthCredentials).EntityType
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).EntityType
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.KeyType
  commentId: P:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.KeyType
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.KeyType
  name: KeyType
  nameWithType: RepositoryWrapper<AuthCredentials>.KeyType
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.KeyType
  nameWithType.vb: RepositoryWrapper(Of AuthCredentials).KeyType
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).KeyType
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.CachingStrategy
  commentId: P:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.CachingStrategy
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.CachingStrategy
  name: CachingStrategy
  nameWithType: RepositoryWrapper<AuthCredentials>.CachingStrategy
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.CachingStrategy
  nameWithType.vb: RepositoryWrapper(Of AuthCredentials).CachingStrategy
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).CachingStrategy
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.CachingEnabled
  commentId: P:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.CachingEnabled
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.CachingEnabled
  name: CachingEnabled
  nameWithType: RepositoryWrapper<AuthCredentials>.CachingEnabled
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.CachingEnabled
  nameWithType.vb: RepositoryWrapper(Of AuthCredentials).CachingEnabled
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).CachingEnabled
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.CacheUsed
  commentId: P:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.CacheUsed
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.CacheUsed
  name: CacheUsed
  nameWithType: RepositoryWrapper<AuthCredentials>.CacheUsed
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.CacheUsed
  nameWithType.vb: RepositoryWrapper(Of AuthCredentials).CacheUsed
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).CacheUsed
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.TraceInfo
  commentId: P:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.TraceInfo
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.TraceInfo
  name: TraceInfo
  nameWithType: RepositoryWrapper<AuthCredentials>.TraceInfo
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.TraceInfo
  nameWithType.vb: RepositoryWrapper(Of AuthCredentials).TraceInfo
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).TraceInfo
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.GenerateKeyOnAdd
  commentId: P:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.GenerateKeyOnAdd
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GenerateKeyOnAdd
  name: GenerateKeyOnAdd
  nameWithType: RepositoryWrapper<AuthCredentials>.GenerateKeyOnAdd
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.GenerateKeyOnAdd
  nameWithType.vb: RepositoryWrapper(Of AuthCredentials).GenerateKeyOnAdd
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).GenerateKeyOnAdd
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Add(Catalyst.Core.Modules.Authentication.Models.AuthCredentials)
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Add(Catalyst.Core.Modules.Authentication.Models.AuthCredentials)
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Add(`0)
  name: Add(AuthCredentials)
  nameWithType: RepositoryWrapper<AuthCredentials>.Add(AuthCredentials)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.Add(Catalyst.Core.Modules.Authentication.Models.AuthCredentials)
  nameWithType.vb: RepositoryWrapper(Of AuthCredentials).Add(AuthCredentials)
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).Add(Catalyst.Core.Modules.Authentication.Models.AuthCredentials)
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Add(`0)
    name: Add
    nameWithType: RepositoryWrapper<AuthCredentials>.Add
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.Add
  - name: (
    nameWithType: (
    fullName: (
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Add(`0)
    name: Add
    nameWithType: RepositoryWrapper(Of AuthCredentials).Add
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).Add
  - name: (
    nameWithType: (
    fullName: (
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Add(System.Collections.Generic.IEnumerable{Catalyst.Core.Modules.Authentication.Models.AuthCredentials})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Add(System.Collections.Generic.IEnumerable{Catalyst.Core.Modules.Authentication.Models.AuthCredentials})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Add(System.Collections.Generic.IEnumerable{`0})
  name: Add(IEnumerable<AuthCredentials>)
  nameWithType: RepositoryWrapper<AuthCredentials>.Add(IEnumerable<AuthCredentials>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.Add(System.Collections.Generic.IEnumerable<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>)
  nameWithType.vb: RepositoryWrapper(Of AuthCredentials).Add(IEnumerable(Of AuthCredentials))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).Add(System.Collections.Generic.IEnumerable(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials))
  name.vb: Add(IEnumerable(Of AuthCredentials))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Add(System.Collections.Generic.IEnumerable{`0})
    name: Add
    nameWithType: RepositoryWrapper<AuthCredentials>.Add
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.Add
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Add(System.Collections.Generic.IEnumerable{`0})
    name: Add
    nameWithType: RepositoryWrapper(Of AuthCredentials).Add
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).Add
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.AsQueryable
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.AsQueryable
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.AsQueryable
  name: AsQueryable()
  nameWithType: RepositoryWrapper<AuthCredentials>.AsQueryable()
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.AsQueryable()
  nameWithType.vb: RepositoryWrapper(Of AuthCredentials).AsQueryable()
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).AsQueryable()
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.AsQueryable
    name: AsQueryable
    nameWithType: RepositoryWrapper<AuthCredentials>.AsQueryable
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.AsQueryable
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.AsQueryable
    name: AsQueryable
    nameWithType: RepositoryWrapper(Of AuthCredentials).AsQueryable
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).AsQueryable
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Average(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Int32}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Average(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Int32}})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Int32}})
  name: Average(Expression<Func<AuthCredentials, Int32>>)
  nameWithType: RepositoryWrapper<AuthCredentials>.Average(Expression<Func<AuthCredentials, Int32>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.Average(System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Authentication.Models.AuthCredentials, System.Int32>>)
  nameWithType.vb: RepositoryWrapper(Of AuthCredentials).Average(Expression(Of Func(Of AuthCredentials, Int32)))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).Average(System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials, System.Int32)))
  name.vb: Average(Expression(Of Func(Of AuthCredentials, Int32)))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Int32}})
    name: Average
    nameWithType: RepositoryWrapper<AuthCredentials>.Average
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.Average
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Int32}})
    name: Average
    nameWithType: RepositoryWrapper(Of AuthCredentials).Average
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).Average
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Average(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Int32}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Average(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Int32}})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Int32}})
  name: Average(ISpecification<>, Expression<Func<AuthCredentials, Int32>>)
  nameWithType: RepositoryWrapper<AuthCredentials>.Average(ISpecification<>, Expression<Func<AuthCredentials, Int32>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.Average(ISpecification<>, System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Authentication.Models.AuthCredentials, System.Int32>>)
  nameWithType.vb: RepositoryWrapper(Of AuthCredentials).Average(ISpecification(Of ), Expression(Of Func(Of AuthCredentials, Int32)))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).Average(ISpecification(Of ), System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials, System.Int32)))
  name.vb: Average(ISpecification(Of ), Expression(Of Func(Of AuthCredentials, Int32)))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Int32}})
    name: Average
    nameWithType: RepositoryWrapper<AuthCredentials>.Average
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.Average
  - name: (
    nameWithType: (
    fullName: (
  - uid: ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Int32}})
    name: Average
    nameWithType: RepositoryWrapper(Of AuthCredentials).Average
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).Average
  - name: (
    nameWithType: (
    fullName: (
  - uid: ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Average(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Int32}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Average(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Int32}})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Int32}})
  name: Average(Expression<Func<AuthCredentials, Boolean>>, Expression<Func<AuthCredentials, Int32>>)
  nameWithType: RepositoryWrapper<AuthCredentials>.Average(Expression<Func<AuthCredentials, Boolean>>, Expression<Func<AuthCredentials, Int32>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.Average(System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Authentication.Models.AuthCredentials, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Authentication.Models.AuthCredentials, System.Int32>>)
  nameWithType.vb: RepositoryWrapper(Of AuthCredentials).Average(Expression(Of Func(Of AuthCredentials, Boolean)), Expression(Of Func(Of AuthCredentials, Int32)))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).Average(System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials, System.Int32)))
  name.vb: Average(Expression(Of Func(Of AuthCredentials, Boolean)), Expression(Of Func(Of AuthCredentials, Int32)))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Int32}})
    name: Average
    nameWithType: RepositoryWrapper<AuthCredentials>.Average
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.Average
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Int32}})
    name: Average
    nameWithType: RepositoryWrapper(Of AuthCredentials).Average
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).Average
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Average(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Nullable{System.Int32}}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Average(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Nullable{System.Int32}}})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int32}}})
  name: Average(Expression<Func<AuthCredentials, Nullable<Int32>>>)
  nameWithType: RepositoryWrapper<AuthCredentials>.Average(Expression<Func<AuthCredentials, Nullable<Int32>>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.Average(System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Authentication.Models.AuthCredentials, System.Nullable<System.Int32>>>)
  nameWithType.vb: RepositoryWrapper(Of AuthCredentials).Average(Expression(Of Func(Of AuthCredentials, Nullable(Of Int32))))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).Average(System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials, System.Nullable(Of System.Int32))))
  name.vb: Average(Expression(Of Func(Of AuthCredentials, Nullable(Of Int32))))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int32}}})
    name: Average
    nameWithType: RepositoryWrapper<AuthCredentials>.Average
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.Average
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int32}}})
    name: Average
    nameWithType: RepositoryWrapper(Of AuthCredentials).Average
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).Average
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Average(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Nullable{System.Int32}}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Average(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Nullable{System.Int32}}})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int32}}})
  name: Average(ISpecification<>, Expression<Func<AuthCredentials, Nullable<Int32>>>)
  nameWithType: RepositoryWrapper<AuthCredentials>.Average(ISpecification<>, Expression<Func<AuthCredentials, Nullable<Int32>>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.Average(ISpecification<>, System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Authentication.Models.AuthCredentials, System.Nullable<System.Int32>>>)
  nameWithType.vb: RepositoryWrapper(Of AuthCredentials).Average(ISpecification(Of ), Expression(Of Func(Of AuthCredentials, Nullable(Of Int32))))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).Average(ISpecification(Of ), System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials, System.Nullable(Of System.Int32))))
  name.vb: Average(ISpecification(Of ), Expression(Of Func(Of AuthCredentials, Nullable(Of Int32))))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int32}}})
    name: Average
    nameWithType: RepositoryWrapper<AuthCredentials>.Average
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.Average
  - name: (
    nameWithType: (
    fullName: (
  - uid: ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int32}}})
    name: Average
    nameWithType: RepositoryWrapper(Of AuthCredentials).Average
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).Average
  - name: (
    nameWithType: (
    fullName: (
  - uid: ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Average(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Nullable{System.Int32}}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Average(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Nullable{System.Int32}}})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int32}}})
  name: Average(Expression<Func<AuthCredentials, Boolean>>, Expression<Func<AuthCredentials, Nullable<Int32>>>)
  nameWithType: RepositoryWrapper<AuthCredentials>.Average(Expression<Func<AuthCredentials, Boolean>>, Expression<Func<AuthCredentials, Nullable<Int32>>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.Average(System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Authentication.Models.AuthCredentials, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Authentication.Models.AuthCredentials, System.Nullable<System.Int32>>>)
  nameWithType.vb: RepositoryWrapper(Of AuthCredentials).Average(Expression(Of Func(Of AuthCredentials, Boolean)), Expression(Of Func(Of AuthCredentials, Nullable(Of Int32))))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).Average(System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials, System.Nullable(Of System.Int32))))
  name.vb: Average(Expression(Of Func(Of AuthCredentials, Boolean)), Expression(Of Func(Of AuthCredentials, Nullable(Of Int32))))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int32}}})
    name: Average
    nameWithType: RepositoryWrapper<AuthCredentials>.Average
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.Average
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int32}}})
    name: Average
    nameWithType: RepositoryWrapper(Of AuthCredentials).Average
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).Average
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Average(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Int64}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Average(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Int64}})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Int64}})
  name: Average(Expression<Func<AuthCredentials, Int64>>)
  nameWithType: RepositoryWrapper<AuthCredentials>.Average(Expression<Func<AuthCredentials, Int64>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.Average(System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Authentication.Models.AuthCredentials, System.Int64>>)
  nameWithType.vb: RepositoryWrapper(Of AuthCredentials).Average(Expression(Of Func(Of AuthCredentials, Int64)))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).Average(System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials, System.Int64)))
  name.vb: Average(Expression(Of Func(Of AuthCredentials, Int64)))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Int64}})
    name: Average
    nameWithType: RepositoryWrapper<AuthCredentials>.Average
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.Average
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Int64}})
    name: Average
    nameWithType: RepositoryWrapper(Of AuthCredentials).Average
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).Average
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Average(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Int64}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Average(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Int64}})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Int64}})
  name: Average(ISpecification<>, Expression<Func<AuthCredentials, Int64>>)
  nameWithType: RepositoryWrapper<AuthCredentials>.Average(ISpecification<>, Expression<Func<AuthCredentials, Int64>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.Average(ISpecification<>, System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Authentication.Models.AuthCredentials, System.Int64>>)
  nameWithType.vb: RepositoryWrapper(Of AuthCredentials).Average(ISpecification(Of ), Expression(Of Func(Of AuthCredentials, Int64)))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).Average(ISpecification(Of ), System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials, System.Int64)))
  name.vb: Average(ISpecification(Of ), Expression(Of Func(Of AuthCredentials, Int64)))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Int64}})
    name: Average
    nameWithType: RepositoryWrapper<AuthCredentials>.Average
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.Average
  - name: (
    nameWithType: (
    fullName: (
  - uid: ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Int64}})
    name: Average
    nameWithType: RepositoryWrapper(Of AuthCredentials).Average
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).Average
  - name: (
    nameWithType: (
    fullName: (
  - uid: ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Average(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Int64}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Average(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Int64}})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Int64}})
  name: Average(Expression<Func<AuthCredentials, Boolean>>, Expression<Func<AuthCredentials, Int64>>)
  nameWithType: RepositoryWrapper<AuthCredentials>.Average(Expression<Func<AuthCredentials, Boolean>>, Expression<Func<AuthCredentials, Int64>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.Average(System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Authentication.Models.AuthCredentials, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Authentication.Models.AuthCredentials, System.Int64>>)
  nameWithType.vb: RepositoryWrapper(Of AuthCredentials).Average(Expression(Of Func(Of AuthCredentials, Boolean)), Expression(Of Func(Of AuthCredentials, Int64)))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).Average(System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials, System.Int64)))
  name.vb: Average(Expression(Of Func(Of AuthCredentials, Boolean)), Expression(Of Func(Of AuthCredentials, Int64)))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Int64}})
    name: Average
    nameWithType: RepositoryWrapper<AuthCredentials>.Average
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.Average
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Int64}})
    name: Average
    nameWithType: RepositoryWrapper(Of AuthCredentials).Average
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).Average
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Average(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Nullable{System.Int64}}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Average(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Nullable{System.Int64}}})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int64}}})
  name: Average(Expression<Func<AuthCredentials, Nullable<Int64>>>)
  nameWithType: RepositoryWrapper<AuthCredentials>.Average(Expression<Func<AuthCredentials, Nullable<Int64>>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.Average(System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Authentication.Models.AuthCredentials, System.Nullable<System.Int64>>>)
  nameWithType.vb: RepositoryWrapper(Of AuthCredentials).Average(Expression(Of Func(Of AuthCredentials, Nullable(Of Int64))))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).Average(System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials, System.Nullable(Of System.Int64))))
  name.vb: Average(Expression(Of Func(Of AuthCredentials, Nullable(Of Int64))))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int64}}})
    name: Average
    nameWithType: RepositoryWrapper<AuthCredentials>.Average
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.Average
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int64}}})
    name: Average
    nameWithType: RepositoryWrapper(Of AuthCredentials).Average
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).Average
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Average(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Nullable{System.Int64}}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Average(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Nullable{System.Int64}}})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int64}}})
  name: Average(ISpecification<>, Expression<Func<AuthCredentials, Nullable<Int64>>>)
  nameWithType: RepositoryWrapper<AuthCredentials>.Average(ISpecification<>, Expression<Func<AuthCredentials, Nullable<Int64>>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.Average(ISpecification<>, System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Authentication.Models.AuthCredentials, System.Nullable<System.Int64>>>)
  nameWithType.vb: RepositoryWrapper(Of AuthCredentials).Average(ISpecification(Of ), Expression(Of Func(Of AuthCredentials, Nullable(Of Int64))))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).Average(ISpecification(Of ), System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials, System.Nullable(Of System.Int64))))
  name.vb: Average(ISpecification(Of ), Expression(Of Func(Of AuthCredentials, Nullable(Of Int64))))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int64}}})
    name: Average
    nameWithType: RepositoryWrapper<AuthCredentials>.Average
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.Average
  - name: (
    nameWithType: (
    fullName: (
  - uid: ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int64}}})
    name: Average
    nameWithType: RepositoryWrapper(Of AuthCredentials).Average
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).Average
  - name: (
    nameWithType: (
    fullName: (
  - uid: ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Average(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Nullable{System.Int64}}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Average(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Nullable{System.Int64}}})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int64}}})
  name: Average(Expression<Func<AuthCredentials, Boolean>>, Expression<Func<AuthCredentials, Nullable<Int64>>>)
  nameWithType: RepositoryWrapper<AuthCredentials>.Average(Expression<Func<AuthCredentials, Boolean>>, Expression<Func<AuthCredentials, Nullable<Int64>>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.Average(System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Authentication.Models.AuthCredentials, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Authentication.Models.AuthCredentials, System.Nullable<System.Int64>>>)
  nameWithType.vb: RepositoryWrapper(Of AuthCredentials).Average(Expression(Of Func(Of AuthCredentials, Boolean)), Expression(Of Func(Of AuthCredentials, Nullable(Of Int64))))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).Average(System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials, System.Nullable(Of System.Int64))))
  name.vb: Average(Expression(Of Func(Of AuthCredentials, Boolean)), Expression(Of Func(Of AuthCredentials, Nullable(Of Int64))))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int64}}})
    name: Average
    nameWithType: RepositoryWrapper<AuthCredentials>.Average
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.Average
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int64}}})
    name: Average
    nameWithType: RepositoryWrapper(Of AuthCredentials).Average
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).Average
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Average(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Decimal}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Average(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Decimal}})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}})
  name: Average(Expression<Func<AuthCredentials, Decimal>>)
  nameWithType: RepositoryWrapper<AuthCredentials>.Average(Expression<Func<AuthCredentials, Decimal>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.Average(System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Authentication.Models.AuthCredentials, System.Decimal>>)
  nameWithType.vb: RepositoryWrapper(Of AuthCredentials).Average(Expression(Of Func(Of AuthCredentials, Decimal)))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).Average(System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials, System.Decimal)))
  name.vb: Average(Expression(Of Func(Of AuthCredentials, Decimal)))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}})
    name: Average
    nameWithType: RepositoryWrapper<AuthCredentials>.Average
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.Average
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}})
    name: Average
    nameWithType: RepositoryWrapper(Of AuthCredentials).Average
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).Average
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Average(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Decimal}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Average(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Decimal}})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}})
  name: Average(ISpecification<>, Expression<Func<AuthCredentials, Decimal>>)
  nameWithType: RepositoryWrapper<AuthCredentials>.Average(ISpecification<>, Expression<Func<AuthCredentials, Decimal>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.Average(ISpecification<>, System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Authentication.Models.AuthCredentials, System.Decimal>>)
  nameWithType.vb: RepositoryWrapper(Of AuthCredentials).Average(ISpecification(Of ), Expression(Of Func(Of AuthCredentials, Decimal)))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).Average(ISpecification(Of ), System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials, System.Decimal)))
  name.vb: Average(ISpecification(Of ), Expression(Of Func(Of AuthCredentials, Decimal)))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}})
    name: Average
    nameWithType: RepositoryWrapper<AuthCredentials>.Average
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.Average
  - name: (
    nameWithType: (
    fullName: (
  - uid: ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}})
    name: Average
    nameWithType: RepositoryWrapper(Of AuthCredentials).Average
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).Average
  - name: (
    nameWithType: (
    fullName: (
  - uid: ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Average(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Decimal}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Average(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Decimal}})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}})
  name: Average(Expression<Func<AuthCredentials, Boolean>>, Expression<Func<AuthCredentials, Decimal>>)
  nameWithType: RepositoryWrapper<AuthCredentials>.Average(Expression<Func<AuthCredentials, Boolean>>, Expression<Func<AuthCredentials, Decimal>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.Average(System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Authentication.Models.AuthCredentials, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Authentication.Models.AuthCredentials, System.Decimal>>)
  nameWithType.vb: RepositoryWrapper(Of AuthCredentials).Average(Expression(Of Func(Of AuthCredentials, Boolean)), Expression(Of Func(Of AuthCredentials, Decimal)))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).Average(System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials, System.Decimal)))
  name.vb: Average(Expression(Of Func(Of AuthCredentials, Boolean)), Expression(Of Func(Of AuthCredentials, Decimal)))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}})
    name: Average
    nameWithType: RepositoryWrapper<AuthCredentials>.Average
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.Average
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}})
    name: Average
    nameWithType: RepositoryWrapper(Of AuthCredentials).Average
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).Average
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Average(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Nullable{System.Decimal}}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Average(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Nullable{System.Decimal}}})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Decimal}}})
  name: Average(Expression<Func<AuthCredentials, Nullable<Decimal>>>)
  nameWithType: RepositoryWrapper<AuthCredentials>.Average(Expression<Func<AuthCredentials, Nullable<Decimal>>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.Average(System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Authentication.Models.AuthCredentials, System.Nullable<System.Decimal>>>)
  nameWithType.vb: RepositoryWrapper(Of AuthCredentials).Average(Expression(Of Func(Of AuthCredentials, Nullable(Of Decimal))))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).Average(System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials, System.Nullable(Of System.Decimal))))
  name.vb: Average(Expression(Of Func(Of AuthCredentials, Nullable(Of Decimal))))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Decimal}}})
    name: Average
    nameWithType: RepositoryWrapper<AuthCredentials>.Average
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.Average
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Decimal}}})
    name: Average
    nameWithType: RepositoryWrapper(Of AuthCredentials).Average
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).Average
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Average(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Nullable{System.Decimal}}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Average(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Nullable{System.Decimal}}})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Decimal}}})
  name: Average(ISpecification<>, Expression<Func<AuthCredentials, Nullable<Decimal>>>)
  nameWithType: RepositoryWrapper<AuthCredentials>.Average(ISpecification<>, Expression<Func<AuthCredentials, Nullable<Decimal>>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.Average(ISpecification<>, System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Authentication.Models.AuthCredentials, System.Nullable<System.Decimal>>>)
  nameWithType.vb: RepositoryWrapper(Of AuthCredentials).Average(ISpecification(Of ), Expression(Of Func(Of AuthCredentials, Nullable(Of Decimal))))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).Average(ISpecification(Of ), System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials, System.Nullable(Of System.Decimal))))
  name.vb: Average(ISpecification(Of ), Expression(Of Func(Of AuthCredentials, Nullable(Of Decimal))))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Decimal}}})
    name: Average
    nameWithType: RepositoryWrapper<AuthCredentials>.Average
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.Average
  - name: (
    nameWithType: (
    fullName: (
  - uid: ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Decimal}}})
    name: Average
    nameWithType: RepositoryWrapper(Of AuthCredentials).Average
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).Average
  - name: (
    nameWithType: (
    fullName: (
  - uid: ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Average(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Nullable{System.Decimal}}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Average(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Nullable{System.Decimal}}})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Decimal}}})
  name: Average(Expression<Func<AuthCredentials, Boolean>>, Expression<Func<AuthCredentials, Nullable<Decimal>>>)
  nameWithType: RepositoryWrapper<AuthCredentials>.Average(Expression<Func<AuthCredentials, Boolean>>, Expression<Func<AuthCredentials, Nullable<Decimal>>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.Average(System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Authentication.Models.AuthCredentials, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Authentication.Models.AuthCredentials, System.Nullable<System.Decimal>>>)
  nameWithType.vb: RepositoryWrapper(Of AuthCredentials).Average(Expression(Of Func(Of AuthCredentials, Boolean)), Expression(Of Func(Of AuthCredentials, Nullable(Of Decimal))))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).Average(System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials, System.Nullable(Of System.Decimal))))
  name.vb: Average(Expression(Of Func(Of AuthCredentials, Boolean)), Expression(Of Func(Of AuthCredentials, Nullable(Of Decimal))))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Decimal}}})
    name: Average
    nameWithType: RepositoryWrapper<AuthCredentials>.Average
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.Average
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Decimal}}})
    name: Average
    nameWithType: RepositoryWrapper(Of AuthCredentials).Average
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).Average
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Average(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Double}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Average(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Double}})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Double}})
  name: Average(Expression<Func<AuthCredentials, Double>>)
  nameWithType: RepositoryWrapper<AuthCredentials>.Average(Expression<Func<AuthCredentials, Double>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.Average(System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Authentication.Models.AuthCredentials, System.Double>>)
  nameWithType.vb: RepositoryWrapper(Of AuthCredentials).Average(Expression(Of Func(Of AuthCredentials, Double)))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).Average(System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials, System.Double)))
  name.vb: Average(Expression(Of Func(Of AuthCredentials, Double)))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Double}})
    name: Average
    nameWithType: RepositoryWrapper<AuthCredentials>.Average
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.Average
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Double}})
    name: Average
    nameWithType: RepositoryWrapper(Of AuthCredentials).Average
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).Average
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Average(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Double}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Average(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Double}})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Double}})
  name: Average(ISpecification<>, Expression<Func<AuthCredentials, Double>>)
  nameWithType: RepositoryWrapper<AuthCredentials>.Average(ISpecification<>, Expression<Func<AuthCredentials, Double>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.Average(ISpecification<>, System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Authentication.Models.AuthCredentials, System.Double>>)
  nameWithType.vb: RepositoryWrapper(Of AuthCredentials).Average(ISpecification(Of ), Expression(Of Func(Of AuthCredentials, Double)))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).Average(ISpecification(Of ), System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials, System.Double)))
  name.vb: Average(ISpecification(Of ), Expression(Of Func(Of AuthCredentials, Double)))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Double}})
    name: Average
    nameWithType: RepositoryWrapper<AuthCredentials>.Average
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.Average
  - name: (
    nameWithType: (
    fullName: (
  - uid: ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Double}})
    name: Average
    nameWithType: RepositoryWrapper(Of AuthCredentials).Average
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).Average
  - name: (
    nameWithType: (
    fullName: (
  - uid: ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Average(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Double}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Average(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Double}})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Double}})
  name: Average(Expression<Func<AuthCredentials, Boolean>>, Expression<Func<AuthCredentials, Double>>)
  nameWithType: RepositoryWrapper<AuthCredentials>.Average(Expression<Func<AuthCredentials, Boolean>>, Expression<Func<AuthCredentials, Double>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.Average(System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Authentication.Models.AuthCredentials, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Authentication.Models.AuthCredentials, System.Double>>)
  nameWithType.vb: RepositoryWrapper(Of AuthCredentials).Average(Expression(Of Func(Of AuthCredentials, Boolean)), Expression(Of Func(Of AuthCredentials, Double)))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).Average(System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials, System.Double)))
  name.vb: Average(Expression(Of Func(Of AuthCredentials, Boolean)), Expression(Of Func(Of AuthCredentials, Double)))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Double}})
    name: Average
    nameWithType: RepositoryWrapper<AuthCredentials>.Average
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.Average
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Double}})
    name: Average
    nameWithType: RepositoryWrapper(Of AuthCredentials).Average
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).Average
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Average(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Nullable{System.Double}}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Average(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Nullable{System.Double}}})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Double}}})
  name: Average(Expression<Func<AuthCredentials, Nullable<Double>>>)
  nameWithType: RepositoryWrapper<AuthCredentials>.Average(Expression<Func<AuthCredentials, Nullable<Double>>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.Average(System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Authentication.Models.AuthCredentials, System.Nullable<System.Double>>>)
  nameWithType.vb: RepositoryWrapper(Of AuthCredentials).Average(Expression(Of Func(Of AuthCredentials, Nullable(Of Double))))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).Average(System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials, System.Nullable(Of System.Double))))
  name.vb: Average(Expression(Of Func(Of AuthCredentials, Nullable(Of Double))))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Double}}})
    name: Average
    nameWithType: RepositoryWrapper<AuthCredentials>.Average
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.Average
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Double}}})
    name: Average
    nameWithType: RepositoryWrapper(Of AuthCredentials).Average
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).Average
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Average(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Nullable{System.Double}}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Average(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Nullable{System.Double}}})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Double}}})
  name: Average(ISpecification<>, Expression<Func<AuthCredentials, Nullable<Double>>>)
  nameWithType: RepositoryWrapper<AuthCredentials>.Average(ISpecification<>, Expression<Func<AuthCredentials, Nullable<Double>>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.Average(ISpecification<>, System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Authentication.Models.AuthCredentials, System.Nullable<System.Double>>>)
  nameWithType.vb: RepositoryWrapper(Of AuthCredentials).Average(ISpecification(Of ), Expression(Of Func(Of AuthCredentials, Nullable(Of Double))))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).Average(ISpecification(Of ), System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials, System.Nullable(Of System.Double))))
  name.vb: Average(ISpecification(Of ), Expression(Of Func(Of AuthCredentials, Nullable(Of Double))))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Double}}})
    name: Average
    nameWithType: RepositoryWrapper<AuthCredentials>.Average
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.Average
  - name: (
    nameWithType: (
    fullName: (
  - uid: ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Double}}})
    name: Average
    nameWithType: RepositoryWrapper(Of AuthCredentials).Average
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).Average
  - name: (
    nameWithType: (
    fullName: (
  - uid: ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Average(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Nullable{System.Double}}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Average(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Nullable{System.Double}}})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Double}}})
  name: Average(Expression<Func<AuthCredentials, Boolean>>, Expression<Func<AuthCredentials, Nullable<Double>>>)
  nameWithType: RepositoryWrapper<AuthCredentials>.Average(Expression<Func<AuthCredentials, Boolean>>, Expression<Func<AuthCredentials, Nullable<Double>>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.Average(System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Authentication.Models.AuthCredentials, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Authentication.Models.AuthCredentials, System.Nullable<System.Double>>>)
  nameWithType.vb: RepositoryWrapper(Of AuthCredentials).Average(Expression(Of Func(Of AuthCredentials, Boolean)), Expression(Of Func(Of AuthCredentials, Nullable(Of Double))))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).Average(System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials, System.Nullable(Of System.Double))))
  name.vb: Average(Expression(Of Func(Of AuthCredentials, Boolean)), Expression(Of Func(Of AuthCredentials, Nullable(Of Double))))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Double}}})
    name: Average
    nameWithType: RepositoryWrapper<AuthCredentials>.Average
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.Average
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Double}}})
    name: Average
    nameWithType: RepositoryWrapper(Of AuthCredentials).Average
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).Average
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Average(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Single}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Average(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Single}})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Single}})
  name: Average(Expression<Func<AuthCredentials, Single>>)
  nameWithType: RepositoryWrapper<AuthCredentials>.Average(Expression<Func<AuthCredentials, Single>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.Average(System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Authentication.Models.AuthCredentials, System.Single>>)
  nameWithType.vb: RepositoryWrapper(Of AuthCredentials).Average(Expression(Of Func(Of AuthCredentials, Single)))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).Average(System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials, System.Single)))
  name.vb: Average(Expression(Of Func(Of AuthCredentials, Single)))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Single}})
    name: Average
    nameWithType: RepositoryWrapper<AuthCredentials>.Average
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.Average
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Single}})
    name: Average
    nameWithType: RepositoryWrapper(Of AuthCredentials).Average
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).Average
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Average(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Single}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Average(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Single}})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Single}})
  name: Average(ISpecification<>, Expression<Func<AuthCredentials, Single>>)
  nameWithType: RepositoryWrapper<AuthCredentials>.Average(ISpecification<>, Expression<Func<AuthCredentials, Single>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.Average(ISpecification<>, System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Authentication.Models.AuthCredentials, System.Single>>)
  nameWithType.vb: RepositoryWrapper(Of AuthCredentials).Average(ISpecification(Of ), Expression(Of Func(Of AuthCredentials, Single)))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).Average(ISpecification(Of ), System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials, System.Single)))
  name.vb: Average(ISpecification(Of ), Expression(Of Func(Of AuthCredentials, Single)))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Single}})
    name: Average
    nameWithType: RepositoryWrapper<AuthCredentials>.Average
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.Average
  - name: (
    nameWithType: (
    fullName: (
  - uid: ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Single}})
    name: Average
    nameWithType: RepositoryWrapper(Of AuthCredentials).Average
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).Average
  - name: (
    nameWithType: (
    fullName: (
  - uid: ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Average(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Single}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Average(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Single}})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Single}})
  name: Average(Expression<Func<AuthCredentials, Boolean>>, Expression<Func<AuthCredentials, Single>>)
  nameWithType: RepositoryWrapper<AuthCredentials>.Average(Expression<Func<AuthCredentials, Boolean>>, Expression<Func<AuthCredentials, Single>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.Average(System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Authentication.Models.AuthCredentials, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Authentication.Models.AuthCredentials, System.Single>>)
  nameWithType.vb: RepositoryWrapper(Of AuthCredentials).Average(Expression(Of Func(Of AuthCredentials, Boolean)), Expression(Of Func(Of AuthCredentials, Single)))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).Average(System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials, System.Single)))
  name.vb: Average(Expression(Of Func(Of AuthCredentials, Boolean)), Expression(Of Func(Of AuthCredentials, Single)))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Single}})
    name: Average
    nameWithType: RepositoryWrapper<AuthCredentials>.Average
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.Average
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Single}})
    name: Average
    nameWithType: RepositoryWrapper(Of AuthCredentials).Average
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).Average
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Average(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Nullable{System.Single}}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Average(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Nullable{System.Single}}})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Single}}})
  name: Average(Expression<Func<AuthCredentials, Nullable<Single>>>)
  nameWithType: RepositoryWrapper<AuthCredentials>.Average(Expression<Func<AuthCredentials, Nullable<Single>>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.Average(System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Authentication.Models.AuthCredentials, System.Nullable<System.Single>>>)
  nameWithType.vb: RepositoryWrapper(Of AuthCredentials).Average(Expression(Of Func(Of AuthCredentials, Nullable(Of Single))))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).Average(System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials, System.Nullable(Of System.Single))))
  name.vb: Average(Expression(Of Func(Of AuthCredentials, Nullable(Of Single))))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Single}}})
    name: Average
    nameWithType: RepositoryWrapper<AuthCredentials>.Average
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.Average
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Single}}})
    name: Average
    nameWithType: RepositoryWrapper(Of AuthCredentials).Average
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).Average
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Average(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Nullable{System.Single}}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Average(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Nullable{System.Single}}})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Single}}})
  name: Average(ISpecification<>, Expression<Func<AuthCredentials, Nullable<Single>>>)
  nameWithType: RepositoryWrapper<AuthCredentials>.Average(ISpecification<>, Expression<Func<AuthCredentials, Nullable<Single>>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.Average(ISpecification<>, System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Authentication.Models.AuthCredentials, System.Nullable<System.Single>>>)
  nameWithType.vb: RepositoryWrapper(Of AuthCredentials).Average(ISpecification(Of ), Expression(Of Func(Of AuthCredentials, Nullable(Of Single))))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).Average(ISpecification(Of ), System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials, System.Nullable(Of System.Single))))
  name.vb: Average(ISpecification(Of ), Expression(Of Func(Of AuthCredentials, Nullable(Of Single))))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Single}}})
    name: Average
    nameWithType: RepositoryWrapper<AuthCredentials>.Average
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.Average
  - name: (
    nameWithType: (
    fullName: (
  - uid: ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Single}}})
    name: Average
    nameWithType: RepositoryWrapper(Of AuthCredentials).Average
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).Average
  - name: (
    nameWithType: (
    fullName: (
  - uid: ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Average(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Nullable{System.Single}}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Average(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Nullable{System.Single}}})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Single}}})
  name: Average(Expression<Func<AuthCredentials, Boolean>>, Expression<Func<AuthCredentials, Nullable<Single>>>)
  nameWithType: RepositoryWrapper<AuthCredentials>.Average(Expression<Func<AuthCredentials, Boolean>>, Expression<Func<AuthCredentials, Nullable<Single>>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.Average(System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Authentication.Models.AuthCredentials, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Authentication.Models.AuthCredentials, System.Nullable<System.Single>>>)
  nameWithType.vb: RepositoryWrapper(Of AuthCredentials).Average(Expression(Of Func(Of AuthCredentials, Boolean)), Expression(Of Func(Of AuthCredentials, Nullable(Of Single))))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).Average(System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials, System.Nullable(Of System.Single))))
  name.vb: Average(Expression(Of Func(Of AuthCredentials, Boolean)), Expression(Of Func(Of AuthCredentials, Nullable(Of Single))))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Single}}})
    name: Average
    nameWithType: RepositoryWrapper<AuthCredentials>.Average
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.Average
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Single}}})
    name: Average
    nameWithType: RepositoryWrapper(Of AuthCredentials).Average
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).Average
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.BeginBatch
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.BeginBatch
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.BeginBatch
  name: BeginBatch()
  nameWithType: RepositoryWrapper<AuthCredentials>.BeginBatch()
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.BeginBatch()
  nameWithType.vb: RepositoryWrapper(Of AuthCredentials).BeginBatch()
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).BeginBatch()
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.BeginBatch
    name: BeginBatch
    nameWithType: RepositoryWrapper<AuthCredentials>.BeginBatch
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.BeginBatch
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.BeginBatch
    name: BeginBatch
    nameWithType: RepositoryWrapper(Of AuthCredentials).BeginBatch
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).BeginBatch
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.ClearCache
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.ClearCache
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.ClearCache
  name: ClearCache()
  nameWithType: RepositoryWrapper<AuthCredentials>.ClearCache()
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.ClearCache()
  nameWithType.vb: RepositoryWrapper(Of AuthCredentials).ClearCache()
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).ClearCache()
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.ClearCache
    name: ClearCache
    nameWithType: RepositoryWrapper<AuthCredentials>.ClearCache
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.ClearCache
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.ClearCache
    name: ClearCache
    nameWithType: RepositoryWrapper(Of AuthCredentials).ClearCache
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).ClearCache
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Count
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Count
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Count
  name: Count()
  nameWithType: RepositoryWrapper<AuthCredentials>.Count()
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.Count()
  nameWithType.vb: RepositoryWrapper(Of AuthCredentials).Count()
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).Count()
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Count
    name: Count
    nameWithType: RepositoryWrapper<AuthCredentials>.Count
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.Count
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Count
    name: Count
    nameWithType: RepositoryWrapper(Of AuthCredentials).Count
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).Count
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Count(ISpecification{`0})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Count(ISpecification{`0})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Count(ISpecification{`0})
  name: Count(ISpecification<>)
  nameWithType: RepositoryWrapper<AuthCredentials>.Count(ISpecification<>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.Count(ISpecification<>)
  nameWithType.vb: RepositoryWrapper(Of AuthCredentials).Count(ISpecification(Of ))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).Count(ISpecification(Of ))
  name.vb: Count(ISpecification(Of ))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Count(ISpecification{`0})
    name: Count
    nameWithType: RepositoryWrapper<AuthCredentials>.Count
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.Count
  - name: (
    nameWithType: (
    fullName: (
  - uid: ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Count(ISpecification{`0})
    name: Count
    nameWithType: RepositoryWrapper(Of AuthCredentials).Count
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).Count
  - name: (
    nameWithType: (
    fullName: (
  - uid: ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Count(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Boolean}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Count(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Boolean}})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Count(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  name: Count(Expression<Func<AuthCredentials, Boolean>>)
  nameWithType: RepositoryWrapper<AuthCredentials>.Count(Expression<Func<AuthCredentials, Boolean>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.Count(System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Authentication.Models.AuthCredentials, System.Boolean>>)
  nameWithType.vb: RepositoryWrapper(Of AuthCredentials).Count(Expression(Of Func(Of AuthCredentials, Boolean)))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).Count(System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials, System.Boolean)))
  name.vb: Count(Expression(Of Func(Of AuthCredentials, Boolean)))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Count(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
    name: Count
    nameWithType: RepositoryWrapper<AuthCredentials>.Count
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.Count
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Count(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
    name: Count
    nameWithType: RepositoryWrapper(Of AuthCredentials).Count
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).Count
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Delete(System.String)
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Delete(System.String)
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Delete(System.String)
  name: Delete(String)
  nameWithType: RepositoryWrapper<AuthCredentials>.Delete(String)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.Delete(System.String)
  nameWithType.vb: RepositoryWrapper(Of AuthCredentials).Delete(String)
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).Delete(System.String)
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Delete(System.String)
    name: Delete
    nameWithType: RepositoryWrapper<AuthCredentials>.Delete
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.Delete
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Delete(System.String)
    name: Delete
    nameWithType: RepositoryWrapper(Of AuthCredentials).Delete
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).Delete
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Delete(System.Collections.Generic.IEnumerable{System.String})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Delete(System.Collections.Generic.IEnumerable{System.String})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Delete(System.Collections.Generic.IEnumerable{System.String})
  name: Delete(IEnumerable<String>)
  nameWithType: RepositoryWrapper<AuthCredentials>.Delete(IEnumerable<String>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.Delete(System.Collections.Generic.IEnumerable<System.String>)
  nameWithType.vb: RepositoryWrapper(Of AuthCredentials).Delete(IEnumerable(Of String))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).Delete(System.Collections.Generic.IEnumerable(Of System.String))
  name.vb: Delete(IEnumerable(Of String))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Delete(System.Collections.Generic.IEnumerable{System.String})
    name: Delete
    nameWithType: RepositoryWrapper<AuthCredentials>.Delete
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.Delete
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Delete(System.Collections.Generic.IEnumerable{System.String})
    name: Delete
    nameWithType: RepositoryWrapper(Of AuthCredentials).Delete
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).Delete
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Delete(System.String[])
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Delete(System.String[])
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Delete(System.String[])
  name: Delete(String[])
  nameWithType: RepositoryWrapper<AuthCredentials>.Delete(String[])
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.Delete(System.String[])
  nameWithType.vb: RepositoryWrapper(Of AuthCredentials).Delete(String())
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).Delete(System.String())
  name.vb: Delete(String())
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Delete(System.String[])
    name: Delete
    nameWithType: RepositoryWrapper<AuthCredentials>.Delete
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.Delete
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Delete(System.String[])
    name: Delete
    nameWithType: RepositoryWrapper(Of AuthCredentials).Delete
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).Delete
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Delete(Catalyst.Core.Modules.Authentication.Models.AuthCredentials)
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Delete(Catalyst.Core.Modules.Authentication.Models.AuthCredentials)
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Delete(`0)
  name: Delete(AuthCredentials)
  nameWithType: RepositoryWrapper<AuthCredentials>.Delete(AuthCredentials)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.Delete(Catalyst.Core.Modules.Authentication.Models.AuthCredentials)
  nameWithType.vb: RepositoryWrapper(Of AuthCredentials).Delete(AuthCredentials)
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).Delete(Catalyst.Core.Modules.Authentication.Models.AuthCredentials)
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Delete(`0)
    name: Delete
    nameWithType: RepositoryWrapper<AuthCredentials>.Delete
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.Delete
  - name: (
    nameWithType: (
    fullName: (
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Delete(`0)
    name: Delete
    nameWithType: RepositoryWrapper(Of AuthCredentials).Delete
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).Delete
  - name: (
    nameWithType: (
    fullName: (
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Delete(System.Collections.Generic.IEnumerable{Catalyst.Core.Modules.Authentication.Models.AuthCredentials})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Delete(System.Collections.Generic.IEnumerable{Catalyst.Core.Modules.Authentication.Models.AuthCredentials})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Delete(System.Collections.Generic.IEnumerable{`0})
  name: Delete(IEnumerable<AuthCredentials>)
  nameWithType: RepositoryWrapper<AuthCredentials>.Delete(IEnumerable<AuthCredentials>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.Delete(System.Collections.Generic.IEnumerable<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>)
  nameWithType.vb: RepositoryWrapper(Of AuthCredentials).Delete(IEnumerable(Of AuthCredentials))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).Delete(System.Collections.Generic.IEnumerable(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials))
  name.vb: Delete(IEnumerable(Of AuthCredentials))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Delete(System.Collections.Generic.IEnumerable{`0})
    name: Delete
    nameWithType: RepositoryWrapper<AuthCredentials>.Delete
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.Delete
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Delete(System.Collections.Generic.IEnumerable{`0})
    name: Delete
    nameWithType: RepositoryWrapper(Of AuthCredentials).Delete
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).Delete
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Delete(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Boolean}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Delete(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Boolean}})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Delete(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  name: Delete(Expression<Func<AuthCredentials, Boolean>>)
  nameWithType: RepositoryWrapper<AuthCredentials>.Delete(Expression<Func<AuthCredentials, Boolean>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.Delete(System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Authentication.Models.AuthCredentials, System.Boolean>>)
  nameWithType.vb: RepositoryWrapper(Of AuthCredentials).Delete(Expression(Of Func(Of AuthCredentials, Boolean)))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).Delete(System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials, System.Boolean)))
  name.vb: Delete(Expression(Of Func(Of AuthCredentials, Boolean)))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Delete(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
    name: Delete
    nameWithType: RepositoryWrapper<AuthCredentials>.Delete
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.Delete
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Delete(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
    name: Delete
    nameWithType: RepositoryWrapper(Of AuthCredentials).Delete
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).Delete
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Delete(ISpecification{`0})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Delete(ISpecification{`0})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Delete(ISpecification{`0})
  name: Delete(ISpecification<>)
  nameWithType: RepositoryWrapper<AuthCredentials>.Delete(ISpecification<>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.Delete(ISpecification<>)
  nameWithType.vb: RepositoryWrapper(Of AuthCredentials).Delete(ISpecification(Of ))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).Delete(ISpecification(Of ))
  name.vb: Delete(ISpecification(Of ))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Delete(ISpecification{`0})
    name: Delete
    nameWithType: RepositoryWrapper<AuthCredentials>.Delete
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.Delete
  - name: (
    nameWithType: (
    fullName: (
  - uid: ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Delete(ISpecification{`0})
    name: Delete
    nameWithType: RepositoryWrapper(Of AuthCredentials).Delete
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).Delete
  - name: (
    nameWithType: (
    fullName: (
  - uid: ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.DisableCaching
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.DisableCaching
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.DisableCaching
  name: DisableCaching()
  nameWithType: RepositoryWrapper<AuthCredentials>.DisableCaching()
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.DisableCaching()
  nameWithType.vb: RepositoryWrapper(Of AuthCredentials).DisableCaching()
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).DisableCaching()
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.DisableCaching
    name: DisableCaching
    nameWithType: RepositoryWrapper<AuthCredentials>.DisableCaching
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.DisableCaching
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.DisableCaching
    name: DisableCaching
    nameWithType: RepositoryWrapper(Of AuthCredentials).DisableCaching
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).DisableCaching
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Dispose
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Dispose
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Dispose
  name: Dispose()
  nameWithType: RepositoryWrapper<AuthCredentials>.Dispose()
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.Dispose()
  nameWithType.vb: RepositoryWrapper(Of AuthCredentials).Dispose()
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).Dispose()
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Dispose
    name: Dispose
    nameWithType: RepositoryWrapper<AuthCredentials>.Dispose
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.Dispose
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Dispose
    name: Dispose
    nameWithType: RepositoryWrapper(Of AuthCredentials).Dispose
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).Dispose
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Exists(System.String)
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Exists(System.String)
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Exists(System.String)
  name: Exists(String)
  nameWithType: RepositoryWrapper<AuthCredentials>.Exists(String)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.Exists(System.String)
  nameWithType.vb: RepositoryWrapper(Of AuthCredentials).Exists(String)
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).Exists(System.String)
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Exists(System.String)
    name: Exists
    nameWithType: RepositoryWrapper<AuthCredentials>.Exists
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.Exists
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Exists(System.String)
    name: Exists
    nameWithType: RepositoryWrapper(Of AuthCredentials).Exists
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).Exists
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Exists(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Boolean}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Exists(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Boolean}})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Exists(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  name: Exists(Expression<Func<AuthCredentials, Boolean>>)
  nameWithType: RepositoryWrapper<AuthCredentials>.Exists(Expression<Func<AuthCredentials, Boolean>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.Exists(System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Authentication.Models.AuthCredentials, System.Boolean>>)
  nameWithType.vb: RepositoryWrapper(Of AuthCredentials).Exists(Expression(Of Func(Of AuthCredentials, Boolean)))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).Exists(System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials, System.Boolean)))
  name.vb: Exists(Expression(Of Func(Of AuthCredentials, Boolean)))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Exists(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
    name: Exists
    nameWithType: RepositoryWrapper<AuthCredentials>.Exists
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.Exists
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Exists(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
    name: Exists
    nameWithType: RepositoryWrapper(Of AuthCredentials).Exists
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).Exists
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Exists(ISpecification{`0})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Exists(ISpecification{`0})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Exists(ISpecification{`0})
  name: Exists(ISpecification<>)
  nameWithType: RepositoryWrapper<AuthCredentials>.Exists(ISpecification<>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.Exists(ISpecification<>)
  nameWithType.vb: RepositoryWrapper(Of AuthCredentials).Exists(ISpecification(Of ))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).Exists(ISpecification(Of ))
  name.vb: Exists(ISpecification(Of ))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Exists(ISpecification{`0})
    name: Exists
    nameWithType: RepositoryWrapper<AuthCredentials>.Exists
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.Exists
  - name: (
    nameWithType: (
    fullName: (
  - uid: ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Exists(ISpecification{`0})
    name: Exists
    nameWithType: RepositoryWrapper(Of AuthCredentials).Exists
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).Exists
  - name: (
    nameWithType: (
    fullName: (
  - uid: ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Find(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Boolean}},IQueryOptions{`0})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Find(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Boolean}},IQueryOptions{`0})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Find(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},IQueryOptions{`0})
  name: Find(Expression<Func<AuthCredentials, Boolean>>, IQueryOptions<>)
  nameWithType: RepositoryWrapper<AuthCredentials>.Find(Expression<Func<AuthCredentials, Boolean>>, IQueryOptions<>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.Find(System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Authentication.Models.AuthCredentials, System.Boolean>>, IQueryOptions<>)
  nameWithType.vb: RepositoryWrapper(Of AuthCredentials).Find(Expression(Of Func(Of AuthCredentials, Boolean)), IQueryOptions(Of ))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).Find(System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials, System.Boolean)), IQueryOptions(Of ))
  name.vb: Find(Expression(Of Func(Of AuthCredentials, Boolean)), IQueryOptions(Of ))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Find(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},IQueryOptions{`0})
    name: Find
    nameWithType: RepositoryWrapper<AuthCredentials>.Find
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.Find
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: IQueryOptions
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Find(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},IQueryOptions{`0})
    name: Find
    nameWithType: RepositoryWrapper(Of AuthCredentials).Find
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).Find
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: IQueryOptions
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Find``1(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,{TResult}}},IQueryOptions{`0})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Find``1(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,``0}},IQueryOptions{`0})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Find``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},IQueryOptions{`0})
  name: Find<TResult>(Expression<Func<AuthCredentials, Boolean>>, Expression<Func<AuthCredentials, TResult>>, IQueryOptions<>)
  nameWithType: RepositoryWrapper<AuthCredentials>.Find<TResult>(Expression<Func<AuthCredentials, Boolean>>, Expression<Func<AuthCredentials, TResult>>, IQueryOptions<>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.Find<TResult>(System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Authentication.Models.AuthCredentials, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Authentication.Models.AuthCredentials, TResult>>, IQueryOptions<>)
  nameWithType.vb: RepositoryWrapper(Of AuthCredentials).Find(Of TResult)(Expression(Of Func(Of AuthCredentials, Boolean)), Expression(Of Func(Of AuthCredentials, TResult)), IQueryOptions(Of ))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).Find(Of TResult)(System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials, TResult)), IQueryOptions(Of ))
  name.vb: Find(Of TResult)(Expression(Of Func(Of AuthCredentials, Boolean)), Expression(Of Func(Of AuthCredentials, TResult)), IQueryOptions(Of ))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Find``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},IQueryOptions{`0})
    name: Find<TResult>
    nameWithType: RepositoryWrapper<AuthCredentials>.Find<TResult>
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.Find<TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: IQueryOptions
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Find``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},IQueryOptions{`0})
    name: Find(Of TResult)
    nameWithType: RepositoryWrapper(Of AuthCredentials).Find(Of TResult)
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).Find(Of TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: IQueryOptions
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Find(ISpecification{`0},IQueryOptions{`0})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Find(ISpecification{`0},IQueryOptions{`0})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Find(ISpecification{`0},IQueryOptions{`0})
  name: Find(ISpecification<>, IQueryOptions<>)
  nameWithType: RepositoryWrapper<AuthCredentials>.Find(ISpecification<>, IQueryOptions<>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.Find(ISpecification<>, IQueryOptions<>)
  nameWithType.vb: RepositoryWrapper(Of AuthCredentials).Find(ISpecification(Of ), IQueryOptions(Of ))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).Find(ISpecification(Of ), IQueryOptions(Of ))
  name.vb: Find(ISpecification(Of ), IQueryOptions(Of ))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Find(ISpecification{`0},IQueryOptions{`0})
    name: Find
    nameWithType: RepositoryWrapper<AuthCredentials>.Find
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.Find
  - name: (
    nameWithType: (
    fullName: (
  - uid: ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: IQueryOptions
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Find(ISpecification{`0},IQueryOptions{`0})
    name: Find
    nameWithType: RepositoryWrapper(Of AuthCredentials).Find
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).Find
  - name: (
    nameWithType: (
    fullName: (
  - uid: ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: IQueryOptions
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Find``1(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,{TResult}}},IQueryOptions{`0})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Find``1(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,``0}},IQueryOptions{`0})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Find``1(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}},IQueryOptions{`0})
  name: Find<TResult>(ISpecification<>, Expression<Func<AuthCredentials, TResult>>, IQueryOptions<>)
  nameWithType: RepositoryWrapper<AuthCredentials>.Find<TResult>(ISpecification<>, Expression<Func<AuthCredentials, TResult>>, IQueryOptions<>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.Find<TResult>(ISpecification<>, System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Authentication.Models.AuthCredentials, TResult>>, IQueryOptions<>)
  nameWithType.vb: RepositoryWrapper(Of AuthCredentials).Find(Of TResult)(ISpecification(Of ), Expression(Of Func(Of AuthCredentials, TResult)), IQueryOptions(Of ))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).Find(Of TResult)(ISpecification(Of ), System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials, TResult)), IQueryOptions(Of ))
  name.vb: Find(Of TResult)(ISpecification(Of ), Expression(Of Func(Of AuthCredentials, TResult)), IQueryOptions(Of ))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Find``1(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}},IQueryOptions{`0})
    name: Find<TResult>
    nameWithType: RepositoryWrapper<AuthCredentials>.Find<TResult>
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.Find<TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: IQueryOptions
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Find``1(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}},IQueryOptions{`0})
    name: Find(Of TResult)
    nameWithType: RepositoryWrapper(Of AuthCredentials).Find(Of TResult)
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).Find(Of TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: IQueryOptions
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.FindAll(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Boolean}},IQueryOptions{`0})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.FindAll(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Boolean}},IQueryOptions{`0})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.FindAll(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},IQueryOptions{`0})
  name: FindAll(Expression<Func<AuthCredentials, Boolean>>, IQueryOptions<>)
  nameWithType: RepositoryWrapper<AuthCredentials>.FindAll(Expression<Func<AuthCredentials, Boolean>>, IQueryOptions<>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.FindAll(System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Authentication.Models.AuthCredentials, System.Boolean>>, IQueryOptions<>)
  nameWithType.vb: RepositoryWrapper(Of AuthCredentials).FindAll(Expression(Of Func(Of AuthCredentials, Boolean)), IQueryOptions(Of ))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).FindAll(System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials, System.Boolean)), IQueryOptions(Of ))
  name.vb: FindAll(Expression(Of Func(Of AuthCredentials, Boolean)), IQueryOptions(Of ))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.FindAll(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},IQueryOptions{`0})
    name: FindAll
    nameWithType: RepositoryWrapper<AuthCredentials>.FindAll
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.FindAll
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: IQueryOptions
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.FindAll(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},IQueryOptions{`0})
    name: FindAll
    nameWithType: RepositoryWrapper(Of AuthCredentials).FindAll
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).FindAll
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: IQueryOptions
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.FindAll``1(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,{TResult}}},IQueryOptions{`0})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.FindAll``1(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,``0}},IQueryOptions{`0})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.FindAll``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},IQueryOptions{`0})
  name: FindAll<TResult>(Expression<Func<AuthCredentials, Boolean>>, Expression<Func<AuthCredentials, TResult>>, IQueryOptions<>)
  nameWithType: RepositoryWrapper<AuthCredentials>.FindAll<TResult>(Expression<Func<AuthCredentials, Boolean>>, Expression<Func<AuthCredentials, TResult>>, IQueryOptions<>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.FindAll<TResult>(System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Authentication.Models.AuthCredentials, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Authentication.Models.AuthCredentials, TResult>>, IQueryOptions<>)
  nameWithType.vb: RepositoryWrapper(Of AuthCredentials).FindAll(Of TResult)(Expression(Of Func(Of AuthCredentials, Boolean)), Expression(Of Func(Of AuthCredentials, TResult)), IQueryOptions(Of ))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).FindAll(Of TResult)(System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials, TResult)), IQueryOptions(Of ))
  name.vb: FindAll(Of TResult)(Expression(Of Func(Of AuthCredentials, Boolean)), Expression(Of Func(Of AuthCredentials, TResult)), IQueryOptions(Of ))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.FindAll``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},IQueryOptions{`0})
    name: FindAll<TResult>
    nameWithType: RepositoryWrapper<AuthCredentials>.FindAll<TResult>
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.FindAll<TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: IQueryOptions
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.FindAll``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},IQueryOptions{`0})
    name: FindAll(Of TResult)
    nameWithType: RepositoryWrapper(Of AuthCredentials).FindAll(Of TResult)
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).FindAll(Of TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: IQueryOptions
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.FindAll(ISpecification{`0},IQueryOptions{`0})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.FindAll(ISpecification{`0},IQueryOptions{`0})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.FindAll(ISpecification{`0},IQueryOptions{`0})
  name: FindAll(ISpecification<>, IQueryOptions<>)
  nameWithType: RepositoryWrapper<AuthCredentials>.FindAll(ISpecification<>, IQueryOptions<>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.FindAll(ISpecification<>, IQueryOptions<>)
  nameWithType.vb: RepositoryWrapper(Of AuthCredentials).FindAll(ISpecification(Of ), IQueryOptions(Of ))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).FindAll(ISpecification(Of ), IQueryOptions(Of ))
  name.vb: FindAll(ISpecification(Of ), IQueryOptions(Of ))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.FindAll(ISpecification{`0},IQueryOptions{`0})
    name: FindAll
    nameWithType: RepositoryWrapper<AuthCredentials>.FindAll
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.FindAll
  - name: (
    nameWithType: (
    fullName: (
  - uid: ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: IQueryOptions
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.FindAll(ISpecification{`0},IQueryOptions{`0})
    name: FindAll
    nameWithType: RepositoryWrapper(Of AuthCredentials).FindAll
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).FindAll
  - name: (
    nameWithType: (
    fullName: (
  - uid: ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: IQueryOptions
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.FindAll``1(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,{TResult}}},IQueryOptions{`0})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.FindAll``1(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,``0}},IQueryOptions{`0})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.FindAll``1(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}},IQueryOptions{`0})
  name: FindAll<TResult>(ISpecification<>, Expression<Func<AuthCredentials, TResult>>, IQueryOptions<>)
  nameWithType: RepositoryWrapper<AuthCredentials>.FindAll<TResult>(ISpecification<>, Expression<Func<AuthCredentials, TResult>>, IQueryOptions<>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.FindAll<TResult>(ISpecification<>, System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Authentication.Models.AuthCredentials, TResult>>, IQueryOptions<>)
  nameWithType.vb: RepositoryWrapper(Of AuthCredentials).FindAll(Of TResult)(ISpecification(Of ), Expression(Of Func(Of AuthCredentials, TResult)), IQueryOptions(Of ))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).FindAll(Of TResult)(ISpecification(Of ), System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials, TResult)), IQueryOptions(Of ))
  name.vb: FindAll(Of TResult)(ISpecification(Of ), Expression(Of Func(Of AuthCredentials, TResult)), IQueryOptions(Of ))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.FindAll``1(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}},IQueryOptions{`0})
    name: FindAll<TResult>
    nameWithType: RepositoryWrapper<AuthCredentials>.FindAll<TResult>
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.FindAll<TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: IQueryOptions
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.FindAll``1(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}},IQueryOptions{`0})
    name: FindAll(Of TResult)
    nameWithType: RepositoryWrapper(Of AuthCredentials).FindAll(Of TResult)
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).FindAll(Of TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: IQueryOptions
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Get(System.String)
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Get(System.String)
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Get(System.String)
  name: Get(String)
  nameWithType: RepositoryWrapper<AuthCredentials>.Get(String)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.Get(System.String)
  nameWithType.vb: RepositoryWrapper(Of AuthCredentials).Get(String)
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).Get(System.String)
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Get(System.String)
    name: Get
    nameWithType: RepositoryWrapper<AuthCredentials>.Get
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.Get
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Get(System.String)
    name: Get
    nameWithType: RepositoryWrapper(Of AuthCredentials).Get
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).Get
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Get(System.String,IFetchStrategy{`0})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Get(System.String,IFetchStrategy{`0})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Get(System.String,IFetchStrategy{`0})
  name: Get(String, IFetchStrategy<>)
  nameWithType: RepositoryWrapper<AuthCredentials>.Get(String, IFetchStrategy<>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.Get(System.String, IFetchStrategy<>)
  nameWithType.vb: RepositoryWrapper(Of AuthCredentials).Get(String, IFetchStrategy(Of ))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).Get(System.String, IFetchStrategy(Of ))
  name.vb: Get(String, IFetchStrategy(Of ))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Get(System.String,IFetchStrategy{`0})
    name: Get
    nameWithType: RepositoryWrapper<AuthCredentials>.Get
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.Get
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: IFetchStrategy`1
    name: IFetchStrategy
    nameWithType: IFetchStrategy
    fullName: IFetchStrategy
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Get(System.String,IFetchStrategy{`0})
    name: Get
    nameWithType: RepositoryWrapper(Of AuthCredentials).Get
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).Get
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: IFetchStrategy`1
    name: IFetchStrategy
    nameWithType: IFetchStrategy
    fullName: IFetchStrategy
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Get(System.String,System.String[])
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Get(System.String,System.String[])
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Get(System.String,System.String[])
  name: Get(String, String[])
  nameWithType: RepositoryWrapper<AuthCredentials>.Get(String, String[])
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.Get(System.String, System.String[])
  nameWithType.vb: RepositoryWrapper(Of AuthCredentials).Get(String, String())
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).Get(System.String, System.String())
  name.vb: Get(String, String())
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Get(System.String,System.String[])
    name: Get
    nameWithType: RepositoryWrapper<AuthCredentials>.Get
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.Get
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Get(System.String,System.String[])
    name: Get
    nameWithType: RepositoryWrapper(Of AuthCredentials).Get
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).Get
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Get(System.String,System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Object}}[])
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Get(System.String,System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Object}}[])
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Get(System.String,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])
  name: Get(String, Expression<Func<AuthCredentials, Object>>[])
  nameWithType: RepositoryWrapper<AuthCredentials>.Get(String, Expression<Func<AuthCredentials, Object>>[])
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.Get(System.String, System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Authentication.Models.AuthCredentials, System.Object>>[])
  nameWithType.vb: RepositoryWrapper(Of AuthCredentials).Get(String, Expression(Of Func(Of AuthCredentials, Object))())
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).Get(System.String, System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials, System.Object))())
  name.vb: Get(String, Expression(Of Func(Of AuthCredentials, Object))())
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Get(System.String,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])
    name: Get
    nameWithType: RepositoryWrapper<AuthCredentials>.Get
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.Get
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Get(System.String,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])
    name: Get
    nameWithType: RepositoryWrapper(Of AuthCredentials).Get
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).Get
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Get``1(System.String,System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,{TResult}}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Get``1(System.String,System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,``0}})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Get``1(System.String,System.Linq.Expressions.Expression{System.Func{`0,``0}})
  name: Get<TResult>(String, Expression<Func<AuthCredentials, TResult>>)
  nameWithType: RepositoryWrapper<AuthCredentials>.Get<TResult>(String, Expression<Func<AuthCredentials, TResult>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.Get<TResult>(System.String, System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Authentication.Models.AuthCredentials, TResult>>)
  nameWithType.vb: RepositoryWrapper(Of AuthCredentials).Get(Of TResult)(String, Expression(Of Func(Of AuthCredentials, TResult)))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).Get(Of TResult)(System.String, System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials, TResult)))
  name.vb: Get(Of TResult)(String, Expression(Of Func(Of AuthCredentials, TResult)))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Get``1(System.String,System.Linq.Expressions.Expression{System.Func{`0,``0}})
    name: Get<TResult>
    nameWithType: RepositoryWrapper<AuthCredentials>.Get<TResult>
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.Get<TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Get``1(System.String,System.Linq.Expressions.Expression{System.Func{`0,``0}})
    name: Get(Of TResult)
    nameWithType: RepositoryWrapper(Of AuthCredentials).Get(Of TResult)
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).Get(Of TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Get``1(System.String,System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,{TResult}}},IFetchStrategy{`0})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Get``1(System.String,System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,``0}},IFetchStrategy{`0})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Get``1(System.String,System.Linq.Expressions.Expression{System.Func{`0,``0}},IFetchStrategy{`0})
  name: Get<TResult>(String, Expression<Func<AuthCredentials, TResult>>, IFetchStrategy<>)
  nameWithType: RepositoryWrapper<AuthCredentials>.Get<TResult>(String, Expression<Func<AuthCredentials, TResult>>, IFetchStrategy<>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.Get<TResult>(System.String, System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Authentication.Models.AuthCredentials, TResult>>, IFetchStrategy<>)
  nameWithType.vb: RepositoryWrapper(Of AuthCredentials).Get(Of TResult)(String, Expression(Of Func(Of AuthCredentials, TResult)), IFetchStrategy(Of ))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).Get(Of TResult)(System.String, System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials, TResult)), IFetchStrategy(Of ))
  name.vb: Get(Of TResult)(String, Expression(Of Func(Of AuthCredentials, TResult)), IFetchStrategy(Of ))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Get``1(System.String,System.Linq.Expressions.Expression{System.Func{`0,``0}},IFetchStrategy{`0})
    name: Get<TResult>
    nameWithType: RepositoryWrapper<AuthCredentials>.Get<TResult>
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.Get<TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: IFetchStrategy`1
    name: IFetchStrategy
    nameWithType: IFetchStrategy
    fullName: IFetchStrategy
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Get``1(System.String,System.Linq.Expressions.Expression{System.Func{`0,``0}},IFetchStrategy{`0})
    name: Get(Of TResult)
    nameWithType: RepositoryWrapper(Of AuthCredentials).Get(Of TResult)
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).Get(Of TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: IFetchStrategy`1
    name: IFetchStrategy
    nameWithType: IFetchStrategy
    fullName: IFetchStrategy
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Get``1(System.String,System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,{TResult}}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Object}}[])
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Get``1(System.String,System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,``0}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Object}}[])
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Get``1(System.String,System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])
  name: Get<TResult>(String, Expression<Func<AuthCredentials, TResult>>, Expression<Func<AuthCredentials, Object>>[])
  nameWithType: RepositoryWrapper<AuthCredentials>.Get<TResult>(String, Expression<Func<AuthCredentials, TResult>>, Expression<Func<AuthCredentials, Object>>[])
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.Get<TResult>(System.String, System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Authentication.Models.AuthCredentials, TResult>>, System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Authentication.Models.AuthCredentials, System.Object>>[])
  nameWithType.vb: RepositoryWrapper(Of AuthCredentials).Get(Of TResult)(String, Expression(Of Func(Of AuthCredentials, TResult)), Expression(Of Func(Of AuthCredentials, Object))())
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).Get(Of TResult)(System.String, System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials, TResult)), System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials, System.Object))())
  name.vb: Get(Of TResult)(String, Expression(Of Func(Of AuthCredentials, TResult)), Expression(Of Func(Of AuthCredentials, Object))())
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Get``1(System.String,System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])
    name: Get<TResult>
    nameWithType: RepositoryWrapper<AuthCredentials>.Get<TResult>
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.Get<TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Get``1(System.String,System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])
    name: Get(Of TResult)
    nameWithType: RepositoryWrapper(Of AuthCredentials).Get(Of TResult)
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).Get(Of TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Get``1(System.String,System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,{TResult}}},System.String[])
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Get``1(System.String,System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,``0}},System.String[])
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Get``1(System.String,System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String[])
  name: Get<TResult>(String, Expression<Func<AuthCredentials, TResult>>, String[])
  nameWithType: RepositoryWrapper<AuthCredentials>.Get<TResult>(String, Expression<Func<AuthCredentials, TResult>>, String[])
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.Get<TResult>(System.String, System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Authentication.Models.AuthCredentials, TResult>>, System.String[])
  nameWithType.vb: RepositoryWrapper(Of AuthCredentials).Get(Of TResult)(String, Expression(Of Func(Of AuthCredentials, TResult)), String())
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).Get(Of TResult)(System.String, System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials, TResult)), System.String())
  name.vb: Get(Of TResult)(String, Expression(Of Func(Of AuthCredentials, TResult)), String())
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Get``1(System.String,System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String[])
    name: Get<TResult>
    nameWithType: RepositoryWrapper<AuthCredentials>.Get<TResult>
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.Get<TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Get``1(System.String,System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String[])
    name: Get(Of TResult)
    nameWithType: RepositoryWrapper(Of AuthCredentials).Get(Of TResult)
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).Get(Of TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.GetAll
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.GetAll
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll
  name: GetAll()
  nameWithType: RepositoryWrapper<AuthCredentials>.GetAll()
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.GetAll()
  nameWithType.vb: RepositoryWrapper(Of AuthCredentials).GetAll()
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).GetAll()
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll
    name: GetAll
    nameWithType: RepositoryWrapper<AuthCredentials>.GetAll
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.GetAll
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll
    name: GetAll
    nameWithType: RepositoryWrapper(Of AuthCredentials).GetAll
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).GetAll
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.GetAll(IFetchStrategy{`0})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.GetAll(IFetchStrategy{`0})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll(IFetchStrategy{`0})
  name: GetAll(IFetchStrategy<>)
  nameWithType: RepositoryWrapper<AuthCredentials>.GetAll(IFetchStrategy<>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.GetAll(IFetchStrategy<>)
  nameWithType.vb: RepositoryWrapper(Of AuthCredentials).GetAll(IFetchStrategy(Of ))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).GetAll(IFetchStrategy(Of ))
  name.vb: GetAll(IFetchStrategy(Of ))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll(IFetchStrategy{`0})
    name: GetAll
    nameWithType: RepositoryWrapper<AuthCredentials>.GetAll
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.GetAll
  - name: (
    nameWithType: (
    fullName: (
  - uid: IFetchStrategy`1
    name: IFetchStrategy
    nameWithType: IFetchStrategy
    fullName: IFetchStrategy
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll(IFetchStrategy{`0})
    name: GetAll
    nameWithType: RepositoryWrapper(Of AuthCredentials).GetAll
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).GetAll
  - name: (
    nameWithType: (
    fullName: (
  - uid: IFetchStrategy`1
    name: IFetchStrategy
    nameWithType: IFetchStrategy
    fullName: IFetchStrategy
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.GetAll(System.String[])
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.GetAll(System.String[])
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll(System.String[])
  name: GetAll(String[])
  nameWithType: RepositoryWrapper<AuthCredentials>.GetAll(String[])
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.GetAll(System.String[])
  nameWithType.vb: RepositoryWrapper(Of AuthCredentials).GetAll(String())
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).GetAll(System.String())
  name.vb: GetAll(String())
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll(System.String[])
    name: GetAll
    nameWithType: RepositoryWrapper<AuthCredentials>.GetAll
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.GetAll
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll(System.String[])
    name: GetAll
    nameWithType: RepositoryWrapper(Of AuthCredentials).GetAll
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).GetAll
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.GetAll(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Object}}[])
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.GetAll(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Object}}[])
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll(System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])
  name: GetAll(Expression<Func<AuthCredentials, Object>>[])
  nameWithType: RepositoryWrapper<AuthCredentials>.GetAll(Expression<Func<AuthCredentials, Object>>[])
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.GetAll(System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Authentication.Models.AuthCredentials, System.Object>>[])
  nameWithType.vb: RepositoryWrapper(Of AuthCredentials).GetAll(Expression(Of Func(Of AuthCredentials, Object))())
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).GetAll(System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials, System.Object))())
  name.vb: GetAll(Expression(Of Func(Of AuthCredentials, Object))())
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll(System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])
    name: GetAll
    nameWithType: RepositoryWrapper<AuthCredentials>.GetAll
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.GetAll
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll(System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])
    name: GetAll
    nameWithType: RepositoryWrapper(Of AuthCredentials).GetAll
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).GetAll
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.GetAll(IQueryOptions{`0})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.GetAll(IQueryOptions{`0})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll(IQueryOptions{`0})
  name: GetAll(IQueryOptions<>)
  nameWithType: RepositoryWrapper<AuthCredentials>.GetAll(IQueryOptions<>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.GetAll(IQueryOptions<>)
  nameWithType.vb: RepositoryWrapper(Of AuthCredentials).GetAll(IQueryOptions(Of ))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).GetAll(IQueryOptions(Of ))
  name.vb: GetAll(IQueryOptions(Of ))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll(IQueryOptions{`0})
    name: GetAll
    nameWithType: RepositoryWrapper<AuthCredentials>.GetAll
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.GetAll
  - name: (
    nameWithType: (
    fullName: (
  - uid: IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: IQueryOptions
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll(IQueryOptions{`0})
    name: GetAll
    nameWithType: RepositoryWrapper(Of AuthCredentials).GetAll
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).GetAll
  - name: (
    nameWithType: (
    fullName: (
  - uid: IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: IQueryOptions
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.GetAll(IQueryOptions{`0},IFetchStrategy{`0})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.GetAll(IQueryOptions{`0},IFetchStrategy{`0})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll(IQueryOptions{`0},IFetchStrategy{`0})
  name: GetAll(IQueryOptions<>, IFetchStrategy<>)
  nameWithType: RepositoryWrapper<AuthCredentials>.GetAll(IQueryOptions<>, IFetchStrategy<>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.GetAll(IQueryOptions<>, IFetchStrategy<>)
  nameWithType.vb: RepositoryWrapper(Of AuthCredentials).GetAll(IQueryOptions(Of ), IFetchStrategy(Of ))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).GetAll(IQueryOptions(Of ), IFetchStrategy(Of ))
  name.vb: GetAll(IQueryOptions(Of ), IFetchStrategy(Of ))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll(IQueryOptions{`0},IFetchStrategy{`0})
    name: GetAll
    nameWithType: RepositoryWrapper<AuthCredentials>.GetAll
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.GetAll
  - name: (
    nameWithType: (
    fullName: (
  - uid: IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: IQueryOptions
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: IFetchStrategy`1
    name: IFetchStrategy
    nameWithType: IFetchStrategy
    fullName: IFetchStrategy
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll(IQueryOptions{`0},IFetchStrategy{`0})
    name: GetAll
    nameWithType: RepositoryWrapper(Of AuthCredentials).GetAll
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).GetAll
  - name: (
    nameWithType: (
    fullName: (
  - uid: IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: IQueryOptions
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: IFetchStrategy`1
    name: IFetchStrategy
    nameWithType: IFetchStrategy
    fullName: IFetchStrategy
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.GetAll(IQueryOptions{`0},System.String[])
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.GetAll(IQueryOptions{`0},System.String[])
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll(IQueryOptions{`0},System.String[])
  name: GetAll(IQueryOptions<>, String[])
  nameWithType: RepositoryWrapper<AuthCredentials>.GetAll(IQueryOptions<>, String[])
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.GetAll(IQueryOptions<>, System.String[])
  nameWithType.vb: RepositoryWrapper(Of AuthCredentials).GetAll(IQueryOptions(Of ), String())
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).GetAll(IQueryOptions(Of ), System.String())
  name.vb: GetAll(IQueryOptions(Of ), String())
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll(IQueryOptions{`0},System.String[])
    name: GetAll
    nameWithType: RepositoryWrapper<AuthCredentials>.GetAll
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.GetAll
  - name: (
    nameWithType: (
    fullName: (
  - uid: IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: IQueryOptions
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll(IQueryOptions{`0},System.String[])
    name: GetAll
    nameWithType: RepositoryWrapper(Of AuthCredentials).GetAll
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).GetAll
  - name: (
    nameWithType: (
    fullName: (
  - uid: IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: IQueryOptions
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.GetAll(IQueryOptions{`0},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Object}}[])
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.GetAll(IQueryOptions{`0},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Object}}[])
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll(IQueryOptions{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])
  name: GetAll(IQueryOptions<>, Expression<Func<AuthCredentials, Object>>[])
  nameWithType: RepositoryWrapper<AuthCredentials>.GetAll(IQueryOptions<>, Expression<Func<AuthCredentials, Object>>[])
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.GetAll(IQueryOptions<>, System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Authentication.Models.AuthCredentials, System.Object>>[])
  nameWithType.vb: RepositoryWrapper(Of AuthCredentials).GetAll(IQueryOptions(Of ), Expression(Of Func(Of AuthCredentials, Object))())
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).GetAll(IQueryOptions(Of ), System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials, System.Object))())
  name.vb: GetAll(IQueryOptions(Of ), Expression(Of Func(Of AuthCredentials, Object))())
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll(IQueryOptions{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])
    name: GetAll
    nameWithType: RepositoryWrapper<AuthCredentials>.GetAll
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.GetAll
  - name: (
    nameWithType: (
    fullName: (
  - uid: IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: IQueryOptions
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll(IQueryOptions{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])
    name: GetAll
    nameWithType: RepositoryWrapper(Of AuthCredentials).GetAll
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).GetAll
  - name: (
    nameWithType: (
    fullName: (
  - uid: IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: IQueryOptions
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.GetAll``1(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,{TResult}}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.GetAll``1(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,``0}})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})
  name: GetAll<TResult>(Expression<Func<AuthCredentials, TResult>>)
  nameWithType: RepositoryWrapper<AuthCredentials>.GetAll<TResult>(Expression<Func<AuthCredentials, TResult>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.GetAll<TResult>(System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Authentication.Models.AuthCredentials, TResult>>)
  nameWithType.vb: RepositoryWrapper(Of AuthCredentials).GetAll(Of TResult)(Expression(Of Func(Of AuthCredentials, TResult)))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).GetAll(Of TResult)(System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials, TResult)))
  name.vb: GetAll(Of TResult)(Expression(Of Func(Of AuthCredentials, TResult)))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})
    name: GetAll<TResult>
    nameWithType: RepositoryWrapper<AuthCredentials>.GetAll<TResult>
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.GetAll<TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})
    name: GetAll(Of TResult)
    nameWithType: RepositoryWrapper(Of AuthCredentials).GetAll(Of TResult)
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).GetAll(Of TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.GetAll``1(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,{TResult}}},IQueryOptions{`0})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.GetAll``1(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,``0}},IQueryOptions{`0})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},IQueryOptions{`0})
  name: GetAll<TResult>(Expression<Func<AuthCredentials, TResult>>, IQueryOptions<>)
  nameWithType: RepositoryWrapper<AuthCredentials>.GetAll<TResult>(Expression<Func<AuthCredentials, TResult>>, IQueryOptions<>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.GetAll<TResult>(System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Authentication.Models.AuthCredentials, TResult>>, IQueryOptions<>)
  nameWithType.vb: RepositoryWrapper(Of AuthCredentials).GetAll(Of TResult)(Expression(Of Func(Of AuthCredentials, TResult)), IQueryOptions(Of ))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).GetAll(Of TResult)(System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials, TResult)), IQueryOptions(Of ))
  name.vb: GetAll(Of TResult)(Expression(Of Func(Of AuthCredentials, TResult)), IQueryOptions(Of ))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},IQueryOptions{`0})
    name: GetAll<TResult>
    nameWithType: RepositoryWrapper<AuthCredentials>.GetAll<TResult>
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.GetAll<TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: IQueryOptions
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},IQueryOptions{`0})
    name: GetAll(Of TResult)
    nameWithType: RepositoryWrapper(Of AuthCredentials).GetAll(Of TResult)
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).GetAll(Of TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: IQueryOptions
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.GetAll``1(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,{TResult}}},IFetchStrategy{`0})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.GetAll``1(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,``0}},IFetchStrategy{`0})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},IFetchStrategy{`0})
  name: GetAll<TResult>(Expression<Func<AuthCredentials, TResult>>, IFetchStrategy<>)
  nameWithType: RepositoryWrapper<AuthCredentials>.GetAll<TResult>(Expression<Func<AuthCredentials, TResult>>, IFetchStrategy<>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.GetAll<TResult>(System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Authentication.Models.AuthCredentials, TResult>>, IFetchStrategy<>)
  nameWithType.vb: RepositoryWrapper(Of AuthCredentials).GetAll(Of TResult)(Expression(Of Func(Of AuthCredentials, TResult)), IFetchStrategy(Of ))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).GetAll(Of TResult)(System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials, TResult)), IFetchStrategy(Of ))
  name.vb: GetAll(Of TResult)(Expression(Of Func(Of AuthCredentials, TResult)), IFetchStrategy(Of ))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},IFetchStrategy{`0})
    name: GetAll<TResult>
    nameWithType: RepositoryWrapper<AuthCredentials>.GetAll<TResult>
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.GetAll<TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: IFetchStrategy`1
    name: IFetchStrategy
    nameWithType: IFetchStrategy
    fullName: IFetchStrategy
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},IFetchStrategy{`0})
    name: GetAll(Of TResult)
    nameWithType: RepositoryWrapper(Of AuthCredentials).GetAll(Of TResult)
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).GetAll(Of TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: IFetchStrategy`1
    name: IFetchStrategy
    nameWithType: IFetchStrategy
    fullName: IFetchStrategy
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.GetAll``1(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,{TResult}}},System.String[])
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.GetAll``1(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,``0}},System.String[])
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String[])
  name: GetAll<TResult>(Expression<Func<AuthCredentials, TResult>>, String[])
  nameWithType: RepositoryWrapper<AuthCredentials>.GetAll<TResult>(Expression<Func<AuthCredentials, TResult>>, String[])
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.GetAll<TResult>(System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Authentication.Models.AuthCredentials, TResult>>, System.String[])
  nameWithType.vb: RepositoryWrapper(Of AuthCredentials).GetAll(Of TResult)(Expression(Of Func(Of AuthCredentials, TResult)), String())
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).GetAll(Of TResult)(System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials, TResult)), System.String())
  name.vb: GetAll(Of TResult)(Expression(Of Func(Of AuthCredentials, TResult)), String())
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String[])
    name: GetAll<TResult>
    nameWithType: RepositoryWrapper<AuthCredentials>.GetAll<TResult>
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.GetAll<TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String[])
    name: GetAll(Of TResult)
    nameWithType: RepositoryWrapper(Of AuthCredentials).GetAll(Of TResult)
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).GetAll(Of TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.GetAll``1(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,{TResult}}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Object}}[])
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.GetAll``1(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,``0}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Object}}[])
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])
  name: GetAll<TResult>(Expression<Func<AuthCredentials, TResult>>, Expression<Func<AuthCredentials, Object>>[])
  nameWithType: RepositoryWrapper<AuthCredentials>.GetAll<TResult>(Expression<Func<AuthCredentials, TResult>>, Expression<Func<AuthCredentials, Object>>[])
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.GetAll<TResult>(System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Authentication.Models.AuthCredentials, TResult>>, System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Authentication.Models.AuthCredentials, System.Object>>[])
  nameWithType.vb: RepositoryWrapper(Of AuthCredentials).GetAll(Of TResult)(Expression(Of Func(Of AuthCredentials, TResult)), Expression(Of Func(Of AuthCredentials, Object))())
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).GetAll(Of TResult)(System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials, TResult)), System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials, System.Object))())
  name.vb: GetAll(Of TResult)(Expression(Of Func(Of AuthCredentials, TResult)), Expression(Of Func(Of AuthCredentials, Object))())
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])
    name: GetAll<TResult>
    nameWithType: RepositoryWrapper<AuthCredentials>.GetAll<TResult>
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.GetAll<TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])
    name: GetAll(Of TResult)
    nameWithType: RepositoryWrapper(Of AuthCredentials).GetAll(Of TResult)
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).GetAll(Of TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.GetAll``1(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,{TResult}}},IQueryOptions{`0},IFetchStrategy{`0})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.GetAll``1(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,``0}},IQueryOptions{`0},IFetchStrategy{`0})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},IQueryOptions{`0},IFetchStrategy{`0})
  name: GetAll<TResult>(Expression<Func<AuthCredentials, TResult>>, IQueryOptions<>, IFetchStrategy<>)
  nameWithType: RepositoryWrapper<AuthCredentials>.GetAll<TResult>(Expression<Func<AuthCredentials, TResult>>, IQueryOptions<>, IFetchStrategy<>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.GetAll<TResult>(System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Authentication.Models.AuthCredentials, TResult>>, IQueryOptions<>, IFetchStrategy<>)
  nameWithType.vb: RepositoryWrapper(Of AuthCredentials).GetAll(Of TResult)(Expression(Of Func(Of AuthCredentials, TResult)), IQueryOptions(Of ), IFetchStrategy(Of ))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).GetAll(Of TResult)(System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials, TResult)), IQueryOptions(Of ), IFetchStrategy(Of ))
  name.vb: GetAll(Of TResult)(Expression(Of Func(Of AuthCredentials, TResult)), IQueryOptions(Of ), IFetchStrategy(Of ))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},IQueryOptions{`0},IFetchStrategy{`0})
    name: GetAll<TResult>
    nameWithType: RepositoryWrapper<AuthCredentials>.GetAll<TResult>
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.GetAll<TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: IQueryOptions
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: IFetchStrategy`1
    name: IFetchStrategy
    nameWithType: IFetchStrategy
    fullName: IFetchStrategy
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},IQueryOptions{`0},IFetchStrategy{`0})
    name: GetAll(Of TResult)
    nameWithType: RepositoryWrapper(Of AuthCredentials).GetAll(Of TResult)
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).GetAll(Of TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: IQueryOptions
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: IFetchStrategy`1
    name: IFetchStrategy
    nameWithType: IFetchStrategy
    fullName: IFetchStrategy
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.GetAll``1(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,{TResult}}},IQueryOptions{`0},System.String[])
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.GetAll``1(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,``0}},IQueryOptions{`0},System.String[])
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},IQueryOptions{`0},System.String[])
  name: GetAll<TResult>(Expression<Func<AuthCredentials, TResult>>, IQueryOptions<>, String[])
  nameWithType: RepositoryWrapper<AuthCredentials>.GetAll<TResult>(Expression<Func<AuthCredentials, TResult>>, IQueryOptions<>, String[])
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.GetAll<TResult>(System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Authentication.Models.AuthCredentials, TResult>>, IQueryOptions<>, System.String[])
  nameWithType.vb: RepositoryWrapper(Of AuthCredentials).GetAll(Of TResult)(Expression(Of Func(Of AuthCredentials, TResult)), IQueryOptions(Of ), String())
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).GetAll(Of TResult)(System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials, TResult)), IQueryOptions(Of ), System.String())
  name.vb: GetAll(Of TResult)(Expression(Of Func(Of AuthCredentials, TResult)), IQueryOptions(Of ), String())
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},IQueryOptions{`0},System.String[])
    name: GetAll<TResult>
    nameWithType: RepositoryWrapper<AuthCredentials>.GetAll<TResult>
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.GetAll<TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: IQueryOptions
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},IQueryOptions{`0},System.String[])
    name: GetAll(Of TResult)
    nameWithType: RepositoryWrapper(Of AuthCredentials).GetAll(Of TResult)
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).GetAll(Of TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: IQueryOptions
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.GetAll``1(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,{TResult}}},IQueryOptions{`0},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Object}}[])
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.GetAll``1(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,``0}},IQueryOptions{`0},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Object}}[])
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},IQueryOptions{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])
  name: GetAll<TResult>(Expression<Func<AuthCredentials, TResult>>, IQueryOptions<>, Expression<Func<AuthCredentials, Object>>[])
  nameWithType: RepositoryWrapper<AuthCredentials>.GetAll<TResult>(Expression<Func<AuthCredentials, TResult>>, IQueryOptions<>, Expression<Func<AuthCredentials, Object>>[])
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.GetAll<TResult>(System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Authentication.Models.AuthCredentials, TResult>>, IQueryOptions<>, System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Authentication.Models.AuthCredentials, System.Object>>[])
  nameWithType.vb: RepositoryWrapper(Of AuthCredentials).GetAll(Of TResult)(Expression(Of Func(Of AuthCredentials, TResult)), IQueryOptions(Of ), Expression(Of Func(Of AuthCredentials, Object))())
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).GetAll(Of TResult)(System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials, TResult)), IQueryOptions(Of ), System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials, System.Object))())
  name.vb: GetAll(Of TResult)(Expression(Of Func(Of AuthCredentials, TResult)), IQueryOptions(Of ), Expression(Of Func(Of AuthCredentials, Object))())
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},IQueryOptions{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])
    name: GetAll<TResult>
    nameWithType: RepositoryWrapper<AuthCredentials>.GetAll<TResult>
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.GetAll<TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: IQueryOptions
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},IQueryOptions{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])
    name: GetAll(Of TResult)
    nameWithType: RepositoryWrapper(Of AuthCredentials).GetAll(Of TResult)
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).GetAll(Of TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: IQueryOptions
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.GetMany(System.String[])
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.GetMany(System.String[])
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetMany(System.String[])
  name: GetMany(String[])
  nameWithType: RepositoryWrapper<AuthCredentials>.GetMany(String[])
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.GetMany(System.String[])
  nameWithType.vb: RepositoryWrapper(Of AuthCredentials).GetMany(String())
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).GetMany(System.String())
  name.vb: GetMany(String())
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetMany(System.String[])
    name: GetMany
    nameWithType: RepositoryWrapper<AuthCredentials>.GetMany
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.GetMany
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetMany(System.String[])
    name: GetMany
    nameWithType: RepositoryWrapper(Of AuthCredentials).GetMany
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).GetMany
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.GetMany(System.Collections.Generic.IEnumerable{System.String})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.GetMany(System.Collections.Generic.IEnumerable{System.String})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetMany(System.Collections.Generic.IEnumerable{System.String})
  name: GetMany(IEnumerable<String>)
  nameWithType: RepositoryWrapper<AuthCredentials>.GetMany(IEnumerable<String>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.GetMany(System.Collections.Generic.IEnumerable<System.String>)
  nameWithType.vb: RepositoryWrapper(Of AuthCredentials).GetMany(IEnumerable(Of String))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).GetMany(System.Collections.Generic.IEnumerable(Of System.String))
  name.vb: GetMany(IEnumerable(Of String))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetMany(System.Collections.Generic.IEnumerable{System.String})
    name: GetMany
    nameWithType: RepositoryWrapper<AuthCredentials>.GetMany
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.GetMany
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetMany(System.Collections.Generic.IEnumerable{System.String})
    name: GetMany
    nameWithType: RepositoryWrapper(Of AuthCredentials).GetMany
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).GetMany
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.GetMany(System.Collections.Generic.IEnumerable{System.String},IFetchStrategy{`0})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.GetMany(System.Collections.Generic.IEnumerable{System.String},IFetchStrategy{`0})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetMany(System.Collections.Generic.IEnumerable{System.String},IFetchStrategy{`0})
  name: GetMany(IEnumerable<String>, IFetchStrategy<>)
  nameWithType: RepositoryWrapper<AuthCredentials>.GetMany(IEnumerable<String>, IFetchStrategy<>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.GetMany(System.Collections.Generic.IEnumerable<System.String>, IFetchStrategy<>)
  nameWithType.vb: RepositoryWrapper(Of AuthCredentials).GetMany(IEnumerable(Of String), IFetchStrategy(Of ))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).GetMany(System.Collections.Generic.IEnumerable(Of System.String), IFetchStrategy(Of ))
  name.vb: GetMany(IEnumerable(Of String), IFetchStrategy(Of ))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetMany(System.Collections.Generic.IEnumerable{System.String},IFetchStrategy{`0})
    name: GetMany
    nameWithType: RepositoryWrapper<AuthCredentials>.GetMany
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.GetMany
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: IFetchStrategy`1
    name: IFetchStrategy
    nameWithType: IFetchStrategy
    fullName: IFetchStrategy
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetMany(System.Collections.Generic.IEnumerable{System.String},IFetchStrategy{`0})
    name: GetMany
    nameWithType: RepositoryWrapper(Of AuthCredentials).GetMany
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).GetMany
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: IFetchStrategy`1
    name: IFetchStrategy
    nameWithType: IFetchStrategy
    fullName: IFetchStrategy
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.GetMany``1(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,{TResult}}},System.String[])
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.GetMany``1(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,``0}},System.String[])
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetMany``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String[])
  name: GetMany<TResult>(Expression<Func<AuthCredentials, TResult>>, String[])
  nameWithType: RepositoryWrapper<AuthCredentials>.GetMany<TResult>(Expression<Func<AuthCredentials, TResult>>, String[])
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.GetMany<TResult>(System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Authentication.Models.AuthCredentials, TResult>>, System.String[])
  nameWithType.vb: RepositoryWrapper(Of AuthCredentials).GetMany(Of TResult)(Expression(Of Func(Of AuthCredentials, TResult)), String())
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).GetMany(Of TResult)(System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials, TResult)), System.String())
  name.vb: GetMany(Of TResult)(Expression(Of Func(Of AuthCredentials, TResult)), String())
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetMany``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String[])
    name: GetMany<TResult>
    nameWithType: RepositoryWrapper<AuthCredentials>.GetMany<TResult>
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.GetMany<TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetMany``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String[])
    name: GetMany(Of TResult)
    nameWithType: RepositoryWrapper(Of AuthCredentials).GetMany(Of TResult)
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).GetMany(Of TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.GetMany``1(System.Collections.Generic.IEnumerable{System.String},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,{TResult}}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.GetMany``1(System.Collections.Generic.IEnumerable{System.String},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,``0}})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetMany``1(System.Collections.Generic.IEnumerable{System.String},System.Linq.Expressions.Expression{System.Func{`0,``0}})
  name: GetMany<TResult>(IEnumerable<String>, Expression<Func<AuthCredentials, TResult>>)
  nameWithType: RepositoryWrapper<AuthCredentials>.GetMany<TResult>(IEnumerable<String>, Expression<Func<AuthCredentials, TResult>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.GetMany<TResult>(System.Collections.Generic.IEnumerable<System.String>, System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Authentication.Models.AuthCredentials, TResult>>)
  nameWithType.vb: RepositoryWrapper(Of AuthCredentials).GetMany(Of TResult)(IEnumerable(Of String), Expression(Of Func(Of AuthCredentials, TResult)))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).GetMany(Of TResult)(System.Collections.Generic.IEnumerable(Of System.String), System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials, TResult)))
  name.vb: GetMany(Of TResult)(IEnumerable(Of String), Expression(Of Func(Of AuthCredentials, TResult)))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetMany``1(System.Collections.Generic.IEnumerable{System.String},System.Linq.Expressions.Expression{System.Func{`0,``0}})
    name: GetMany<TResult>
    nameWithType: RepositoryWrapper<AuthCredentials>.GetMany<TResult>
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.GetMany<TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetMany``1(System.Collections.Generic.IEnumerable{System.String},System.Linq.Expressions.Expression{System.Func{`0,``0}})
    name: GetMany(Of TResult)
    nameWithType: RepositoryWrapper(Of AuthCredentials).GetMany(Of TResult)
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).GetMany(Of TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.GetManyAsDictionary(System.String[])
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.GetManyAsDictionary(System.String[])
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetManyAsDictionary(System.String[])
  name: GetManyAsDictionary(String[])
  nameWithType: RepositoryWrapper<AuthCredentials>.GetManyAsDictionary(String[])
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.GetManyAsDictionary(System.String[])
  nameWithType.vb: RepositoryWrapper(Of AuthCredentials).GetManyAsDictionary(String())
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).GetManyAsDictionary(System.String())
  name.vb: GetManyAsDictionary(String())
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetManyAsDictionary(System.String[])
    name: GetManyAsDictionary
    nameWithType: RepositoryWrapper<AuthCredentials>.GetManyAsDictionary
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.GetManyAsDictionary
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetManyAsDictionary(System.String[])
    name: GetManyAsDictionary
    nameWithType: RepositoryWrapper(Of AuthCredentials).GetManyAsDictionary
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).GetManyAsDictionary
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.GetManyAsDictionary(System.Collections.Generic.IEnumerable{System.String})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.GetManyAsDictionary(System.Collections.Generic.IEnumerable{System.String})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetManyAsDictionary(System.Collections.Generic.IEnumerable{System.String})
  name: GetManyAsDictionary(IEnumerable<String>)
  nameWithType: RepositoryWrapper<AuthCredentials>.GetManyAsDictionary(IEnumerable<String>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.GetManyAsDictionary(System.Collections.Generic.IEnumerable<System.String>)
  nameWithType.vb: RepositoryWrapper(Of AuthCredentials).GetManyAsDictionary(IEnumerable(Of String))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).GetManyAsDictionary(System.Collections.Generic.IEnumerable(Of System.String))
  name.vb: GetManyAsDictionary(IEnumerable(Of String))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetManyAsDictionary(System.Collections.Generic.IEnumerable{System.String})
    name: GetManyAsDictionary
    nameWithType: RepositoryWrapper<AuthCredentials>.GetManyAsDictionary
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.GetManyAsDictionary
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetManyAsDictionary(System.Collections.Generic.IEnumerable{System.String})
    name: GetManyAsDictionary
    nameWithType: RepositoryWrapper(Of AuthCredentials).GetManyAsDictionary
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).GetManyAsDictionary
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.GetManyAsDictionary(System.Collections.Generic.IEnumerable{System.String},IFetchStrategy{`0})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.GetManyAsDictionary(System.Collections.Generic.IEnumerable{System.String},IFetchStrategy{`0})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetManyAsDictionary(System.Collections.Generic.IEnumerable{System.String},IFetchStrategy{`0})
  name: GetManyAsDictionary(IEnumerable<String>, IFetchStrategy<>)
  nameWithType: RepositoryWrapper<AuthCredentials>.GetManyAsDictionary(IEnumerable<String>, IFetchStrategy<>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.GetManyAsDictionary(System.Collections.Generic.IEnumerable<System.String>, IFetchStrategy<>)
  nameWithType.vb: RepositoryWrapper(Of AuthCredentials).GetManyAsDictionary(IEnumerable(Of String), IFetchStrategy(Of ))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).GetManyAsDictionary(System.Collections.Generic.IEnumerable(Of System.String), IFetchStrategy(Of ))
  name.vb: GetManyAsDictionary(IEnumerable(Of String), IFetchStrategy(Of ))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetManyAsDictionary(System.Collections.Generic.IEnumerable{System.String},IFetchStrategy{`0})
    name: GetManyAsDictionary
    nameWithType: RepositoryWrapper<AuthCredentials>.GetManyAsDictionary
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.GetManyAsDictionary
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: IFetchStrategy`1
    name: IFetchStrategy
    nameWithType: IFetchStrategy
    fullName: IFetchStrategy
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetManyAsDictionary(System.Collections.Generic.IEnumerable{System.String},IFetchStrategy{`0})
    name: GetManyAsDictionary
    nameWithType: RepositoryWrapper(Of AuthCredentials).GetManyAsDictionary
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).GetManyAsDictionary
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: IFetchStrategy`1
    name: IFetchStrategy
    nameWithType: IFetchStrategy
    fullName: IFetchStrategy
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.GetPrimaryKey(Catalyst.Core.Modules.Authentication.Models.AuthCredentials)
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.GetPrimaryKey(Catalyst.Core.Modules.Authentication.Models.AuthCredentials)
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetPrimaryKey(`0)
  name: GetPrimaryKey(AuthCredentials)
  nameWithType: RepositoryWrapper<AuthCredentials>.GetPrimaryKey(AuthCredentials)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.GetPrimaryKey(Catalyst.Core.Modules.Authentication.Models.AuthCredentials)
  nameWithType.vb: RepositoryWrapper(Of AuthCredentials).GetPrimaryKey(AuthCredentials)
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).GetPrimaryKey(Catalyst.Core.Modules.Authentication.Models.AuthCredentials)
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetPrimaryKey(`0)
    name: GetPrimaryKey
    nameWithType: RepositoryWrapper<AuthCredentials>.GetPrimaryKey
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.GetPrimaryKey
  - name: (
    nameWithType: (
    fullName: (
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetPrimaryKey(`0)
    name: GetPrimaryKey
    nameWithType: RepositoryWrapper(Of AuthCredentials).GetPrimaryKey
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).GetPrimaryKey
  - name: (
    nameWithType: (
    fullName: (
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.GroupBy``2(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,{TGroupKey}}},System.Linq.Expressions.Expression{System.Func{System.Linq.IGrouping{{TGroupKey},Catalyst.Core.Modules.Authentication.Models.AuthCredentials},{TResult}}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.GroupBy``2(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,``0}},System.Linq.Expressions.Expression{System.Func{System.Linq.IGrouping{``0,Catalyst.Core.Modules.Authentication.Models.AuthCredentials},``1}})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GroupBy``2(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{System.Linq.IGrouping{``0,`0},``1}})
  name: GroupBy<TGroupKey, TResult>(Expression<Func<AuthCredentials, TGroupKey>>, Expression<Func<IGrouping<TGroupKey, AuthCredentials>, TResult>>)
  nameWithType: RepositoryWrapper<AuthCredentials>.GroupBy<TGroupKey, TResult>(Expression<Func<AuthCredentials, TGroupKey>>, Expression<Func<IGrouping<TGroupKey, AuthCredentials>, TResult>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.GroupBy<TGroupKey, TResult>(System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Authentication.Models.AuthCredentials, TGroupKey>>, System.Linq.Expressions.Expression<System.Func<System.Linq.IGrouping<TGroupKey, Catalyst.Core.Modules.Authentication.Models.AuthCredentials>, TResult>>)
  nameWithType.vb: RepositoryWrapper(Of AuthCredentials).GroupBy(Of TGroupKey, TResult)(Expression(Of Func(Of AuthCredentials, TGroupKey)), Expression(Of Func(Of IGrouping(Of TGroupKey, AuthCredentials), TResult)))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).GroupBy(Of TGroupKey, TResult)(System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials, TGroupKey)), System.Linq.Expressions.Expression(Of System.Func(Of System.Linq.IGrouping(Of TGroupKey, Catalyst.Core.Modules.Authentication.Models.AuthCredentials), TResult)))
  name.vb: GroupBy(Of TGroupKey, TResult)(Expression(Of Func(Of AuthCredentials, TGroupKey)), Expression(Of Func(Of IGrouping(Of TGroupKey, AuthCredentials), TResult)))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GroupBy``2(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{System.Linq.IGrouping{``0,`0},``1}})
    name: GroupBy<TGroupKey, TResult>
    nameWithType: RepositoryWrapper<AuthCredentials>.GroupBy<TGroupKey, TResult>
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.GroupBy<TGroupKey, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TGroupKey
    nameWithType: TGroupKey
    fullName: TGroupKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Linq.IGrouping`2
    name: IGrouping
    nameWithType: IGrouping
    fullName: System.Linq.IGrouping
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TGroupKey
    nameWithType: TGroupKey
    fullName: TGroupKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GroupBy``2(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{System.Linq.IGrouping{``0,`0},``1}})
    name: GroupBy(Of TGroupKey, TResult)
    nameWithType: RepositoryWrapper(Of AuthCredentials).GroupBy(Of TGroupKey, TResult)
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).GroupBy(Of TGroupKey, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TGroupKey
    nameWithType: TGroupKey
    fullName: TGroupKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Linq.IGrouping`2
    name: IGrouping
    nameWithType: IGrouping
    fullName: System.Linq.IGrouping
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TGroupKey
    nameWithType: TGroupKey
    fullName: TGroupKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.GroupBy``2(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,{TGroupKey}}},System.Linq.Expressions.Expression{System.Func{System.Linq.IGrouping{{TGroupKey},Catalyst.Core.Modules.Authentication.Models.AuthCredentials},{TResult}}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.GroupBy``2(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,``0}},System.Linq.Expressions.Expression{System.Func{System.Linq.IGrouping{``0,Catalyst.Core.Modules.Authentication.Models.AuthCredentials},``1}})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GroupBy``2(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{System.Linq.IGrouping{``0,`0},``1}})
  name: GroupBy<TGroupKey, TResult>(ISpecification<>, Expression<Func<AuthCredentials, TGroupKey>>, Expression<Func<IGrouping<TGroupKey, AuthCredentials>, TResult>>)
  nameWithType: RepositoryWrapper<AuthCredentials>.GroupBy<TGroupKey, TResult>(ISpecification<>, Expression<Func<AuthCredentials, TGroupKey>>, Expression<Func<IGrouping<TGroupKey, AuthCredentials>, TResult>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.GroupBy<TGroupKey, TResult>(ISpecification<>, System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Authentication.Models.AuthCredentials, TGroupKey>>, System.Linq.Expressions.Expression<System.Func<System.Linq.IGrouping<TGroupKey, Catalyst.Core.Modules.Authentication.Models.AuthCredentials>, TResult>>)
  nameWithType.vb: RepositoryWrapper(Of AuthCredentials).GroupBy(Of TGroupKey, TResult)(ISpecification(Of ), Expression(Of Func(Of AuthCredentials, TGroupKey)), Expression(Of Func(Of IGrouping(Of TGroupKey, AuthCredentials), TResult)))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).GroupBy(Of TGroupKey, TResult)(ISpecification(Of ), System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials, TGroupKey)), System.Linq.Expressions.Expression(Of System.Func(Of System.Linq.IGrouping(Of TGroupKey, Catalyst.Core.Modules.Authentication.Models.AuthCredentials), TResult)))
  name.vb: GroupBy(Of TGroupKey, TResult)(ISpecification(Of ), Expression(Of Func(Of AuthCredentials, TGroupKey)), Expression(Of Func(Of IGrouping(Of TGroupKey, AuthCredentials), TResult)))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GroupBy``2(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{System.Linq.IGrouping{``0,`0},``1}})
    name: GroupBy<TGroupKey, TResult>
    nameWithType: RepositoryWrapper<AuthCredentials>.GroupBy<TGroupKey, TResult>
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.GroupBy<TGroupKey, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TGroupKey
    nameWithType: TGroupKey
    fullName: TGroupKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Linq.IGrouping`2
    name: IGrouping
    nameWithType: IGrouping
    fullName: System.Linq.IGrouping
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TGroupKey
    nameWithType: TGroupKey
    fullName: TGroupKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GroupBy``2(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{System.Linq.IGrouping{``0,`0},``1}})
    name: GroupBy(Of TGroupKey, TResult)
    nameWithType: RepositoryWrapper(Of AuthCredentials).GroupBy(Of TGroupKey, TResult)
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).GroupBy(Of TGroupKey, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TGroupKey
    nameWithType: TGroupKey
    fullName: TGroupKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Linq.IGrouping`2
    name: IGrouping
    nameWithType: IGrouping
    fullName: System.Linq.IGrouping
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TGroupKey
    nameWithType: TGroupKey
    fullName: TGroupKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.GroupBy``2(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,{TGroupKey}}},System.Linq.Expressions.Expression{System.Func{System.Linq.IGrouping{{TGroupKey},Catalyst.Core.Modules.Authentication.Models.AuthCredentials},{TResult}}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.GroupBy``2(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,``0}},System.Linq.Expressions.Expression{System.Func{System.Linq.IGrouping{``0,Catalyst.Core.Modules.Authentication.Models.AuthCredentials},``1}})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GroupBy``2(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{System.Linq.IGrouping{``0,`0},``1}})
  name: GroupBy<TGroupKey, TResult>(Expression<Func<AuthCredentials, Boolean>>, Expression<Func<AuthCredentials, TGroupKey>>, Expression<Func<IGrouping<TGroupKey, AuthCredentials>, TResult>>)
  nameWithType: RepositoryWrapper<AuthCredentials>.GroupBy<TGroupKey, TResult>(Expression<Func<AuthCredentials, Boolean>>, Expression<Func<AuthCredentials, TGroupKey>>, Expression<Func<IGrouping<TGroupKey, AuthCredentials>, TResult>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.GroupBy<TGroupKey, TResult>(System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Authentication.Models.AuthCredentials, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Authentication.Models.AuthCredentials, TGroupKey>>, System.Linq.Expressions.Expression<System.Func<System.Linq.IGrouping<TGroupKey, Catalyst.Core.Modules.Authentication.Models.AuthCredentials>, TResult>>)
  nameWithType.vb: RepositoryWrapper(Of AuthCredentials).GroupBy(Of TGroupKey, TResult)(Expression(Of Func(Of AuthCredentials, Boolean)), Expression(Of Func(Of AuthCredentials, TGroupKey)), Expression(Of Func(Of IGrouping(Of TGroupKey, AuthCredentials), TResult)))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).GroupBy(Of TGroupKey, TResult)(System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials, TGroupKey)), System.Linq.Expressions.Expression(Of System.Func(Of System.Linq.IGrouping(Of TGroupKey, Catalyst.Core.Modules.Authentication.Models.AuthCredentials), TResult)))
  name.vb: GroupBy(Of TGroupKey, TResult)(Expression(Of Func(Of AuthCredentials, Boolean)), Expression(Of Func(Of AuthCredentials, TGroupKey)), Expression(Of Func(Of IGrouping(Of TGroupKey, AuthCredentials), TResult)))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GroupBy``2(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{System.Linq.IGrouping{``0,`0},``1}})
    name: GroupBy<TGroupKey, TResult>
    nameWithType: RepositoryWrapper<AuthCredentials>.GroupBy<TGroupKey, TResult>
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.GroupBy<TGroupKey, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TGroupKey
    nameWithType: TGroupKey
    fullName: TGroupKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Linq.IGrouping`2
    name: IGrouping
    nameWithType: IGrouping
    fullName: System.Linq.IGrouping
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TGroupKey
    nameWithType: TGroupKey
    fullName: TGroupKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GroupBy``2(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{System.Linq.IGrouping{``0,`0},``1}})
    name: GroupBy(Of TGroupKey, TResult)
    nameWithType: RepositoryWrapper(Of AuthCredentials).GroupBy(Of TGroupKey, TResult)
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).GroupBy(Of TGroupKey, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TGroupKey
    nameWithType: TGroupKey
    fullName: TGroupKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Linq.IGrouping`2
    name: IGrouping
    nameWithType: IGrouping
    fullName: System.Linq.IGrouping
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TGroupKey
    nameWithType: TGroupKey
    fullName: TGroupKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.GroupCount``1(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,{TGroupKey}}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.GroupCount``1(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,``0}})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GroupCount``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})
  name: GroupCount<TGroupKey>(Expression<Func<AuthCredentials, TGroupKey>>)
  nameWithType: RepositoryWrapper<AuthCredentials>.GroupCount<TGroupKey>(Expression<Func<AuthCredentials, TGroupKey>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.GroupCount<TGroupKey>(System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Authentication.Models.AuthCredentials, TGroupKey>>)
  nameWithType.vb: RepositoryWrapper(Of AuthCredentials).GroupCount(Of TGroupKey)(Expression(Of Func(Of AuthCredentials, TGroupKey)))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).GroupCount(Of TGroupKey)(System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials, TGroupKey)))
  name.vb: GroupCount(Of TGroupKey)(Expression(Of Func(Of AuthCredentials, TGroupKey)))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GroupCount``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})
    name: GroupCount<TGroupKey>
    nameWithType: RepositoryWrapper<AuthCredentials>.GroupCount<TGroupKey>
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.GroupCount<TGroupKey>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TGroupKey
    nameWithType: TGroupKey
    fullName: TGroupKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GroupCount``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})
    name: GroupCount(Of TGroupKey)
    nameWithType: RepositoryWrapper(Of AuthCredentials).GroupCount(Of TGroupKey)
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).GroupCount(Of TGroupKey)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TGroupKey
    nameWithType: TGroupKey
    fullName: TGroupKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.GroupCount``1(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,{TGroupKey}}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.GroupCount``1(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,``0}})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GroupCount``1(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}})
  name: GroupCount<TGroupKey>(ISpecification<>, Expression<Func<AuthCredentials, TGroupKey>>)
  nameWithType: RepositoryWrapper<AuthCredentials>.GroupCount<TGroupKey>(ISpecification<>, Expression<Func<AuthCredentials, TGroupKey>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.GroupCount<TGroupKey>(ISpecification<>, System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Authentication.Models.AuthCredentials, TGroupKey>>)
  nameWithType.vb: RepositoryWrapper(Of AuthCredentials).GroupCount(Of TGroupKey)(ISpecification(Of ), Expression(Of Func(Of AuthCredentials, TGroupKey)))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).GroupCount(Of TGroupKey)(ISpecification(Of ), System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials, TGroupKey)))
  name.vb: GroupCount(Of TGroupKey)(ISpecification(Of ), Expression(Of Func(Of AuthCredentials, TGroupKey)))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GroupCount``1(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}})
    name: GroupCount<TGroupKey>
    nameWithType: RepositoryWrapper<AuthCredentials>.GroupCount<TGroupKey>
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.GroupCount<TGroupKey>
  - name: (
    nameWithType: (
    fullName: (
  - uid: ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TGroupKey
    nameWithType: TGroupKey
    fullName: TGroupKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GroupCount``1(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}})
    name: GroupCount(Of TGroupKey)
    nameWithType: RepositoryWrapper(Of AuthCredentials).GroupCount(Of TGroupKey)
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).GroupCount(Of TGroupKey)
  - name: (
    nameWithType: (
    fullName: (
  - uid: ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TGroupKey
    nameWithType: TGroupKey
    fullName: TGroupKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.GroupCount``1(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,{TGroupKey}}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.GroupCount``1(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,``0}})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GroupCount``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}})
  name: GroupCount<TGroupKey>(Expression<Func<AuthCredentials, Boolean>>, Expression<Func<AuthCredentials, TGroupKey>>)
  nameWithType: RepositoryWrapper<AuthCredentials>.GroupCount<TGroupKey>(Expression<Func<AuthCredentials, Boolean>>, Expression<Func<AuthCredentials, TGroupKey>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.GroupCount<TGroupKey>(System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Authentication.Models.AuthCredentials, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Authentication.Models.AuthCredentials, TGroupKey>>)
  nameWithType.vb: RepositoryWrapper(Of AuthCredentials).GroupCount(Of TGroupKey)(Expression(Of Func(Of AuthCredentials, Boolean)), Expression(Of Func(Of AuthCredentials, TGroupKey)))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).GroupCount(Of TGroupKey)(System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials, TGroupKey)))
  name.vb: GroupCount(Of TGroupKey)(Expression(Of Func(Of AuthCredentials, Boolean)), Expression(Of Func(Of AuthCredentials, TGroupKey)))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GroupCount``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}})
    name: GroupCount<TGroupKey>
    nameWithType: RepositoryWrapper<AuthCredentials>.GroupCount<TGroupKey>
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.GroupCount<TGroupKey>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TGroupKey
    nameWithType: TGroupKey
    fullName: TGroupKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GroupCount``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}})
    name: GroupCount(Of TGroupKey)
    nameWithType: RepositoryWrapper(Of AuthCredentials).GroupCount(Of TGroupKey)
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).GroupCount(Of TGroupKey)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TGroupKey
    nameWithType: TGroupKey
    fullName: TGroupKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.GroupLongCount``1(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,{TGroupKey}}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.GroupLongCount``1(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,``0}})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GroupLongCount``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})
  name: GroupLongCount<TGroupKey>(Expression<Func<AuthCredentials, TGroupKey>>)
  nameWithType: RepositoryWrapper<AuthCredentials>.GroupLongCount<TGroupKey>(Expression<Func<AuthCredentials, TGroupKey>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.GroupLongCount<TGroupKey>(System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Authentication.Models.AuthCredentials, TGroupKey>>)
  nameWithType.vb: RepositoryWrapper(Of AuthCredentials).GroupLongCount(Of TGroupKey)(Expression(Of Func(Of AuthCredentials, TGroupKey)))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).GroupLongCount(Of TGroupKey)(System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials, TGroupKey)))
  name.vb: GroupLongCount(Of TGroupKey)(Expression(Of Func(Of AuthCredentials, TGroupKey)))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GroupLongCount``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})
    name: GroupLongCount<TGroupKey>
    nameWithType: RepositoryWrapper<AuthCredentials>.GroupLongCount<TGroupKey>
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.GroupLongCount<TGroupKey>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TGroupKey
    nameWithType: TGroupKey
    fullName: TGroupKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GroupLongCount``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})
    name: GroupLongCount(Of TGroupKey)
    nameWithType: RepositoryWrapper(Of AuthCredentials).GroupLongCount(Of TGroupKey)
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).GroupLongCount(Of TGroupKey)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TGroupKey
    nameWithType: TGroupKey
    fullName: TGroupKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.GroupLongCount``1(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,{TGroupKey}}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.GroupLongCount``1(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,``0}})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GroupLongCount``1(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}})
  name: GroupLongCount<TGroupKey>(ISpecification<>, Expression<Func<AuthCredentials, TGroupKey>>)
  nameWithType: RepositoryWrapper<AuthCredentials>.GroupLongCount<TGroupKey>(ISpecification<>, Expression<Func<AuthCredentials, TGroupKey>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.GroupLongCount<TGroupKey>(ISpecification<>, System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Authentication.Models.AuthCredentials, TGroupKey>>)
  nameWithType.vb: RepositoryWrapper(Of AuthCredentials).GroupLongCount(Of TGroupKey)(ISpecification(Of ), Expression(Of Func(Of AuthCredentials, TGroupKey)))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).GroupLongCount(Of TGroupKey)(ISpecification(Of ), System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials, TGroupKey)))
  name.vb: GroupLongCount(Of TGroupKey)(ISpecification(Of ), Expression(Of Func(Of AuthCredentials, TGroupKey)))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GroupLongCount``1(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}})
    name: GroupLongCount<TGroupKey>
    nameWithType: RepositoryWrapper<AuthCredentials>.GroupLongCount<TGroupKey>
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.GroupLongCount<TGroupKey>
  - name: (
    nameWithType: (
    fullName: (
  - uid: ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TGroupKey
    nameWithType: TGroupKey
    fullName: TGroupKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GroupLongCount``1(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}})
    name: GroupLongCount(Of TGroupKey)
    nameWithType: RepositoryWrapper(Of AuthCredentials).GroupLongCount(Of TGroupKey)
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).GroupLongCount(Of TGroupKey)
  - name: (
    nameWithType: (
    fullName: (
  - uid: ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TGroupKey
    nameWithType: TGroupKey
    fullName: TGroupKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.GroupLongCount``1(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,{TGroupKey}}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.GroupLongCount``1(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,``0}})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GroupLongCount``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}})
  name: GroupLongCount<TGroupKey>(Expression<Func<AuthCredentials, Boolean>>, Expression<Func<AuthCredentials, TGroupKey>>)
  nameWithType: RepositoryWrapper<AuthCredentials>.GroupLongCount<TGroupKey>(Expression<Func<AuthCredentials, Boolean>>, Expression<Func<AuthCredentials, TGroupKey>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.GroupLongCount<TGroupKey>(System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Authentication.Models.AuthCredentials, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Authentication.Models.AuthCredentials, TGroupKey>>)
  nameWithType.vb: RepositoryWrapper(Of AuthCredentials).GroupLongCount(Of TGroupKey)(Expression(Of Func(Of AuthCredentials, Boolean)), Expression(Of Func(Of AuthCredentials, TGroupKey)))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).GroupLongCount(Of TGroupKey)(System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials, TGroupKey)))
  name.vb: GroupLongCount(Of TGroupKey)(Expression(Of Func(Of AuthCredentials, Boolean)), Expression(Of Func(Of AuthCredentials, TGroupKey)))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GroupLongCount``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}})
    name: GroupLongCount<TGroupKey>
    nameWithType: RepositoryWrapper<AuthCredentials>.GroupLongCount<TGroupKey>
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.GroupLongCount<TGroupKey>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TGroupKey
    nameWithType: TGroupKey
    fullName: TGroupKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GroupLongCount``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}})
    name: GroupLongCount(Of TGroupKey)
    nameWithType: RepositoryWrapper(Of AuthCredentials).GroupLongCount(Of TGroupKey)
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).GroupLongCount(Of TGroupKey)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TGroupKey
    nameWithType: TGroupKey
    fullName: TGroupKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Join``3(IRepositoryQueryable{`0},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,{TJoinKey}}},System.Linq.Expressions.Expression{System.Func{{TInner},{TJoinKey}}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,{TInner},{TResult}}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Join``3(IRepositoryQueryable{`0},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,``0}},System.Linq.Expressions.Expression{System.Func{``1,``0}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,``1,``2}})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Join``3(IRepositoryQueryable{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{``1,``0}},System.Linq.Expressions.Expression{System.Func{`0,``1,``2}})
  name: Join<TJoinKey, TInner, TResult>(IRepositoryQueryable<>, Expression<Func<AuthCredentials, TJoinKey>>, Expression<Func<TInner, TJoinKey>>, Expression<Func<AuthCredentials, TInner, TResult>>)
  nameWithType: RepositoryWrapper<AuthCredentials>.Join<TJoinKey, TInner, TResult>(IRepositoryQueryable<>, Expression<Func<AuthCredentials, TJoinKey>>, Expression<Func<TInner, TJoinKey>>, Expression<Func<AuthCredentials, TInner, TResult>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.Join<TJoinKey, TInner, TResult>(IRepositoryQueryable<>, System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Authentication.Models.AuthCredentials, TJoinKey>>, System.Linq.Expressions.Expression<System.Func<TInner, TJoinKey>>, System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Authentication.Models.AuthCredentials, TInner, TResult>>)
  nameWithType.vb: RepositoryWrapper(Of AuthCredentials).Join(Of TJoinKey, TInner, TResult)(IRepositoryQueryable(Of ), Expression(Of Func(Of AuthCredentials, TJoinKey)), Expression(Of Func(Of TInner, TJoinKey)), Expression(Of Func(Of AuthCredentials, TInner, TResult)))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).Join(Of TJoinKey, TInner, TResult)(IRepositoryQueryable(Of ), System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials, TJoinKey)), System.Linq.Expressions.Expression(Of System.Func(Of TInner, TJoinKey)), System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials, TInner, TResult)))
  name.vb: Join(Of TJoinKey, TInner, TResult)(IRepositoryQueryable(Of ), Expression(Of Func(Of AuthCredentials, TJoinKey)), Expression(Of Func(Of TInner, TJoinKey)), Expression(Of Func(Of AuthCredentials, TInner, TResult)))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Join``3(IRepositoryQueryable{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{``1,``0}},System.Linq.Expressions.Expression{System.Func{`0,``1,``2}})
    name: Join<TJoinKey, TInner, TResult>
    nameWithType: RepositoryWrapper<AuthCredentials>.Join<TJoinKey, TInner, TResult>
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.Join<TJoinKey, TInner, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: IRepositoryQueryable`1
    name: IRepositoryQueryable
    nameWithType: IRepositoryQueryable
    fullName: IRepositoryQueryable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TJoinKey
    nameWithType: TJoinKey
    fullName: TJoinKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TJoinKey
    nameWithType: TJoinKey
    fullName: TJoinKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Join``3(IRepositoryQueryable{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{``1,``0}},System.Linq.Expressions.Expression{System.Func{`0,``1,``2}})
    name: Join(Of TJoinKey, TInner, TResult)
    nameWithType: RepositoryWrapper(Of AuthCredentials).Join(Of TJoinKey, TInner, TResult)
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).Join(Of TJoinKey, TInner, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: IRepositoryQueryable`1
    name: IRepositoryQueryable
    nameWithType: IRepositoryQueryable
    fullName: IRepositoryQueryable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TJoinKey
    nameWithType: TJoinKey
    fullName: TJoinKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TJoinKey
    nameWithType: TJoinKey
    fullName: TJoinKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.LongCount
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.LongCount
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.LongCount
  name: LongCount()
  nameWithType: RepositoryWrapper<AuthCredentials>.LongCount()
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.LongCount()
  nameWithType.vb: RepositoryWrapper(Of AuthCredentials).LongCount()
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).LongCount()
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.LongCount
    name: LongCount
    nameWithType: RepositoryWrapper<AuthCredentials>.LongCount
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.LongCount
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.LongCount
    name: LongCount
    nameWithType: RepositoryWrapper(Of AuthCredentials).LongCount
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).LongCount
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.LongCount(ISpecification{`0})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.LongCount(ISpecification{`0})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.LongCount(ISpecification{`0})
  name: LongCount(ISpecification<>)
  nameWithType: RepositoryWrapper<AuthCredentials>.LongCount(ISpecification<>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.LongCount(ISpecification<>)
  nameWithType.vb: RepositoryWrapper(Of AuthCredentials).LongCount(ISpecification(Of ))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).LongCount(ISpecification(Of ))
  name.vb: LongCount(ISpecification(Of ))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.LongCount(ISpecification{`0})
    name: LongCount
    nameWithType: RepositoryWrapper<AuthCredentials>.LongCount
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.LongCount
  - name: (
    nameWithType: (
    fullName: (
  - uid: ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.LongCount(ISpecification{`0})
    name: LongCount
    nameWithType: RepositoryWrapper(Of AuthCredentials).LongCount
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).LongCount
  - name: (
    nameWithType: (
    fullName: (
  - uid: ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.LongCount(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Boolean}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.LongCount(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Boolean}})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.LongCount(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  name: LongCount(Expression<Func<AuthCredentials, Boolean>>)
  nameWithType: RepositoryWrapper<AuthCredentials>.LongCount(Expression<Func<AuthCredentials, Boolean>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.LongCount(System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Authentication.Models.AuthCredentials, System.Boolean>>)
  nameWithType.vb: RepositoryWrapper(Of AuthCredentials).LongCount(Expression(Of Func(Of AuthCredentials, Boolean)))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).LongCount(System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials, System.Boolean)))
  name.vb: LongCount(Expression(Of Func(Of AuthCredentials, Boolean)))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.LongCount(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
    name: LongCount
    nameWithType: RepositoryWrapper<AuthCredentials>.LongCount
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.LongCount
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.LongCount(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
    name: LongCount
    nameWithType: RepositoryWrapper(Of AuthCredentials).LongCount
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).LongCount
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Max``1(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,{TResult}}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Max``1(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,``0}})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Max``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})
  name: Max<TResult>(Expression<Func<AuthCredentials, TResult>>)
  nameWithType: RepositoryWrapper<AuthCredentials>.Max<TResult>(Expression<Func<AuthCredentials, TResult>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.Max<TResult>(System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Authentication.Models.AuthCredentials, TResult>>)
  nameWithType.vb: RepositoryWrapper(Of AuthCredentials).Max(Of TResult)(Expression(Of Func(Of AuthCredentials, TResult)))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).Max(Of TResult)(System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials, TResult)))
  name.vb: Max(Of TResult)(Expression(Of Func(Of AuthCredentials, TResult)))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Max``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})
    name: Max<TResult>
    nameWithType: RepositoryWrapper<AuthCredentials>.Max<TResult>
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.Max<TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Max``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})
    name: Max(Of TResult)
    nameWithType: RepositoryWrapper(Of AuthCredentials).Max(Of TResult)
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).Max(Of TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Max``1(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,{TResult}}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Max``1(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,``0}})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Max``1(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}})
  name: Max<TResult>(ISpecification<>, Expression<Func<AuthCredentials, TResult>>)
  nameWithType: RepositoryWrapper<AuthCredentials>.Max<TResult>(ISpecification<>, Expression<Func<AuthCredentials, TResult>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.Max<TResult>(ISpecification<>, System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Authentication.Models.AuthCredentials, TResult>>)
  nameWithType.vb: RepositoryWrapper(Of AuthCredentials).Max(Of TResult)(ISpecification(Of ), Expression(Of Func(Of AuthCredentials, TResult)))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).Max(Of TResult)(ISpecification(Of ), System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials, TResult)))
  name.vb: Max(Of TResult)(ISpecification(Of ), Expression(Of Func(Of AuthCredentials, TResult)))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Max``1(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}})
    name: Max<TResult>
    nameWithType: RepositoryWrapper<AuthCredentials>.Max<TResult>
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.Max<TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Max``1(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}})
    name: Max(Of TResult)
    nameWithType: RepositoryWrapper(Of AuthCredentials).Max(Of TResult)
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).Max(Of TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Max``1(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,{TResult}}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Max``1(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,``0}})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Max``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}})
  name: Max<TResult>(Expression<Func<AuthCredentials, Boolean>>, Expression<Func<AuthCredentials, TResult>>)
  nameWithType: RepositoryWrapper<AuthCredentials>.Max<TResult>(Expression<Func<AuthCredentials, Boolean>>, Expression<Func<AuthCredentials, TResult>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.Max<TResult>(System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Authentication.Models.AuthCredentials, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Authentication.Models.AuthCredentials, TResult>>)
  nameWithType.vb: RepositoryWrapper(Of AuthCredentials).Max(Of TResult)(Expression(Of Func(Of AuthCredentials, Boolean)), Expression(Of Func(Of AuthCredentials, TResult)))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).Max(Of TResult)(System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials, TResult)))
  name.vb: Max(Of TResult)(Expression(Of Func(Of AuthCredentials, Boolean)), Expression(Of Func(Of AuthCredentials, TResult)))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Max``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}})
    name: Max<TResult>
    nameWithType: RepositoryWrapper<AuthCredentials>.Max<TResult>
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.Max<TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Max``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}})
    name: Max(Of TResult)
    nameWithType: RepositoryWrapper(Of AuthCredentials).Max(Of TResult)
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).Max(Of TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Min``1(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,{TResult}}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Min``1(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,``0}})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Min``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})
  name: Min<TResult>(Expression<Func<AuthCredentials, TResult>>)
  nameWithType: RepositoryWrapper<AuthCredentials>.Min<TResult>(Expression<Func<AuthCredentials, TResult>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.Min<TResult>(System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Authentication.Models.AuthCredentials, TResult>>)
  nameWithType.vb: RepositoryWrapper(Of AuthCredentials).Min(Of TResult)(Expression(Of Func(Of AuthCredentials, TResult)))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).Min(Of TResult)(System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials, TResult)))
  name.vb: Min(Of TResult)(Expression(Of Func(Of AuthCredentials, TResult)))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Min``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})
    name: Min<TResult>
    nameWithType: RepositoryWrapper<AuthCredentials>.Min<TResult>
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.Min<TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Min``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})
    name: Min(Of TResult)
    nameWithType: RepositoryWrapper(Of AuthCredentials).Min(Of TResult)
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).Min(Of TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Min``1(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,{TResult}}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Min``1(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,``0}})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Min``1(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}})
  name: Min<TResult>(ISpecification<>, Expression<Func<AuthCredentials, TResult>>)
  nameWithType: RepositoryWrapper<AuthCredentials>.Min<TResult>(ISpecification<>, Expression<Func<AuthCredentials, TResult>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.Min<TResult>(ISpecification<>, System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Authentication.Models.AuthCredentials, TResult>>)
  nameWithType.vb: RepositoryWrapper(Of AuthCredentials).Min(Of TResult)(ISpecification(Of ), Expression(Of Func(Of AuthCredentials, TResult)))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).Min(Of TResult)(ISpecification(Of ), System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials, TResult)))
  name.vb: Min(Of TResult)(ISpecification(Of ), Expression(Of Func(Of AuthCredentials, TResult)))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Min``1(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}})
    name: Min<TResult>
    nameWithType: RepositoryWrapper<AuthCredentials>.Min<TResult>
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.Min<TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Min``1(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}})
    name: Min(Of TResult)
    nameWithType: RepositoryWrapper(Of AuthCredentials).Min(Of TResult)
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).Min(Of TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Min``1(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,{TResult}}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Min``1(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,``0}})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Min``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}})
  name: Min<TResult>(Expression<Func<AuthCredentials, Boolean>>, Expression<Func<AuthCredentials, TResult>>)
  nameWithType: RepositoryWrapper<AuthCredentials>.Min<TResult>(Expression<Func<AuthCredentials, Boolean>>, Expression<Func<AuthCredentials, TResult>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.Min<TResult>(System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Authentication.Models.AuthCredentials, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Authentication.Models.AuthCredentials, TResult>>)
  nameWithType.vb: RepositoryWrapper(Of AuthCredentials).Min(Of TResult)(Expression(Of Func(Of AuthCredentials, Boolean)), Expression(Of Func(Of AuthCredentials, TResult)))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).Min(Of TResult)(System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials, TResult)))
  name.vb: Min(Of TResult)(Expression(Of Func(Of AuthCredentials, Boolean)), Expression(Of Func(Of AuthCredentials, TResult)))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Min``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}})
    name: Min<TResult>
    nameWithType: RepositoryWrapper<AuthCredentials>.Min<TResult>
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.Min<TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Min``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}})
    name: Min(Of TResult)
    nameWithType: RepositoryWrapper(Of AuthCredentials).Min(Of TResult)
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).Min(Of TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Sum(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Int32}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Sum(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Int32}})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Int32}})
  name: Sum(Expression<Func<AuthCredentials, Int32>>)
  nameWithType: RepositoryWrapper<AuthCredentials>.Sum(Expression<Func<AuthCredentials, Int32>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.Sum(System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Authentication.Models.AuthCredentials, System.Int32>>)
  nameWithType.vb: RepositoryWrapper(Of AuthCredentials).Sum(Expression(Of Func(Of AuthCredentials, Int32)))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).Sum(System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials, System.Int32)))
  name.vb: Sum(Expression(Of Func(Of AuthCredentials, Int32)))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Int32}})
    name: Sum
    nameWithType: RepositoryWrapper<AuthCredentials>.Sum
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.Sum
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Int32}})
    name: Sum
    nameWithType: RepositoryWrapper(Of AuthCredentials).Sum
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).Sum
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Sum(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Int32}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Sum(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Int32}})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Int32}})
  name: Sum(ISpecification<>, Expression<Func<AuthCredentials, Int32>>)
  nameWithType: RepositoryWrapper<AuthCredentials>.Sum(ISpecification<>, Expression<Func<AuthCredentials, Int32>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.Sum(ISpecification<>, System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Authentication.Models.AuthCredentials, System.Int32>>)
  nameWithType.vb: RepositoryWrapper(Of AuthCredentials).Sum(ISpecification(Of ), Expression(Of Func(Of AuthCredentials, Int32)))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).Sum(ISpecification(Of ), System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials, System.Int32)))
  name.vb: Sum(ISpecification(Of ), Expression(Of Func(Of AuthCredentials, Int32)))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Int32}})
    name: Sum
    nameWithType: RepositoryWrapper<AuthCredentials>.Sum
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.Sum
  - name: (
    nameWithType: (
    fullName: (
  - uid: ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Int32}})
    name: Sum
    nameWithType: RepositoryWrapper(Of AuthCredentials).Sum
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).Sum
  - name: (
    nameWithType: (
    fullName: (
  - uid: ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Sum(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Int32}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Sum(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Int32}})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Int32}})
  name: Sum(Expression<Func<AuthCredentials, Boolean>>, Expression<Func<AuthCredentials, Int32>>)
  nameWithType: RepositoryWrapper<AuthCredentials>.Sum(Expression<Func<AuthCredentials, Boolean>>, Expression<Func<AuthCredentials, Int32>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.Sum(System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Authentication.Models.AuthCredentials, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Authentication.Models.AuthCredentials, System.Int32>>)
  nameWithType.vb: RepositoryWrapper(Of AuthCredentials).Sum(Expression(Of Func(Of AuthCredentials, Boolean)), Expression(Of Func(Of AuthCredentials, Int32)))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).Sum(System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials, System.Int32)))
  name.vb: Sum(Expression(Of Func(Of AuthCredentials, Boolean)), Expression(Of Func(Of AuthCredentials, Int32)))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Int32}})
    name: Sum
    nameWithType: RepositoryWrapper<AuthCredentials>.Sum
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.Sum
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Int32}})
    name: Sum
    nameWithType: RepositoryWrapper(Of AuthCredentials).Sum
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).Sum
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Sum(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Nullable{System.Int32}}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Sum(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Nullable{System.Int32}}})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int32}}})
  name: Sum(Expression<Func<AuthCredentials, Nullable<Int32>>>)
  nameWithType: RepositoryWrapper<AuthCredentials>.Sum(Expression<Func<AuthCredentials, Nullable<Int32>>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.Sum(System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Authentication.Models.AuthCredentials, System.Nullable<System.Int32>>>)
  nameWithType.vb: RepositoryWrapper(Of AuthCredentials).Sum(Expression(Of Func(Of AuthCredentials, Nullable(Of Int32))))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).Sum(System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials, System.Nullable(Of System.Int32))))
  name.vb: Sum(Expression(Of Func(Of AuthCredentials, Nullable(Of Int32))))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int32}}})
    name: Sum
    nameWithType: RepositoryWrapper<AuthCredentials>.Sum
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.Sum
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int32}}})
    name: Sum
    nameWithType: RepositoryWrapper(Of AuthCredentials).Sum
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).Sum
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Sum(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Nullable{System.Int32}}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Sum(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Nullable{System.Int32}}})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int32}}})
  name: Sum(ISpecification<>, Expression<Func<AuthCredentials, Nullable<Int32>>>)
  nameWithType: RepositoryWrapper<AuthCredentials>.Sum(ISpecification<>, Expression<Func<AuthCredentials, Nullable<Int32>>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.Sum(ISpecification<>, System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Authentication.Models.AuthCredentials, System.Nullable<System.Int32>>>)
  nameWithType.vb: RepositoryWrapper(Of AuthCredentials).Sum(ISpecification(Of ), Expression(Of Func(Of AuthCredentials, Nullable(Of Int32))))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).Sum(ISpecification(Of ), System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials, System.Nullable(Of System.Int32))))
  name.vb: Sum(ISpecification(Of ), Expression(Of Func(Of AuthCredentials, Nullable(Of Int32))))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int32}}})
    name: Sum
    nameWithType: RepositoryWrapper<AuthCredentials>.Sum
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.Sum
  - name: (
    nameWithType: (
    fullName: (
  - uid: ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int32}}})
    name: Sum
    nameWithType: RepositoryWrapper(Of AuthCredentials).Sum
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).Sum
  - name: (
    nameWithType: (
    fullName: (
  - uid: ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Sum(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Nullable{System.Int32}}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Sum(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Nullable{System.Int32}}})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int32}}})
  name: Sum(Expression<Func<AuthCredentials, Boolean>>, Expression<Func<AuthCredentials, Nullable<Int32>>>)
  nameWithType: RepositoryWrapper<AuthCredentials>.Sum(Expression<Func<AuthCredentials, Boolean>>, Expression<Func<AuthCredentials, Nullable<Int32>>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.Sum(System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Authentication.Models.AuthCredentials, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Authentication.Models.AuthCredentials, System.Nullable<System.Int32>>>)
  nameWithType.vb: RepositoryWrapper(Of AuthCredentials).Sum(Expression(Of Func(Of AuthCredentials, Boolean)), Expression(Of Func(Of AuthCredentials, Nullable(Of Int32))))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).Sum(System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials, System.Nullable(Of System.Int32))))
  name.vb: Sum(Expression(Of Func(Of AuthCredentials, Boolean)), Expression(Of Func(Of AuthCredentials, Nullable(Of Int32))))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int32}}})
    name: Sum
    nameWithType: RepositoryWrapper<AuthCredentials>.Sum
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.Sum
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int32}}})
    name: Sum
    nameWithType: RepositoryWrapper(Of AuthCredentials).Sum
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).Sum
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Sum(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Int64}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Sum(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Int64}})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Int64}})
  name: Sum(Expression<Func<AuthCredentials, Int64>>)
  nameWithType: RepositoryWrapper<AuthCredentials>.Sum(Expression<Func<AuthCredentials, Int64>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.Sum(System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Authentication.Models.AuthCredentials, System.Int64>>)
  nameWithType.vb: RepositoryWrapper(Of AuthCredentials).Sum(Expression(Of Func(Of AuthCredentials, Int64)))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).Sum(System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials, System.Int64)))
  name.vb: Sum(Expression(Of Func(Of AuthCredentials, Int64)))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Int64}})
    name: Sum
    nameWithType: RepositoryWrapper<AuthCredentials>.Sum
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.Sum
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Int64}})
    name: Sum
    nameWithType: RepositoryWrapper(Of AuthCredentials).Sum
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).Sum
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Sum(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Int64}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Sum(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Int64}})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Int64}})
  name: Sum(ISpecification<>, Expression<Func<AuthCredentials, Int64>>)
  nameWithType: RepositoryWrapper<AuthCredentials>.Sum(ISpecification<>, Expression<Func<AuthCredentials, Int64>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.Sum(ISpecification<>, System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Authentication.Models.AuthCredentials, System.Int64>>)
  nameWithType.vb: RepositoryWrapper(Of AuthCredentials).Sum(ISpecification(Of ), Expression(Of Func(Of AuthCredentials, Int64)))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).Sum(ISpecification(Of ), System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials, System.Int64)))
  name.vb: Sum(ISpecification(Of ), Expression(Of Func(Of AuthCredentials, Int64)))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Int64}})
    name: Sum
    nameWithType: RepositoryWrapper<AuthCredentials>.Sum
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.Sum
  - name: (
    nameWithType: (
    fullName: (
  - uid: ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Int64}})
    name: Sum
    nameWithType: RepositoryWrapper(Of AuthCredentials).Sum
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).Sum
  - name: (
    nameWithType: (
    fullName: (
  - uid: ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Sum(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Int64}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Sum(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Int64}})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Int64}})
  name: Sum(Expression<Func<AuthCredentials, Boolean>>, Expression<Func<AuthCredentials, Int64>>)
  nameWithType: RepositoryWrapper<AuthCredentials>.Sum(Expression<Func<AuthCredentials, Boolean>>, Expression<Func<AuthCredentials, Int64>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.Sum(System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Authentication.Models.AuthCredentials, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Authentication.Models.AuthCredentials, System.Int64>>)
  nameWithType.vb: RepositoryWrapper(Of AuthCredentials).Sum(Expression(Of Func(Of AuthCredentials, Boolean)), Expression(Of Func(Of AuthCredentials, Int64)))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).Sum(System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials, System.Int64)))
  name.vb: Sum(Expression(Of Func(Of AuthCredentials, Boolean)), Expression(Of Func(Of AuthCredentials, Int64)))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Int64}})
    name: Sum
    nameWithType: RepositoryWrapper<AuthCredentials>.Sum
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.Sum
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Int64}})
    name: Sum
    nameWithType: RepositoryWrapper(Of AuthCredentials).Sum
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).Sum
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Sum(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Nullable{System.Int64}}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Sum(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Nullable{System.Int64}}})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int64}}})
  name: Sum(Expression<Func<AuthCredentials, Nullable<Int64>>>)
  nameWithType: RepositoryWrapper<AuthCredentials>.Sum(Expression<Func<AuthCredentials, Nullable<Int64>>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.Sum(System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Authentication.Models.AuthCredentials, System.Nullable<System.Int64>>>)
  nameWithType.vb: RepositoryWrapper(Of AuthCredentials).Sum(Expression(Of Func(Of AuthCredentials, Nullable(Of Int64))))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).Sum(System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials, System.Nullable(Of System.Int64))))
  name.vb: Sum(Expression(Of Func(Of AuthCredentials, Nullable(Of Int64))))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int64}}})
    name: Sum
    nameWithType: RepositoryWrapper<AuthCredentials>.Sum
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.Sum
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int64}}})
    name: Sum
    nameWithType: RepositoryWrapper(Of AuthCredentials).Sum
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).Sum
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Sum(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Nullable{System.Int64}}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Sum(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Nullable{System.Int64}}})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int64}}})
  name: Sum(ISpecification<>, Expression<Func<AuthCredentials, Nullable<Int64>>>)
  nameWithType: RepositoryWrapper<AuthCredentials>.Sum(ISpecification<>, Expression<Func<AuthCredentials, Nullable<Int64>>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.Sum(ISpecification<>, System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Authentication.Models.AuthCredentials, System.Nullable<System.Int64>>>)
  nameWithType.vb: RepositoryWrapper(Of AuthCredentials).Sum(ISpecification(Of ), Expression(Of Func(Of AuthCredentials, Nullable(Of Int64))))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).Sum(ISpecification(Of ), System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials, System.Nullable(Of System.Int64))))
  name.vb: Sum(ISpecification(Of ), Expression(Of Func(Of AuthCredentials, Nullable(Of Int64))))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int64}}})
    name: Sum
    nameWithType: RepositoryWrapper<AuthCredentials>.Sum
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.Sum
  - name: (
    nameWithType: (
    fullName: (
  - uid: ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int64}}})
    name: Sum
    nameWithType: RepositoryWrapper(Of AuthCredentials).Sum
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).Sum
  - name: (
    nameWithType: (
    fullName: (
  - uid: ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Sum(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Nullable{System.Int64}}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Sum(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Nullable{System.Int64}}})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int64}}})
  name: Sum(Expression<Func<AuthCredentials, Boolean>>, Expression<Func<AuthCredentials, Nullable<Int64>>>)
  nameWithType: RepositoryWrapper<AuthCredentials>.Sum(Expression<Func<AuthCredentials, Boolean>>, Expression<Func<AuthCredentials, Nullable<Int64>>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.Sum(System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Authentication.Models.AuthCredentials, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Authentication.Models.AuthCredentials, System.Nullable<System.Int64>>>)
  nameWithType.vb: RepositoryWrapper(Of AuthCredentials).Sum(Expression(Of Func(Of AuthCredentials, Boolean)), Expression(Of Func(Of AuthCredentials, Nullable(Of Int64))))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).Sum(System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials, System.Nullable(Of System.Int64))))
  name.vb: Sum(Expression(Of Func(Of AuthCredentials, Boolean)), Expression(Of Func(Of AuthCredentials, Nullable(Of Int64))))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int64}}})
    name: Sum
    nameWithType: RepositoryWrapper<AuthCredentials>.Sum
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.Sum
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int64}}})
    name: Sum
    nameWithType: RepositoryWrapper(Of AuthCredentials).Sum
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).Sum
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Sum(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Decimal}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Sum(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Decimal}})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}})
  name: Sum(Expression<Func<AuthCredentials, Decimal>>)
  nameWithType: RepositoryWrapper<AuthCredentials>.Sum(Expression<Func<AuthCredentials, Decimal>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.Sum(System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Authentication.Models.AuthCredentials, System.Decimal>>)
  nameWithType.vb: RepositoryWrapper(Of AuthCredentials).Sum(Expression(Of Func(Of AuthCredentials, Decimal)))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).Sum(System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials, System.Decimal)))
  name.vb: Sum(Expression(Of Func(Of AuthCredentials, Decimal)))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}})
    name: Sum
    nameWithType: RepositoryWrapper<AuthCredentials>.Sum
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.Sum
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}})
    name: Sum
    nameWithType: RepositoryWrapper(Of AuthCredentials).Sum
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).Sum
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Sum(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Decimal}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Sum(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Decimal}})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}})
  name: Sum(ISpecification<>, Expression<Func<AuthCredentials, Decimal>>)
  nameWithType: RepositoryWrapper<AuthCredentials>.Sum(ISpecification<>, Expression<Func<AuthCredentials, Decimal>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.Sum(ISpecification<>, System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Authentication.Models.AuthCredentials, System.Decimal>>)
  nameWithType.vb: RepositoryWrapper(Of AuthCredentials).Sum(ISpecification(Of ), Expression(Of Func(Of AuthCredentials, Decimal)))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).Sum(ISpecification(Of ), System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials, System.Decimal)))
  name.vb: Sum(ISpecification(Of ), Expression(Of Func(Of AuthCredentials, Decimal)))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}})
    name: Sum
    nameWithType: RepositoryWrapper<AuthCredentials>.Sum
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.Sum
  - name: (
    nameWithType: (
    fullName: (
  - uid: ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}})
    name: Sum
    nameWithType: RepositoryWrapper(Of AuthCredentials).Sum
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).Sum
  - name: (
    nameWithType: (
    fullName: (
  - uid: ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Sum(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Decimal}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Sum(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Decimal}})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}})
  name: Sum(Expression<Func<AuthCredentials, Boolean>>, Expression<Func<AuthCredentials, Decimal>>)
  nameWithType: RepositoryWrapper<AuthCredentials>.Sum(Expression<Func<AuthCredentials, Boolean>>, Expression<Func<AuthCredentials, Decimal>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.Sum(System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Authentication.Models.AuthCredentials, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Authentication.Models.AuthCredentials, System.Decimal>>)
  nameWithType.vb: RepositoryWrapper(Of AuthCredentials).Sum(Expression(Of Func(Of AuthCredentials, Boolean)), Expression(Of Func(Of AuthCredentials, Decimal)))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).Sum(System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials, System.Decimal)))
  name.vb: Sum(Expression(Of Func(Of AuthCredentials, Boolean)), Expression(Of Func(Of AuthCredentials, Decimal)))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}})
    name: Sum
    nameWithType: RepositoryWrapper<AuthCredentials>.Sum
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.Sum
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}})
    name: Sum
    nameWithType: RepositoryWrapper(Of AuthCredentials).Sum
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).Sum
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Sum(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Nullable{System.Decimal}}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Sum(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Nullable{System.Decimal}}})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Decimal}}})
  name: Sum(Expression<Func<AuthCredentials, Nullable<Decimal>>>)
  nameWithType: RepositoryWrapper<AuthCredentials>.Sum(Expression<Func<AuthCredentials, Nullable<Decimal>>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.Sum(System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Authentication.Models.AuthCredentials, System.Nullable<System.Decimal>>>)
  nameWithType.vb: RepositoryWrapper(Of AuthCredentials).Sum(Expression(Of Func(Of AuthCredentials, Nullable(Of Decimal))))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).Sum(System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials, System.Nullable(Of System.Decimal))))
  name.vb: Sum(Expression(Of Func(Of AuthCredentials, Nullable(Of Decimal))))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Decimal}}})
    name: Sum
    nameWithType: RepositoryWrapper<AuthCredentials>.Sum
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.Sum
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Decimal}}})
    name: Sum
    nameWithType: RepositoryWrapper(Of AuthCredentials).Sum
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).Sum
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Sum(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Nullable{System.Decimal}}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Sum(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Nullable{System.Decimal}}})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Decimal}}})
  name: Sum(ISpecification<>, Expression<Func<AuthCredentials, Nullable<Decimal>>>)
  nameWithType: RepositoryWrapper<AuthCredentials>.Sum(ISpecification<>, Expression<Func<AuthCredentials, Nullable<Decimal>>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.Sum(ISpecification<>, System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Authentication.Models.AuthCredentials, System.Nullable<System.Decimal>>>)
  nameWithType.vb: RepositoryWrapper(Of AuthCredentials).Sum(ISpecification(Of ), Expression(Of Func(Of AuthCredentials, Nullable(Of Decimal))))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).Sum(ISpecification(Of ), System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials, System.Nullable(Of System.Decimal))))
  name.vb: Sum(ISpecification(Of ), Expression(Of Func(Of AuthCredentials, Nullable(Of Decimal))))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Decimal}}})
    name: Sum
    nameWithType: RepositoryWrapper<AuthCredentials>.Sum
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.Sum
  - name: (
    nameWithType: (
    fullName: (
  - uid: ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Decimal}}})
    name: Sum
    nameWithType: RepositoryWrapper(Of AuthCredentials).Sum
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).Sum
  - name: (
    nameWithType: (
    fullName: (
  - uid: ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Sum(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Nullable{System.Decimal}}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Sum(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Nullable{System.Decimal}}})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Decimal}}})
  name: Sum(Expression<Func<AuthCredentials, Boolean>>, Expression<Func<AuthCredentials, Nullable<Decimal>>>)
  nameWithType: RepositoryWrapper<AuthCredentials>.Sum(Expression<Func<AuthCredentials, Boolean>>, Expression<Func<AuthCredentials, Nullable<Decimal>>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.Sum(System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Authentication.Models.AuthCredentials, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Authentication.Models.AuthCredentials, System.Nullable<System.Decimal>>>)
  nameWithType.vb: RepositoryWrapper(Of AuthCredentials).Sum(Expression(Of Func(Of AuthCredentials, Boolean)), Expression(Of Func(Of AuthCredentials, Nullable(Of Decimal))))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).Sum(System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials, System.Nullable(Of System.Decimal))))
  name.vb: Sum(Expression(Of Func(Of AuthCredentials, Boolean)), Expression(Of Func(Of AuthCredentials, Nullable(Of Decimal))))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Decimal}}})
    name: Sum
    nameWithType: RepositoryWrapper<AuthCredentials>.Sum
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.Sum
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Decimal}}})
    name: Sum
    nameWithType: RepositoryWrapper(Of AuthCredentials).Sum
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).Sum
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Sum(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Double}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Sum(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Double}})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Double}})
  name: Sum(Expression<Func<AuthCredentials, Double>>)
  nameWithType: RepositoryWrapper<AuthCredentials>.Sum(Expression<Func<AuthCredentials, Double>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.Sum(System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Authentication.Models.AuthCredentials, System.Double>>)
  nameWithType.vb: RepositoryWrapper(Of AuthCredentials).Sum(Expression(Of Func(Of AuthCredentials, Double)))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).Sum(System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials, System.Double)))
  name.vb: Sum(Expression(Of Func(Of AuthCredentials, Double)))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Double}})
    name: Sum
    nameWithType: RepositoryWrapper<AuthCredentials>.Sum
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.Sum
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Double}})
    name: Sum
    nameWithType: RepositoryWrapper(Of AuthCredentials).Sum
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).Sum
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Sum(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Double}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Sum(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Double}})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Double}})
  name: Sum(ISpecification<>, Expression<Func<AuthCredentials, Double>>)
  nameWithType: RepositoryWrapper<AuthCredentials>.Sum(ISpecification<>, Expression<Func<AuthCredentials, Double>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.Sum(ISpecification<>, System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Authentication.Models.AuthCredentials, System.Double>>)
  nameWithType.vb: RepositoryWrapper(Of AuthCredentials).Sum(ISpecification(Of ), Expression(Of Func(Of AuthCredentials, Double)))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).Sum(ISpecification(Of ), System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials, System.Double)))
  name.vb: Sum(ISpecification(Of ), Expression(Of Func(Of AuthCredentials, Double)))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Double}})
    name: Sum
    nameWithType: RepositoryWrapper<AuthCredentials>.Sum
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.Sum
  - name: (
    nameWithType: (
    fullName: (
  - uid: ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Double}})
    name: Sum
    nameWithType: RepositoryWrapper(Of AuthCredentials).Sum
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).Sum
  - name: (
    nameWithType: (
    fullName: (
  - uid: ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Sum(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Double}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Sum(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Double}})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Double}})
  name: Sum(Expression<Func<AuthCredentials, Boolean>>, Expression<Func<AuthCredentials, Double>>)
  nameWithType: RepositoryWrapper<AuthCredentials>.Sum(Expression<Func<AuthCredentials, Boolean>>, Expression<Func<AuthCredentials, Double>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.Sum(System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Authentication.Models.AuthCredentials, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Authentication.Models.AuthCredentials, System.Double>>)
  nameWithType.vb: RepositoryWrapper(Of AuthCredentials).Sum(Expression(Of Func(Of AuthCredentials, Boolean)), Expression(Of Func(Of AuthCredentials, Double)))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).Sum(System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials, System.Double)))
  name.vb: Sum(Expression(Of Func(Of AuthCredentials, Boolean)), Expression(Of Func(Of AuthCredentials, Double)))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Double}})
    name: Sum
    nameWithType: RepositoryWrapper<AuthCredentials>.Sum
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.Sum
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Double}})
    name: Sum
    nameWithType: RepositoryWrapper(Of AuthCredentials).Sum
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).Sum
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Sum(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Nullable{System.Double}}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Sum(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Nullable{System.Double}}})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Double}}})
  name: Sum(Expression<Func<AuthCredentials, Nullable<Double>>>)
  nameWithType: RepositoryWrapper<AuthCredentials>.Sum(Expression<Func<AuthCredentials, Nullable<Double>>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.Sum(System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Authentication.Models.AuthCredentials, System.Nullable<System.Double>>>)
  nameWithType.vb: RepositoryWrapper(Of AuthCredentials).Sum(Expression(Of Func(Of AuthCredentials, Nullable(Of Double))))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).Sum(System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials, System.Nullable(Of System.Double))))
  name.vb: Sum(Expression(Of Func(Of AuthCredentials, Nullable(Of Double))))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Double}}})
    name: Sum
    nameWithType: RepositoryWrapper<AuthCredentials>.Sum
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.Sum
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Double}}})
    name: Sum
    nameWithType: RepositoryWrapper(Of AuthCredentials).Sum
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).Sum
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Sum(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Nullable{System.Double}}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Sum(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Nullable{System.Double}}})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Double}}})
  name: Sum(ISpecification<>, Expression<Func<AuthCredentials, Nullable<Double>>>)
  nameWithType: RepositoryWrapper<AuthCredentials>.Sum(ISpecification<>, Expression<Func<AuthCredentials, Nullable<Double>>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.Sum(ISpecification<>, System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Authentication.Models.AuthCredentials, System.Nullable<System.Double>>>)
  nameWithType.vb: RepositoryWrapper(Of AuthCredentials).Sum(ISpecification(Of ), Expression(Of Func(Of AuthCredentials, Nullable(Of Double))))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).Sum(ISpecification(Of ), System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials, System.Nullable(Of System.Double))))
  name.vb: Sum(ISpecification(Of ), Expression(Of Func(Of AuthCredentials, Nullable(Of Double))))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Double}}})
    name: Sum
    nameWithType: RepositoryWrapper<AuthCredentials>.Sum
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.Sum
  - name: (
    nameWithType: (
    fullName: (
  - uid: ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Double}}})
    name: Sum
    nameWithType: RepositoryWrapper(Of AuthCredentials).Sum
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).Sum
  - name: (
    nameWithType: (
    fullName: (
  - uid: ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Sum(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Nullable{System.Double}}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Sum(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Nullable{System.Double}}})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Double}}})
  name: Sum(Expression<Func<AuthCredentials, Boolean>>, Expression<Func<AuthCredentials, Nullable<Double>>>)
  nameWithType: RepositoryWrapper<AuthCredentials>.Sum(Expression<Func<AuthCredentials, Boolean>>, Expression<Func<AuthCredentials, Nullable<Double>>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.Sum(System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Authentication.Models.AuthCredentials, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Authentication.Models.AuthCredentials, System.Nullable<System.Double>>>)
  nameWithType.vb: RepositoryWrapper(Of AuthCredentials).Sum(Expression(Of Func(Of AuthCredentials, Boolean)), Expression(Of Func(Of AuthCredentials, Nullable(Of Double))))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).Sum(System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials, System.Nullable(Of System.Double))))
  name.vb: Sum(Expression(Of Func(Of AuthCredentials, Boolean)), Expression(Of Func(Of AuthCredentials, Nullable(Of Double))))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Double}}})
    name: Sum
    nameWithType: RepositoryWrapper<AuthCredentials>.Sum
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.Sum
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Double}}})
    name: Sum
    nameWithType: RepositoryWrapper(Of AuthCredentials).Sum
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).Sum
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Sum(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Single}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Sum(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Single}})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Single}})
  name: Sum(Expression<Func<AuthCredentials, Single>>)
  nameWithType: RepositoryWrapper<AuthCredentials>.Sum(Expression<Func<AuthCredentials, Single>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.Sum(System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Authentication.Models.AuthCredentials, System.Single>>)
  nameWithType.vb: RepositoryWrapper(Of AuthCredentials).Sum(Expression(Of Func(Of AuthCredentials, Single)))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).Sum(System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials, System.Single)))
  name.vb: Sum(Expression(Of Func(Of AuthCredentials, Single)))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Single}})
    name: Sum
    nameWithType: RepositoryWrapper<AuthCredentials>.Sum
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.Sum
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Single}})
    name: Sum
    nameWithType: RepositoryWrapper(Of AuthCredentials).Sum
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).Sum
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Sum(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Single}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Sum(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Single}})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Single}})
  name: Sum(ISpecification<>, Expression<Func<AuthCredentials, Single>>)
  nameWithType: RepositoryWrapper<AuthCredentials>.Sum(ISpecification<>, Expression<Func<AuthCredentials, Single>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.Sum(ISpecification<>, System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Authentication.Models.AuthCredentials, System.Single>>)
  nameWithType.vb: RepositoryWrapper(Of AuthCredentials).Sum(ISpecification(Of ), Expression(Of Func(Of AuthCredentials, Single)))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).Sum(ISpecification(Of ), System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials, System.Single)))
  name.vb: Sum(ISpecification(Of ), Expression(Of Func(Of AuthCredentials, Single)))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Single}})
    name: Sum
    nameWithType: RepositoryWrapper<AuthCredentials>.Sum
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.Sum
  - name: (
    nameWithType: (
    fullName: (
  - uid: ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Single}})
    name: Sum
    nameWithType: RepositoryWrapper(Of AuthCredentials).Sum
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).Sum
  - name: (
    nameWithType: (
    fullName: (
  - uid: ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Sum(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Single}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Sum(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Single}})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Single}})
  name: Sum(Expression<Func<AuthCredentials, Boolean>>, Expression<Func<AuthCredentials, Single>>)
  nameWithType: RepositoryWrapper<AuthCredentials>.Sum(Expression<Func<AuthCredentials, Boolean>>, Expression<Func<AuthCredentials, Single>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.Sum(System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Authentication.Models.AuthCredentials, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Authentication.Models.AuthCredentials, System.Single>>)
  nameWithType.vb: RepositoryWrapper(Of AuthCredentials).Sum(Expression(Of Func(Of AuthCredentials, Boolean)), Expression(Of Func(Of AuthCredentials, Single)))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).Sum(System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials, System.Single)))
  name.vb: Sum(Expression(Of Func(Of AuthCredentials, Boolean)), Expression(Of Func(Of AuthCredentials, Single)))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Single}})
    name: Sum
    nameWithType: RepositoryWrapper<AuthCredentials>.Sum
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.Sum
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Single}})
    name: Sum
    nameWithType: RepositoryWrapper(Of AuthCredentials).Sum
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).Sum
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Sum(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Nullable{System.Single}}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Sum(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Nullable{System.Single}}})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Single}}})
  name: Sum(Expression<Func<AuthCredentials, Nullable<Single>>>)
  nameWithType: RepositoryWrapper<AuthCredentials>.Sum(Expression<Func<AuthCredentials, Nullable<Single>>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.Sum(System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Authentication.Models.AuthCredentials, System.Nullable<System.Single>>>)
  nameWithType.vb: RepositoryWrapper(Of AuthCredentials).Sum(Expression(Of Func(Of AuthCredentials, Nullable(Of Single))))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).Sum(System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials, System.Nullable(Of System.Single))))
  name.vb: Sum(Expression(Of Func(Of AuthCredentials, Nullable(Of Single))))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Single}}})
    name: Sum
    nameWithType: RepositoryWrapper<AuthCredentials>.Sum
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.Sum
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Single}}})
    name: Sum
    nameWithType: RepositoryWrapper(Of AuthCredentials).Sum
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).Sum
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Sum(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Nullable{System.Single}}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Sum(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Nullable{System.Single}}})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Single}}})
  name: Sum(ISpecification<>, Expression<Func<AuthCredentials, Nullable<Single>>>)
  nameWithType: RepositoryWrapper<AuthCredentials>.Sum(ISpecification<>, Expression<Func<AuthCredentials, Nullable<Single>>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.Sum(ISpecification<>, System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Authentication.Models.AuthCredentials, System.Nullable<System.Single>>>)
  nameWithType.vb: RepositoryWrapper(Of AuthCredentials).Sum(ISpecification(Of ), Expression(Of Func(Of AuthCredentials, Nullable(Of Single))))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).Sum(ISpecification(Of ), System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials, System.Nullable(Of System.Single))))
  name.vb: Sum(ISpecification(Of ), Expression(Of Func(Of AuthCredentials, Nullable(Of Single))))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Single}}})
    name: Sum
    nameWithType: RepositoryWrapper<AuthCredentials>.Sum
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.Sum
  - name: (
    nameWithType: (
    fullName: (
  - uid: ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Single}}})
    name: Sum
    nameWithType: RepositoryWrapper(Of AuthCredentials).Sum
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).Sum
  - name: (
    nameWithType: (
    fullName: (
  - uid: ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Sum(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Nullable{System.Single}}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Sum(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Nullable{System.Single}}})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Single}}})
  name: Sum(Expression<Func<AuthCredentials, Boolean>>, Expression<Func<AuthCredentials, Nullable<Single>>>)
  nameWithType: RepositoryWrapper<AuthCredentials>.Sum(Expression<Func<AuthCredentials, Boolean>>, Expression<Func<AuthCredentials, Nullable<Single>>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.Sum(System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Authentication.Models.AuthCredentials, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Authentication.Models.AuthCredentials, System.Nullable<System.Single>>>)
  nameWithType.vb: RepositoryWrapper(Of AuthCredentials).Sum(Expression(Of Func(Of AuthCredentials, Boolean)), Expression(Of Func(Of AuthCredentials, Nullable(Of Single))))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).Sum(System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials, System.Nullable(Of System.Single))))
  name.vb: Sum(Expression(Of Func(Of AuthCredentials, Boolean)), Expression(Of Func(Of AuthCredentials, Nullable(Of Single))))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Single}}})
    name: Sum
    nameWithType: RepositoryWrapper<AuthCredentials>.Sum
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.Sum
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Single}}})
    name: Sum
    nameWithType: RepositoryWrapper(Of AuthCredentials).Sum
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).Sum
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.TryFind(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Boolean}},Catalyst.Core.Modules.Authentication.Models.AuthCredentials@)
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.TryFind(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Boolean}},Catalyst.Core.Modules.Authentication.Models.AuthCredentials@)
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.TryFind(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},`0@)
  name: TryFind(Expression<Func<AuthCredentials, Boolean>>, AuthCredentials)
  nameWithType: RepositoryWrapper<AuthCredentials>.TryFind(Expression<Func<AuthCredentials, Boolean>>, AuthCredentials)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.TryFind(System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Authentication.Models.AuthCredentials, System.Boolean>>, Catalyst.Core.Modules.Authentication.Models.AuthCredentials)
  nameWithType.vb: RepositoryWrapper(Of AuthCredentials).TryFind(Expression(Of Func(Of AuthCredentials, Boolean)), AuthCredentials)
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).TryFind(System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials, System.Boolean)), Catalyst.Core.Modules.Authentication.Models.AuthCredentials)
  name.vb: TryFind(Expression(Of Func(Of AuthCredentials, Boolean)), AuthCredentials)
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.TryFind(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},`0@)
    name: TryFind
    nameWithType: RepositoryWrapper<AuthCredentials>.TryFind
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.TryFind
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.TryFind(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},`0@)
    name: TryFind
    nameWithType: RepositoryWrapper(Of AuthCredentials).TryFind
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).TryFind
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.TryFind(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Boolean}},IQueryOptions{`0},Catalyst.Core.Modules.Authentication.Models.AuthCredentials@)
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.TryFind(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Boolean}},IQueryOptions{`0},Catalyst.Core.Modules.Authentication.Models.AuthCredentials@)
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.TryFind(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},IQueryOptions{`0},`0@)
  name: TryFind(Expression<Func<AuthCredentials, Boolean>>, IQueryOptions<>, AuthCredentials)
  nameWithType: RepositoryWrapper<AuthCredentials>.TryFind(Expression<Func<AuthCredentials, Boolean>>, IQueryOptions<>, AuthCredentials)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.TryFind(System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Authentication.Models.AuthCredentials, System.Boolean>>, IQueryOptions<>, Catalyst.Core.Modules.Authentication.Models.AuthCredentials)
  nameWithType.vb: RepositoryWrapper(Of AuthCredentials).TryFind(Expression(Of Func(Of AuthCredentials, Boolean)), IQueryOptions(Of ), AuthCredentials)
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).TryFind(System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials, System.Boolean)), IQueryOptions(Of ), Catalyst.Core.Modules.Authentication.Models.AuthCredentials)
  name.vb: TryFind(Expression(Of Func(Of AuthCredentials, Boolean)), IQueryOptions(Of ), AuthCredentials)
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.TryFind(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},IQueryOptions{`0},`0@)
    name: TryFind
    nameWithType: RepositoryWrapper<AuthCredentials>.TryFind
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.TryFind
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: IQueryOptions
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.TryFind(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},IQueryOptions{`0},`0@)
    name: TryFind
    nameWithType: RepositoryWrapper(Of AuthCredentials).TryFind
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).TryFind
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: IQueryOptions
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.TryFind``1(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,{TResult}}},{TResult}@)
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.TryFind``1(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,``0}},``0@)
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.TryFind``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},``0@)
  name: TryFind<TResult>(Expression<Func<AuthCredentials, Boolean>>, Expression<Func<AuthCredentials, TResult>>, TResult)
  nameWithType: RepositoryWrapper<AuthCredentials>.TryFind<TResult>(Expression<Func<AuthCredentials, Boolean>>, Expression<Func<AuthCredentials, TResult>>, TResult)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.TryFind<TResult>(System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Authentication.Models.AuthCredentials, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Authentication.Models.AuthCredentials, TResult>>, TResult)
  nameWithType.vb: RepositoryWrapper(Of AuthCredentials).TryFind(Of TResult)(Expression(Of Func(Of AuthCredentials, Boolean)), Expression(Of Func(Of AuthCredentials, TResult)), TResult)
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).TryFind(Of TResult)(System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials, TResult)), TResult)
  name.vb: TryFind(Of TResult)(Expression(Of Func(Of AuthCredentials, Boolean)), Expression(Of Func(Of AuthCredentials, TResult)), TResult)
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.TryFind``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},``0@)
    name: TryFind<TResult>
    nameWithType: RepositoryWrapper<AuthCredentials>.TryFind<TResult>
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.TryFind<TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.TryFind``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},``0@)
    name: TryFind(Of TResult)
    nameWithType: RepositoryWrapper(Of AuthCredentials).TryFind(Of TResult)
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).TryFind(Of TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.TryFind``1(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,{TResult}}},IQueryOptions{`0},{TResult}@)
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.TryFind``1(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,``0}},IQueryOptions{`0},``0@)
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.TryFind``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},IQueryOptions{`0},``0@)
  name: TryFind<TResult>(Expression<Func<AuthCredentials, Boolean>>, Expression<Func<AuthCredentials, TResult>>, IQueryOptions<>, TResult)
  nameWithType: RepositoryWrapper<AuthCredentials>.TryFind<TResult>(Expression<Func<AuthCredentials, Boolean>>, Expression<Func<AuthCredentials, TResult>>, IQueryOptions<>, TResult)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.TryFind<TResult>(System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Authentication.Models.AuthCredentials, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Authentication.Models.AuthCredentials, TResult>>, IQueryOptions<>, TResult)
  nameWithType.vb: RepositoryWrapper(Of AuthCredentials).TryFind(Of TResult)(Expression(Of Func(Of AuthCredentials, Boolean)), Expression(Of Func(Of AuthCredentials, TResult)), IQueryOptions(Of ), TResult)
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).TryFind(Of TResult)(System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials, TResult)), IQueryOptions(Of ), TResult)
  name.vb: TryFind(Of TResult)(Expression(Of Func(Of AuthCredentials, Boolean)), Expression(Of Func(Of AuthCredentials, TResult)), IQueryOptions(Of ), TResult)
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.TryFind``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},IQueryOptions{`0},``0@)
    name: TryFind<TResult>
    nameWithType: RepositoryWrapper<AuthCredentials>.TryFind<TResult>
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.TryFind<TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: IQueryOptions
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.TryFind``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},IQueryOptions{`0},``0@)
    name: TryFind(Of TResult)
    nameWithType: RepositoryWrapper(Of AuthCredentials).TryFind(Of TResult)
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).TryFind(Of TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: IQueryOptions
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.TryFind(ISpecification{`0},Catalyst.Core.Modules.Authentication.Models.AuthCredentials@)
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.TryFind(ISpecification{`0},Catalyst.Core.Modules.Authentication.Models.AuthCredentials@)
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.TryFind(ISpecification{`0},`0@)
  name: TryFind(ISpecification<>, AuthCredentials)
  nameWithType: RepositoryWrapper<AuthCredentials>.TryFind(ISpecification<>, AuthCredentials)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.TryFind(ISpecification<>, Catalyst.Core.Modules.Authentication.Models.AuthCredentials)
  nameWithType.vb: RepositoryWrapper(Of AuthCredentials).TryFind(ISpecification(Of ), AuthCredentials)
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).TryFind(ISpecification(Of ), Catalyst.Core.Modules.Authentication.Models.AuthCredentials)
  name.vb: TryFind(ISpecification(Of ), AuthCredentials)
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.TryFind(ISpecification{`0},`0@)
    name: TryFind
    nameWithType: RepositoryWrapper<AuthCredentials>.TryFind
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.TryFind
  - name: (
    nameWithType: (
    fullName: (
  - uid: ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.TryFind(ISpecification{`0},`0@)
    name: TryFind
    nameWithType: RepositoryWrapper(Of AuthCredentials).TryFind
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).TryFind
  - name: (
    nameWithType: (
    fullName: (
  - uid: ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.TryFind(ISpecification{`0},IQueryOptions{`0},Catalyst.Core.Modules.Authentication.Models.AuthCredentials@)
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.TryFind(ISpecification{`0},IQueryOptions{`0},Catalyst.Core.Modules.Authentication.Models.AuthCredentials@)
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.TryFind(ISpecification{`0},IQueryOptions{`0},`0@)
  name: TryFind(ISpecification<>, IQueryOptions<>, AuthCredentials)
  nameWithType: RepositoryWrapper<AuthCredentials>.TryFind(ISpecification<>, IQueryOptions<>, AuthCredentials)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.TryFind(ISpecification<>, IQueryOptions<>, Catalyst.Core.Modules.Authentication.Models.AuthCredentials)
  nameWithType.vb: RepositoryWrapper(Of AuthCredentials).TryFind(ISpecification(Of ), IQueryOptions(Of ), AuthCredentials)
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).TryFind(ISpecification(Of ), IQueryOptions(Of ), Catalyst.Core.Modules.Authentication.Models.AuthCredentials)
  name.vb: TryFind(ISpecification(Of ), IQueryOptions(Of ), AuthCredentials)
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.TryFind(ISpecification{`0},IQueryOptions{`0},`0@)
    name: TryFind
    nameWithType: RepositoryWrapper<AuthCredentials>.TryFind
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.TryFind
  - name: (
    nameWithType: (
    fullName: (
  - uid: ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: IQueryOptions
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.TryFind(ISpecification{`0},IQueryOptions{`0},`0@)
    name: TryFind
    nameWithType: RepositoryWrapper(Of AuthCredentials).TryFind
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).TryFind
  - name: (
    nameWithType: (
    fullName: (
  - uid: ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: IQueryOptions
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.TryFind``1(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,{TResult}}},{TResult}@)
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.TryFind``1(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,``0}},``0@)
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.TryFind``1(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}},``0@)
  name: TryFind<TResult>(ISpecification<>, Expression<Func<AuthCredentials, TResult>>, TResult)
  nameWithType: RepositoryWrapper<AuthCredentials>.TryFind<TResult>(ISpecification<>, Expression<Func<AuthCredentials, TResult>>, TResult)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.TryFind<TResult>(ISpecification<>, System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Authentication.Models.AuthCredentials, TResult>>, TResult)
  nameWithType.vb: RepositoryWrapper(Of AuthCredentials).TryFind(Of TResult)(ISpecification(Of ), Expression(Of Func(Of AuthCredentials, TResult)), TResult)
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).TryFind(Of TResult)(ISpecification(Of ), System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials, TResult)), TResult)
  name.vb: TryFind(Of TResult)(ISpecification(Of ), Expression(Of Func(Of AuthCredentials, TResult)), TResult)
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.TryFind``1(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}},``0@)
    name: TryFind<TResult>
    nameWithType: RepositoryWrapper<AuthCredentials>.TryFind<TResult>
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.TryFind<TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.TryFind``1(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}},``0@)
    name: TryFind(Of TResult)
    nameWithType: RepositoryWrapper(Of AuthCredentials).TryFind(Of TResult)
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).TryFind(Of TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.TryFind``1(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,{TResult}}},IQueryOptions{`0},{TResult}@)
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.TryFind``1(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,``0}},IQueryOptions{`0},``0@)
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.TryFind``1(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}},IQueryOptions{`0},``0@)
  name: TryFind<TResult>(ISpecification<>, Expression<Func<AuthCredentials, TResult>>, IQueryOptions<>, TResult)
  nameWithType: RepositoryWrapper<AuthCredentials>.TryFind<TResult>(ISpecification<>, Expression<Func<AuthCredentials, TResult>>, IQueryOptions<>, TResult)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.TryFind<TResult>(ISpecification<>, System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Authentication.Models.AuthCredentials, TResult>>, IQueryOptions<>, TResult)
  nameWithType.vb: RepositoryWrapper(Of AuthCredentials).TryFind(Of TResult)(ISpecification(Of ), Expression(Of Func(Of AuthCredentials, TResult)), IQueryOptions(Of ), TResult)
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).TryFind(Of TResult)(ISpecification(Of ), System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials, TResult)), IQueryOptions(Of ), TResult)
  name.vb: TryFind(Of TResult)(ISpecification(Of ), Expression(Of Func(Of AuthCredentials, TResult)), IQueryOptions(Of ), TResult)
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.TryFind``1(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}},IQueryOptions{`0},``0@)
    name: TryFind<TResult>
    nameWithType: RepositoryWrapper<AuthCredentials>.TryFind<TResult>
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.TryFind<TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: IQueryOptions
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.TryFind``1(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}},IQueryOptions{`0},``0@)
    name: TryFind(Of TResult)
    nameWithType: RepositoryWrapper(Of AuthCredentials).TryFind(Of TResult)
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).TryFind(Of TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: IQueryOptions
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.TryGet(System.String,Catalyst.Core.Modules.Authentication.Models.AuthCredentials@)
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.TryGet(System.String,Catalyst.Core.Modules.Authentication.Models.AuthCredentials@)
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.TryGet(System.String,`0@)
  name: TryGet(String, AuthCredentials)
  nameWithType: RepositoryWrapper<AuthCredentials>.TryGet(String, AuthCredentials)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.TryGet(System.String, Catalyst.Core.Modules.Authentication.Models.AuthCredentials)
  nameWithType.vb: RepositoryWrapper(Of AuthCredentials).TryGet(String, AuthCredentials)
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).TryGet(System.String, Catalyst.Core.Modules.Authentication.Models.AuthCredentials)
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.TryGet(System.String,`0@)
    name: TryGet
    nameWithType: RepositoryWrapper<AuthCredentials>.TryGet
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.TryGet
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.TryGet(System.String,`0@)
    name: TryGet
    nameWithType: RepositoryWrapper(Of AuthCredentials).TryGet
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).TryGet
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.TryGet``1(System.String,System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,{TResult}}},{TResult}@)
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.TryGet``1(System.String,System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,``0}},``0@)
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.TryGet``1(System.String,System.Linq.Expressions.Expression{System.Func{`0,``0}},``0@)
  name: TryGet<TResult>(String, Expression<Func<AuthCredentials, TResult>>, TResult)
  nameWithType: RepositoryWrapper<AuthCredentials>.TryGet<TResult>(String, Expression<Func<AuthCredentials, TResult>>, TResult)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.TryGet<TResult>(System.String, System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Authentication.Models.AuthCredentials, TResult>>, TResult)
  nameWithType.vb: RepositoryWrapper(Of AuthCredentials).TryGet(Of TResult)(String, Expression(Of Func(Of AuthCredentials, TResult)), TResult)
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).TryGet(Of TResult)(System.String, System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials, TResult)), TResult)
  name.vb: TryGet(Of TResult)(String, Expression(Of Func(Of AuthCredentials, TResult)), TResult)
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.TryGet``1(System.String,System.Linq.Expressions.Expression{System.Func{`0,``0}},``0@)
    name: TryGet<TResult>
    nameWithType: RepositoryWrapper<AuthCredentials>.TryGet<TResult>
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.TryGet<TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.TryGet``1(System.String,System.Linq.Expressions.Expression{System.Func{`0,``0}},``0@)
    name: TryGet(Of TResult)
    nameWithType: RepositoryWrapper(Of AuthCredentials).TryGet(Of TResult)
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).TryGet(Of TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Update(Catalyst.Core.Modules.Authentication.Models.AuthCredentials)
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Update(Catalyst.Core.Modules.Authentication.Models.AuthCredentials)
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Update(`0)
  name: Update(AuthCredentials)
  nameWithType: RepositoryWrapper<AuthCredentials>.Update(AuthCredentials)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.Update(Catalyst.Core.Modules.Authentication.Models.AuthCredentials)
  nameWithType.vb: RepositoryWrapper(Of AuthCredentials).Update(AuthCredentials)
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).Update(Catalyst.Core.Modules.Authentication.Models.AuthCredentials)
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Update(`0)
    name: Update
    nameWithType: RepositoryWrapper<AuthCredentials>.Update
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.Update
  - name: (
    nameWithType: (
    fullName: (
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Update(`0)
    name: Update
    nameWithType: RepositoryWrapper(Of AuthCredentials).Update
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).Update
  - name: (
    nameWithType: (
    fullName: (
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Update(System.Collections.Generic.IEnumerable{Catalyst.Core.Modules.Authentication.Models.AuthCredentials})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}.Update(System.Collections.Generic.IEnumerable{Catalyst.Core.Modules.Authentication.Models.AuthCredentials})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Authentication.Models.AuthCredentials}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Update(System.Collections.Generic.IEnumerable{`0})
  name: Update(IEnumerable<AuthCredentials>)
  nameWithType: RepositoryWrapper<AuthCredentials>.Update(IEnumerable<AuthCredentials>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.Update(System.Collections.Generic.IEnumerable<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>)
  nameWithType.vb: RepositoryWrapper(Of AuthCredentials).Update(IEnumerable(Of AuthCredentials))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).Update(System.Collections.Generic.IEnumerable(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials))
  name.vb: Update(IEnumerable(Of AuthCredentials))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Update(System.Collections.Generic.IEnumerable{`0})
    name: Update
    nameWithType: RepositoryWrapper<AuthCredentials>.Update
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Authentication.Models.AuthCredentials>.Update
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Update(System.Collections.Generic.IEnumerable{`0})
    name: Update
    nameWithType: RepositoryWrapper(Of AuthCredentials).Update
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials).Update
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1
  commentId: T:Catalyst.Core.Lib.Repository.RepositoryWrapper`1
  name: RepositoryWrapper<T>
  nameWithType: RepositoryWrapper<T>
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>
  nameWithType.vb: RepositoryWrapper(Of T)
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T)
  name.vb: RepositoryWrapper(Of T)
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1
    name: RepositoryWrapper
    nameWithType: RepositoryWrapper
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1
    name: RepositoryWrapper
    nameWithType: RepositoryWrapper
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository
  commentId: N:Catalyst.Core.Lib.Repository
  name: Catalyst.Core.Lib.Repository
  nameWithType: Catalyst.Core.Lib.Repository
  fullName: Catalyst.Core.Lib.Repository
- uid: Catalyst.Abstractions.Repository.IRepositoryWrapper`1
  commentId: '!:Catalyst.Abstractions.Repository.IRepositoryWrapper`1'
  isExternal: true
  name: IRepositoryWrapper<>
  nameWithType: IRepositoryWrapper<>
  fullName: Catalyst.Abstractions.Repository.IRepositoryWrapper<>
  nameWithType.vb: IRepositoryWrapper(Of )
  fullName.vb: Catalyst.Abstractions.Repository.IRepositoryWrapper(Of )
  name.vb: IRepositoryWrapper(Of )
  spec.csharp:
  - uid: Catalyst.Abstractions.Repository.IRepositoryWrapper`1
    name: IRepositoryWrapper
    nameWithType: IRepositoryWrapper
    fullName: Catalyst.Abstractions.Repository.IRepositoryWrapper
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Catalyst.Abstractions.Repository.IRepositoryWrapper`1
    name: IRepositoryWrapper
    nameWithType: IRepositoryWrapper
    fullName: Catalyst.Abstractions.Repository.IRepositoryWrapper
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: IRepositoryWrapper`1
  commentId: '!:IRepositoryWrapper`1'
  isExternal: true
  name: IRepositoryWrapper<>
  nameWithType: IRepositoryWrapper<>
  fullName: IRepositoryWrapper<>
  nameWithType.vb: IRepositoryWrapper(Of )
  fullName.vb: IRepositoryWrapper(Of )
  name.vb: IRepositoryWrapper(Of )
  spec.csharp:
  - uid: IRepositoryWrapper`1
    name: IRepositoryWrapper
    nameWithType: IRepositoryWrapper
    fullName: IRepositoryWrapper
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IRepositoryWrapper`1
    name: IRepositoryWrapper
    nameWithType: IRepositoryWrapper
    fullName: IRepositoryWrapper
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Repository
  commentId: F:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Repository
  name: Repository
  nameWithType: RepositoryWrapper<T>.Repository
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Repository
  nameWithType.vb: RepositoryWrapper(Of T).Repository
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Repository
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Conventions
  commentId: P:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Conventions
  name: Conventions
  nameWithType: RepositoryWrapper<T>.Conventions
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Conventions
  nameWithType.vb: RepositoryWrapper(Of T).Conventions
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Conventions
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.EntityType
  commentId: P:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.EntityType
  name: EntityType
  nameWithType: RepositoryWrapper<T>.EntityType
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.EntityType
  nameWithType.vb: RepositoryWrapper(Of T).EntityType
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).EntityType
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.KeyType
  commentId: P:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.KeyType
  name: KeyType
  nameWithType: RepositoryWrapper<T>.KeyType
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.KeyType
  nameWithType.vb: RepositoryWrapper(Of T).KeyType
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).KeyType
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.CachingStrategy
  commentId: P:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.CachingStrategy
  name: CachingStrategy
  nameWithType: RepositoryWrapper<T>.CachingStrategy
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.CachingStrategy
  nameWithType.vb: RepositoryWrapper(Of T).CachingStrategy
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).CachingStrategy
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.CachingEnabled
  commentId: P:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.CachingEnabled
  name: CachingEnabled
  nameWithType: RepositoryWrapper<T>.CachingEnabled
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.CachingEnabled
  nameWithType.vb: RepositoryWrapper(Of T).CachingEnabled
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).CachingEnabled
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.CacheUsed
  commentId: P:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.CacheUsed
  name: CacheUsed
  nameWithType: RepositoryWrapper<T>.CacheUsed
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.CacheUsed
  nameWithType.vb: RepositoryWrapper(Of T).CacheUsed
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).CacheUsed
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.TraceInfo
  commentId: P:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.TraceInfo
  name: TraceInfo
  nameWithType: RepositoryWrapper<T>.TraceInfo
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.TraceInfo
  nameWithType.vb: RepositoryWrapper(Of T).TraceInfo
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).TraceInfo
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GenerateKeyOnAdd
  commentId: P:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GenerateKeyOnAdd
  name: GenerateKeyOnAdd
  nameWithType: RepositoryWrapper<T>.GenerateKeyOnAdd
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.GenerateKeyOnAdd
  nameWithType.vb: RepositoryWrapper(Of T).GenerateKeyOnAdd
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).GenerateKeyOnAdd
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Add(`0)
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Add(`0)
  name: Add(T)
  nameWithType: RepositoryWrapper<T>.Add(T)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Add(T)
  nameWithType.vb: RepositoryWrapper(Of T).Add(T)
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Add(T)
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Add(`0)
    name: Add
    nameWithType: RepositoryWrapper<T>.Add
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Add
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Add(`0)
    name: Add
    nameWithType: RepositoryWrapper(Of T).Add
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Add
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Add(System.Collections.Generic.IEnumerable{`0})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Add(System.Collections.Generic.IEnumerable{`0})
  isExternal: true
  name: Add(IEnumerable<T>)
  nameWithType: RepositoryWrapper<T>.Add(IEnumerable<T>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Add(System.Collections.Generic.IEnumerable<T>)
  nameWithType.vb: RepositoryWrapper(Of T).Add(IEnumerable(Of T))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Add(System.Collections.Generic.IEnumerable(Of T))
  name.vb: Add(IEnumerable(Of T))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Add(System.Collections.Generic.IEnumerable{`0})
    name: Add
    nameWithType: RepositoryWrapper<T>.Add
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Add
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Add(System.Collections.Generic.IEnumerable{`0})
    name: Add
    nameWithType: RepositoryWrapper(Of T).Add
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Add
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.AsQueryable
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.AsQueryable
  name: AsQueryable()
  nameWithType: RepositoryWrapper<T>.AsQueryable()
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.AsQueryable()
  nameWithType.vb: RepositoryWrapper(Of T).AsQueryable()
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).AsQueryable()
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.AsQueryable
    name: AsQueryable
    nameWithType: RepositoryWrapper<T>.AsQueryable
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.AsQueryable
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.AsQueryable
    name: AsQueryable
    nameWithType: RepositoryWrapper(Of T).AsQueryable
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).AsQueryable
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Int32}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Int32}})
  isExternal: true
  name: Average(Expression<Func<T, Int32>>)
  nameWithType: RepositoryWrapper<T>.Average(Expression<Func<T, Int32>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Average(System.Linq.Expressions.Expression<System.Func<T, System.Int32>>)
  nameWithType.vb: RepositoryWrapper(Of T).Average(Expression(Of Func(Of T, Int32)))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Average(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Int32)))
  name.vb: Average(Expression(Of Func(Of T, Int32)))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Int32}})
    name: Average
    nameWithType: RepositoryWrapper<T>.Average
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Average
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Int32}})
    name: Average
    nameWithType: RepositoryWrapper(Of T).Average
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Average
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Int32}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Int32}})
  isExternal: true
  name: Average(ISpecification<>, Expression<Func<T, Int32>>)
  nameWithType: RepositoryWrapper<T>.Average(ISpecification<>, Expression<Func<T, Int32>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Average(ISpecification<>, System.Linq.Expressions.Expression<System.Func<T, System.Int32>>)
  nameWithType.vb: RepositoryWrapper(Of T).Average(ISpecification(Of ), Expression(Of Func(Of T, Int32)))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Average(ISpecification(Of ), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Int32)))
  name.vb: Average(ISpecification(Of ), Expression(Of Func(Of T, Int32)))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Int32}})
    name: Average
    nameWithType: RepositoryWrapper<T>.Average
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Average
  - name: (
    nameWithType: (
    fullName: (
  - uid: ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Int32}})
    name: Average
    nameWithType: RepositoryWrapper(Of T).Average
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Average
  - name: (
    nameWithType: (
    fullName: (
  - uid: ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Int32}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Int32}})
  isExternal: true
  name: Average(Expression<Func<T, Boolean>>, Expression<Func<T, Int32>>)
  nameWithType: RepositoryWrapper<T>.Average(Expression<Func<T, Boolean>>, Expression<Func<T, Int32>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Average(System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<T, System.Int32>>)
  nameWithType.vb: RepositoryWrapper(Of T).Average(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Int32)))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Average(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Int32)))
  name.vb: Average(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Int32)))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Int32}})
    name: Average
    nameWithType: RepositoryWrapper<T>.Average
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Average
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Int32}})
    name: Average
    nameWithType: RepositoryWrapper(Of T).Average
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Average
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int32}}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int32}}})
  isExternal: true
  name: Average(Expression<Func<T, Nullable<Int32>>>)
  nameWithType: RepositoryWrapper<T>.Average(Expression<Func<T, Nullable<Int32>>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Average(System.Linq.Expressions.Expression<System.Func<T, System.Nullable<System.Int32>>>)
  nameWithType.vb: RepositoryWrapper(Of T).Average(Expression(Of Func(Of T, Nullable(Of Int32))))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Average(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Nullable(Of System.Int32))))
  name.vb: Average(Expression(Of Func(Of T, Nullable(Of Int32))))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int32}}})
    name: Average
    nameWithType: RepositoryWrapper<T>.Average
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Average
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int32}}})
    name: Average
    nameWithType: RepositoryWrapper(Of T).Average
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Average
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int32}}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int32}}})
  isExternal: true
  name: Average(ISpecification<>, Expression<Func<T, Nullable<Int32>>>)
  nameWithType: RepositoryWrapper<T>.Average(ISpecification<>, Expression<Func<T, Nullable<Int32>>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Average(ISpecification<>, System.Linq.Expressions.Expression<System.Func<T, System.Nullable<System.Int32>>>)
  nameWithType.vb: RepositoryWrapper(Of T).Average(ISpecification(Of ), Expression(Of Func(Of T, Nullable(Of Int32))))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Average(ISpecification(Of ), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Nullable(Of System.Int32))))
  name.vb: Average(ISpecification(Of ), Expression(Of Func(Of T, Nullable(Of Int32))))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int32}}})
    name: Average
    nameWithType: RepositoryWrapper<T>.Average
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Average
  - name: (
    nameWithType: (
    fullName: (
  - uid: ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int32}}})
    name: Average
    nameWithType: RepositoryWrapper(Of T).Average
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Average
  - name: (
    nameWithType: (
    fullName: (
  - uid: ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int32}}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int32}}})
  isExternal: true
  name: Average(Expression<Func<T, Boolean>>, Expression<Func<T, Nullable<Int32>>>)
  nameWithType: RepositoryWrapper<T>.Average(Expression<Func<T, Boolean>>, Expression<Func<T, Nullable<Int32>>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Average(System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<T, System.Nullable<System.Int32>>>)
  nameWithType.vb: RepositoryWrapper(Of T).Average(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Nullable(Of Int32))))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Average(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Nullable(Of System.Int32))))
  name.vb: Average(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Nullable(Of Int32))))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int32}}})
    name: Average
    nameWithType: RepositoryWrapper<T>.Average
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Average
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int32}}})
    name: Average
    nameWithType: RepositoryWrapper(Of T).Average
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Average
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Int64}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Int64}})
  isExternal: true
  name: Average(Expression<Func<T, Int64>>)
  nameWithType: RepositoryWrapper<T>.Average(Expression<Func<T, Int64>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Average(System.Linq.Expressions.Expression<System.Func<T, System.Int64>>)
  nameWithType.vb: RepositoryWrapper(Of T).Average(Expression(Of Func(Of T, Int64)))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Average(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Int64)))
  name.vb: Average(Expression(Of Func(Of T, Int64)))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Int64}})
    name: Average
    nameWithType: RepositoryWrapper<T>.Average
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Average
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Int64}})
    name: Average
    nameWithType: RepositoryWrapper(Of T).Average
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Average
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Int64}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Int64}})
  isExternal: true
  name: Average(ISpecification<>, Expression<Func<T, Int64>>)
  nameWithType: RepositoryWrapper<T>.Average(ISpecification<>, Expression<Func<T, Int64>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Average(ISpecification<>, System.Linq.Expressions.Expression<System.Func<T, System.Int64>>)
  nameWithType.vb: RepositoryWrapper(Of T).Average(ISpecification(Of ), Expression(Of Func(Of T, Int64)))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Average(ISpecification(Of ), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Int64)))
  name.vb: Average(ISpecification(Of ), Expression(Of Func(Of T, Int64)))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Int64}})
    name: Average
    nameWithType: RepositoryWrapper<T>.Average
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Average
  - name: (
    nameWithType: (
    fullName: (
  - uid: ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Int64}})
    name: Average
    nameWithType: RepositoryWrapper(Of T).Average
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Average
  - name: (
    nameWithType: (
    fullName: (
  - uid: ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Int64}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Int64}})
  isExternal: true
  name: Average(Expression<Func<T, Boolean>>, Expression<Func<T, Int64>>)
  nameWithType: RepositoryWrapper<T>.Average(Expression<Func<T, Boolean>>, Expression<Func<T, Int64>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Average(System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<T, System.Int64>>)
  nameWithType.vb: RepositoryWrapper(Of T).Average(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Int64)))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Average(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Int64)))
  name.vb: Average(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Int64)))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Int64}})
    name: Average
    nameWithType: RepositoryWrapper<T>.Average
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Average
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Int64}})
    name: Average
    nameWithType: RepositoryWrapper(Of T).Average
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Average
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int64}}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int64}}})
  isExternal: true
  name: Average(Expression<Func<T, Nullable<Int64>>>)
  nameWithType: RepositoryWrapper<T>.Average(Expression<Func<T, Nullable<Int64>>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Average(System.Linq.Expressions.Expression<System.Func<T, System.Nullable<System.Int64>>>)
  nameWithType.vb: RepositoryWrapper(Of T).Average(Expression(Of Func(Of T, Nullable(Of Int64))))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Average(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Nullable(Of System.Int64))))
  name.vb: Average(Expression(Of Func(Of T, Nullable(Of Int64))))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int64}}})
    name: Average
    nameWithType: RepositoryWrapper<T>.Average
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Average
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int64}}})
    name: Average
    nameWithType: RepositoryWrapper(Of T).Average
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Average
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int64}}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int64}}})
  isExternal: true
  name: Average(ISpecification<>, Expression<Func<T, Nullable<Int64>>>)
  nameWithType: RepositoryWrapper<T>.Average(ISpecification<>, Expression<Func<T, Nullable<Int64>>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Average(ISpecification<>, System.Linq.Expressions.Expression<System.Func<T, System.Nullable<System.Int64>>>)
  nameWithType.vb: RepositoryWrapper(Of T).Average(ISpecification(Of ), Expression(Of Func(Of T, Nullable(Of Int64))))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Average(ISpecification(Of ), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Nullable(Of System.Int64))))
  name.vb: Average(ISpecification(Of ), Expression(Of Func(Of T, Nullable(Of Int64))))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int64}}})
    name: Average
    nameWithType: RepositoryWrapper<T>.Average
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Average
  - name: (
    nameWithType: (
    fullName: (
  - uid: ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int64}}})
    name: Average
    nameWithType: RepositoryWrapper(Of T).Average
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Average
  - name: (
    nameWithType: (
    fullName: (
  - uid: ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int64}}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int64}}})
  isExternal: true
  name: Average(Expression<Func<T, Boolean>>, Expression<Func<T, Nullable<Int64>>>)
  nameWithType: RepositoryWrapper<T>.Average(Expression<Func<T, Boolean>>, Expression<Func<T, Nullable<Int64>>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Average(System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<T, System.Nullable<System.Int64>>>)
  nameWithType.vb: RepositoryWrapper(Of T).Average(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Nullable(Of Int64))))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Average(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Nullable(Of System.Int64))))
  name.vb: Average(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Nullable(Of Int64))))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int64}}})
    name: Average
    nameWithType: RepositoryWrapper<T>.Average
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Average
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int64}}})
    name: Average
    nameWithType: RepositoryWrapper(Of T).Average
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Average
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}})
  isExternal: true
  name: Average(Expression<Func<T, Decimal>>)
  nameWithType: RepositoryWrapper<T>.Average(Expression<Func<T, Decimal>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Average(System.Linq.Expressions.Expression<System.Func<T, System.Decimal>>)
  nameWithType.vb: RepositoryWrapper(Of T).Average(Expression(Of Func(Of T, Decimal)))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Average(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Decimal)))
  name.vb: Average(Expression(Of Func(Of T, Decimal)))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}})
    name: Average
    nameWithType: RepositoryWrapper<T>.Average
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Average
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}})
    name: Average
    nameWithType: RepositoryWrapper(Of T).Average
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Average
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}})
  isExternal: true
  name: Average(ISpecification<>, Expression<Func<T, Decimal>>)
  nameWithType: RepositoryWrapper<T>.Average(ISpecification<>, Expression<Func<T, Decimal>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Average(ISpecification<>, System.Linq.Expressions.Expression<System.Func<T, System.Decimal>>)
  nameWithType.vb: RepositoryWrapper(Of T).Average(ISpecification(Of ), Expression(Of Func(Of T, Decimal)))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Average(ISpecification(Of ), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Decimal)))
  name.vb: Average(ISpecification(Of ), Expression(Of Func(Of T, Decimal)))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}})
    name: Average
    nameWithType: RepositoryWrapper<T>.Average
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Average
  - name: (
    nameWithType: (
    fullName: (
  - uid: ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}})
    name: Average
    nameWithType: RepositoryWrapper(Of T).Average
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Average
  - name: (
    nameWithType: (
    fullName: (
  - uid: ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}})
  isExternal: true
  name: Average(Expression<Func<T, Boolean>>, Expression<Func<T, Decimal>>)
  nameWithType: RepositoryWrapper<T>.Average(Expression<Func<T, Boolean>>, Expression<Func<T, Decimal>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Average(System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<T, System.Decimal>>)
  nameWithType.vb: RepositoryWrapper(Of T).Average(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Decimal)))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Average(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Decimal)))
  name.vb: Average(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Decimal)))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}})
    name: Average
    nameWithType: RepositoryWrapper<T>.Average
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Average
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}})
    name: Average
    nameWithType: RepositoryWrapper(Of T).Average
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Average
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Decimal}}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Decimal}}})
  isExternal: true
  name: Average(Expression<Func<T, Nullable<Decimal>>>)
  nameWithType: RepositoryWrapper<T>.Average(Expression<Func<T, Nullable<Decimal>>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Average(System.Linq.Expressions.Expression<System.Func<T, System.Nullable<System.Decimal>>>)
  nameWithType.vb: RepositoryWrapper(Of T).Average(Expression(Of Func(Of T, Nullable(Of Decimal))))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Average(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Nullable(Of System.Decimal))))
  name.vb: Average(Expression(Of Func(Of T, Nullable(Of Decimal))))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Decimal}}})
    name: Average
    nameWithType: RepositoryWrapper<T>.Average
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Average
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Decimal}}})
    name: Average
    nameWithType: RepositoryWrapper(Of T).Average
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Average
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Decimal}}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Decimal}}})
  isExternal: true
  name: Average(ISpecification<>, Expression<Func<T, Nullable<Decimal>>>)
  nameWithType: RepositoryWrapper<T>.Average(ISpecification<>, Expression<Func<T, Nullable<Decimal>>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Average(ISpecification<>, System.Linq.Expressions.Expression<System.Func<T, System.Nullable<System.Decimal>>>)
  nameWithType.vb: RepositoryWrapper(Of T).Average(ISpecification(Of ), Expression(Of Func(Of T, Nullable(Of Decimal))))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Average(ISpecification(Of ), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Nullable(Of System.Decimal))))
  name.vb: Average(ISpecification(Of ), Expression(Of Func(Of T, Nullable(Of Decimal))))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Decimal}}})
    name: Average
    nameWithType: RepositoryWrapper<T>.Average
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Average
  - name: (
    nameWithType: (
    fullName: (
  - uid: ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Decimal}}})
    name: Average
    nameWithType: RepositoryWrapper(Of T).Average
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Average
  - name: (
    nameWithType: (
    fullName: (
  - uid: ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Decimal}}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Decimal}}})
  isExternal: true
  name: Average(Expression<Func<T, Boolean>>, Expression<Func<T, Nullable<Decimal>>>)
  nameWithType: RepositoryWrapper<T>.Average(Expression<Func<T, Boolean>>, Expression<Func<T, Nullable<Decimal>>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Average(System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<T, System.Nullable<System.Decimal>>>)
  nameWithType.vb: RepositoryWrapper(Of T).Average(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Nullable(Of Decimal))))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Average(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Nullable(Of System.Decimal))))
  name.vb: Average(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Nullable(Of Decimal))))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Decimal}}})
    name: Average
    nameWithType: RepositoryWrapper<T>.Average
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Average
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Decimal}}})
    name: Average
    nameWithType: RepositoryWrapper(Of T).Average
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Average
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Double}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Double}})
  isExternal: true
  name: Average(Expression<Func<T, Double>>)
  nameWithType: RepositoryWrapper<T>.Average(Expression<Func<T, Double>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Average(System.Linq.Expressions.Expression<System.Func<T, System.Double>>)
  nameWithType.vb: RepositoryWrapper(Of T).Average(Expression(Of Func(Of T, Double)))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Average(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Double)))
  name.vb: Average(Expression(Of Func(Of T, Double)))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Double}})
    name: Average
    nameWithType: RepositoryWrapper<T>.Average
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Average
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Double}})
    name: Average
    nameWithType: RepositoryWrapper(Of T).Average
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Average
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Double}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Double}})
  isExternal: true
  name: Average(ISpecification<>, Expression<Func<T, Double>>)
  nameWithType: RepositoryWrapper<T>.Average(ISpecification<>, Expression<Func<T, Double>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Average(ISpecification<>, System.Linq.Expressions.Expression<System.Func<T, System.Double>>)
  nameWithType.vb: RepositoryWrapper(Of T).Average(ISpecification(Of ), Expression(Of Func(Of T, Double)))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Average(ISpecification(Of ), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Double)))
  name.vb: Average(ISpecification(Of ), Expression(Of Func(Of T, Double)))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Double}})
    name: Average
    nameWithType: RepositoryWrapper<T>.Average
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Average
  - name: (
    nameWithType: (
    fullName: (
  - uid: ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Double}})
    name: Average
    nameWithType: RepositoryWrapper(Of T).Average
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Average
  - name: (
    nameWithType: (
    fullName: (
  - uid: ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Double}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Double}})
  isExternal: true
  name: Average(Expression<Func<T, Boolean>>, Expression<Func<T, Double>>)
  nameWithType: RepositoryWrapper<T>.Average(Expression<Func<T, Boolean>>, Expression<Func<T, Double>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Average(System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<T, System.Double>>)
  nameWithType.vb: RepositoryWrapper(Of T).Average(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Double)))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Average(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Double)))
  name.vb: Average(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Double)))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Double}})
    name: Average
    nameWithType: RepositoryWrapper<T>.Average
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Average
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Double}})
    name: Average
    nameWithType: RepositoryWrapper(Of T).Average
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Average
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Double}}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Double}}})
  isExternal: true
  name: Average(Expression<Func<T, Nullable<Double>>>)
  nameWithType: RepositoryWrapper<T>.Average(Expression<Func<T, Nullable<Double>>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Average(System.Linq.Expressions.Expression<System.Func<T, System.Nullable<System.Double>>>)
  nameWithType.vb: RepositoryWrapper(Of T).Average(Expression(Of Func(Of T, Nullable(Of Double))))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Average(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Nullable(Of System.Double))))
  name.vb: Average(Expression(Of Func(Of T, Nullable(Of Double))))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Double}}})
    name: Average
    nameWithType: RepositoryWrapper<T>.Average
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Average
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Double}}})
    name: Average
    nameWithType: RepositoryWrapper(Of T).Average
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Average
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Double}}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Double}}})
  isExternal: true
  name: Average(ISpecification<>, Expression<Func<T, Nullable<Double>>>)
  nameWithType: RepositoryWrapper<T>.Average(ISpecification<>, Expression<Func<T, Nullable<Double>>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Average(ISpecification<>, System.Linq.Expressions.Expression<System.Func<T, System.Nullable<System.Double>>>)
  nameWithType.vb: RepositoryWrapper(Of T).Average(ISpecification(Of ), Expression(Of Func(Of T, Nullable(Of Double))))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Average(ISpecification(Of ), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Nullable(Of System.Double))))
  name.vb: Average(ISpecification(Of ), Expression(Of Func(Of T, Nullable(Of Double))))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Double}}})
    name: Average
    nameWithType: RepositoryWrapper<T>.Average
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Average
  - name: (
    nameWithType: (
    fullName: (
  - uid: ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Double}}})
    name: Average
    nameWithType: RepositoryWrapper(Of T).Average
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Average
  - name: (
    nameWithType: (
    fullName: (
  - uid: ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Double}}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Double}}})
  isExternal: true
  name: Average(Expression<Func<T, Boolean>>, Expression<Func<T, Nullable<Double>>>)
  nameWithType: RepositoryWrapper<T>.Average(Expression<Func<T, Boolean>>, Expression<Func<T, Nullable<Double>>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Average(System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<T, System.Nullable<System.Double>>>)
  nameWithType.vb: RepositoryWrapper(Of T).Average(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Nullable(Of Double))))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Average(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Nullable(Of System.Double))))
  name.vb: Average(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Nullable(Of Double))))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Double}}})
    name: Average
    nameWithType: RepositoryWrapper<T>.Average
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Average
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Double}}})
    name: Average
    nameWithType: RepositoryWrapper(Of T).Average
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Average
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Single}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Single}})
  isExternal: true
  name: Average(Expression<Func<T, Single>>)
  nameWithType: RepositoryWrapper<T>.Average(Expression<Func<T, Single>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Average(System.Linq.Expressions.Expression<System.Func<T, System.Single>>)
  nameWithType.vb: RepositoryWrapper(Of T).Average(Expression(Of Func(Of T, Single)))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Average(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Single)))
  name.vb: Average(Expression(Of Func(Of T, Single)))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Single}})
    name: Average
    nameWithType: RepositoryWrapper<T>.Average
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Average
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Single}})
    name: Average
    nameWithType: RepositoryWrapper(Of T).Average
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Average
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Single}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Single}})
  isExternal: true
  name: Average(ISpecification<>, Expression<Func<T, Single>>)
  nameWithType: RepositoryWrapper<T>.Average(ISpecification<>, Expression<Func<T, Single>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Average(ISpecification<>, System.Linq.Expressions.Expression<System.Func<T, System.Single>>)
  nameWithType.vb: RepositoryWrapper(Of T).Average(ISpecification(Of ), Expression(Of Func(Of T, Single)))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Average(ISpecification(Of ), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Single)))
  name.vb: Average(ISpecification(Of ), Expression(Of Func(Of T, Single)))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Single}})
    name: Average
    nameWithType: RepositoryWrapper<T>.Average
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Average
  - name: (
    nameWithType: (
    fullName: (
  - uid: ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Single}})
    name: Average
    nameWithType: RepositoryWrapper(Of T).Average
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Average
  - name: (
    nameWithType: (
    fullName: (
  - uid: ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Single}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Single}})
  isExternal: true
  name: Average(Expression<Func<T, Boolean>>, Expression<Func<T, Single>>)
  nameWithType: RepositoryWrapper<T>.Average(Expression<Func<T, Boolean>>, Expression<Func<T, Single>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Average(System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<T, System.Single>>)
  nameWithType.vb: RepositoryWrapper(Of T).Average(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Single)))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Average(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Single)))
  name.vb: Average(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Single)))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Single}})
    name: Average
    nameWithType: RepositoryWrapper<T>.Average
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Average
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Single}})
    name: Average
    nameWithType: RepositoryWrapper(Of T).Average
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Average
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Single}}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Single}}})
  isExternal: true
  name: Average(Expression<Func<T, Nullable<Single>>>)
  nameWithType: RepositoryWrapper<T>.Average(Expression<Func<T, Nullable<Single>>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Average(System.Linq.Expressions.Expression<System.Func<T, System.Nullable<System.Single>>>)
  nameWithType.vb: RepositoryWrapper(Of T).Average(Expression(Of Func(Of T, Nullable(Of Single))))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Average(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Nullable(Of System.Single))))
  name.vb: Average(Expression(Of Func(Of T, Nullable(Of Single))))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Single}}})
    name: Average
    nameWithType: RepositoryWrapper<T>.Average
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Average
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Single}}})
    name: Average
    nameWithType: RepositoryWrapper(Of T).Average
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Average
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Single}}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Single}}})
  isExternal: true
  name: Average(ISpecification<>, Expression<Func<T, Nullable<Single>>>)
  nameWithType: RepositoryWrapper<T>.Average(ISpecification<>, Expression<Func<T, Nullable<Single>>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Average(ISpecification<>, System.Linq.Expressions.Expression<System.Func<T, System.Nullable<System.Single>>>)
  nameWithType.vb: RepositoryWrapper(Of T).Average(ISpecification(Of ), Expression(Of Func(Of T, Nullable(Of Single))))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Average(ISpecification(Of ), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Nullable(Of System.Single))))
  name.vb: Average(ISpecification(Of ), Expression(Of Func(Of T, Nullable(Of Single))))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Single}}})
    name: Average
    nameWithType: RepositoryWrapper<T>.Average
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Average
  - name: (
    nameWithType: (
    fullName: (
  - uid: ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Single}}})
    name: Average
    nameWithType: RepositoryWrapper(Of T).Average
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Average
  - name: (
    nameWithType: (
    fullName: (
  - uid: ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Single}}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Single}}})
  isExternal: true
  name: Average(Expression<Func<T, Boolean>>, Expression<Func<T, Nullable<Single>>>)
  nameWithType: RepositoryWrapper<T>.Average(Expression<Func<T, Boolean>>, Expression<Func<T, Nullable<Single>>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Average(System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<T, System.Nullable<System.Single>>>)
  nameWithType.vb: RepositoryWrapper(Of T).Average(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Nullable(Of Single))))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Average(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Nullable(Of System.Single))))
  name.vb: Average(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Nullable(Of Single))))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Single}}})
    name: Average
    nameWithType: RepositoryWrapper<T>.Average
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Average
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Single}}})
    name: Average
    nameWithType: RepositoryWrapper(Of T).Average
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Average
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.BeginBatch
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.BeginBatch
  name: BeginBatch()
  nameWithType: RepositoryWrapper<T>.BeginBatch()
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.BeginBatch()
  nameWithType.vb: RepositoryWrapper(Of T).BeginBatch()
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).BeginBatch()
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.BeginBatch
    name: BeginBatch
    nameWithType: RepositoryWrapper<T>.BeginBatch
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.BeginBatch
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.BeginBatch
    name: BeginBatch
    nameWithType: RepositoryWrapper(Of T).BeginBatch
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).BeginBatch
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.ClearCache
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.ClearCache
  name: ClearCache()
  nameWithType: RepositoryWrapper<T>.ClearCache()
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.ClearCache()
  nameWithType.vb: RepositoryWrapper(Of T).ClearCache()
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).ClearCache()
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.ClearCache
    name: ClearCache
    nameWithType: RepositoryWrapper<T>.ClearCache
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.ClearCache
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.ClearCache
    name: ClearCache
    nameWithType: RepositoryWrapper(Of T).ClearCache
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).ClearCache
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Count
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Count
  name: Count()
  nameWithType: RepositoryWrapper<T>.Count()
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Count()
  nameWithType.vb: RepositoryWrapper(Of T).Count()
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Count()
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Count
    name: Count
    nameWithType: RepositoryWrapper<T>.Count
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Count
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Count
    name: Count
    nameWithType: RepositoryWrapper(Of T).Count
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Count
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Count(ISpecification{`0})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Count(ISpecification{`0})
  isExternal: true
  name: Count(ISpecification<>)
  nameWithType: RepositoryWrapper<T>.Count(ISpecification<>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Count(ISpecification<>)
  nameWithType.vb: RepositoryWrapper(Of T).Count(ISpecification(Of ))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Count(ISpecification(Of ))
  name.vb: Count(ISpecification(Of ))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Count(ISpecification{`0})
    name: Count
    nameWithType: RepositoryWrapper<T>.Count
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Count
  - name: (
    nameWithType: (
    fullName: (
  - uid: ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Count(ISpecification{`0})
    name: Count
    nameWithType: RepositoryWrapper(Of T).Count
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Count
  - name: (
    nameWithType: (
    fullName: (
  - uid: ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Count(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Count(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  isExternal: true
  name: Count(Expression<Func<T, Boolean>>)
  nameWithType: RepositoryWrapper<T>.Count(Expression<Func<T, Boolean>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Count(System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>)
  nameWithType.vb: RepositoryWrapper(Of T).Count(Expression(Of Func(Of T, Boolean)))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Count(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)))
  name.vb: Count(Expression(Of Func(Of T, Boolean)))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Count(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
    name: Count
    nameWithType: RepositoryWrapper<T>.Count
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Count
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Count(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
    name: Count
    nameWithType: RepositoryWrapper(Of T).Count
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Count
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Delete(System.String)
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Delete(System.String)
  isExternal: true
  name: Delete(String)
  nameWithType: RepositoryWrapper<T>.Delete(String)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Delete(System.String)
  nameWithType.vb: RepositoryWrapper(Of T).Delete(String)
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Delete(System.String)
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Delete(System.String)
    name: Delete
    nameWithType: RepositoryWrapper<T>.Delete
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Delete
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Delete(System.String)
    name: Delete
    nameWithType: RepositoryWrapper(Of T).Delete
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Delete
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Delete(System.Collections.Generic.IEnumerable{System.String})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Delete(System.Collections.Generic.IEnumerable{System.String})
  isExternal: true
  name: Delete(IEnumerable<String>)
  nameWithType: RepositoryWrapper<T>.Delete(IEnumerable<String>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Delete(System.Collections.Generic.IEnumerable<System.String>)
  nameWithType.vb: RepositoryWrapper(Of T).Delete(IEnumerable(Of String))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Delete(System.Collections.Generic.IEnumerable(Of System.String))
  name.vb: Delete(IEnumerable(Of String))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Delete(System.Collections.Generic.IEnumerable{System.String})
    name: Delete
    nameWithType: RepositoryWrapper<T>.Delete
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Delete
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Delete(System.Collections.Generic.IEnumerable{System.String})
    name: Delete
    nameWithType: RepositoryWrapper(Of T).Delete
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Delete
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Delete(System.String[])
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Delete(System.String[])
  isExternal: true
  name: Delete(String[])
  nameWithType: RepositoryWrapper<T>.Delete(String[])
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Delete(System.String[])
  nameWithType.vb: RepositoryWrapper(Of T).Delete(String())
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Delete(System.String())
  name.vb: Delete(String())
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Delete(System.String[])
    name: Delete
    nameWithType: RepositoryWrapper<T>.Delete
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Delete
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Delete(System.String[])
    name: Delete
    nameWithType: RepositoryWrapper(Of T).Delete
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Delete
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Delete(`0)
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Delete(`0)
  name: Delete(T)
  nameWithType: RepositoryWrapper<T>.Delete(T)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Delete(T)
  nameWithType.vb: RepositoryWrapper(Of T).Delete(T)
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Delete(T)
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Delete(`0)
    name: Delete
    nameWithType: RepositoryWrapper<T>.Delete
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Delete
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Delete(`0)
    name: Delete
    nameWithType: RepositoryWrapper(Of T).Delete
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Delete
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Delete(System.Collections.Generic.IEnumerable{`0})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Delete(System.Collections.Generic.IEnumerable{`0})
  isExternal: true
  name: Delete(IEnumerable<T>)
  nameWithType: RepositoryWrapper<T>.Delete(IEnumerable<T>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Delete(System.Collections.Generic.IEnumerable<T>)
  nameWithType.vb: RepositoryWrapper(Of T).Delete(IEnumerable(Of T))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Delete(System.Collections.Generic.IEnumerable(Of T))
  name.vb: Delete(IEnumerable(Of T))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Delete(System.Collections.Generic.IEnumerable{`0})
    name: Delete
    nameWithType: RepositoryWrapper<T>.Delete
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Delete
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Delete(System.Collections.Generic.IEnumerable{`0})
    name: Delete
    nameWithType: RepositoryWrapper(Of T).Delete
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Delete
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Delete(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Delete(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  isExternal: true
  name: Delete(Expression<Func<T, Boolean>>)
  nameWithType: RepositoryWrapper<T>.Delete(Expression<Func<T, Boolean>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Delete(System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>)
  nameWithType.vb: RepositoryWrapper(Of T).Delete(Expression(Of Func(Of T, Boolean)))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Delete(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)))
  name.vb: Delete(Expression(Of Func(Of T, Boolean)))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Delete(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
    name: Delete
    nameWithType: RepositoryWrapper<T>.Delete
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Delete
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Delete(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
    name: Delete
    nameWithType: RepositoryWrapper(Of T).Delete
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Delete
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Delete(ISpecification{`0})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Delete(ISpecification{`0})
  isExternal: true
  name: Delete(ISpecification<>)
  nameWithType: RepositoryWrapper<T>.Delete(ISpecification<>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Delete(ISpecification<>)
  nameWithType.vb: RepositoryWrapper(Of T).Delete(ISpecification(Of ))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Delete(ISpecification(Of ))
  name.vb: Delete(ISpecification(Of ))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Delete(ISpecification{`0})
    name: Delete
    nameWithType: RepositoryWrapper<T>.Delete
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Delete
  - name: (
    nameWithType: (
    fullName: (
  - uid: ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Delete(ISpecification{`0})
    name: Delete
    nameWithType: RepositoryWrapper(Of T).Delete
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Delete
  - name: (
    nameWithType: (
    fullName: (
  - uid: ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.DisableCaching
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.DisableCaching
  name: DisableCaching()
  nameWithType: RepositoryWrapper<T>.DisableCaching()
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.DisableCaching()
  nameWithType.vb: RepositoryWrapper(Of T).DisableCaching()
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).DisableCaching()
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.DisableCaching
    name: DisableCaching
    nameWithType: RepositoryWrapper<T>.DisableCaching
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.DisableCaching
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.DisableCaching
    name: DisableCaching
    nameWithType: RepositoryWrapper(Of T).DisableCaching
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).DisableCaching
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Dispose
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Dispose
  name: Dispose()
  nameWithType: RepositoryWrapper<T>.Dispose()
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Dispose()
  nameWithType.vb: RepositoryWrapper(Of T).Dispose()
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Dispose()
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Dispose
    name: Dispose
    nameWithType: RepositoryWrapper<T>.Dispose
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Dispose
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Dispose
    name: Dispose
    nameWithType: RepositoryWrapper(Of T).Dispose
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Dispose
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Exists(System.String)
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Exists(System.String)
  isExternal: true
  name: Exists(String)
  nameWithType: RepositoryWrapper<T>.Exists(String)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Exists(System.String)
  nameWithType.vb: RepositoryWrapper(Of T).Exists(String)
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Exists(System.String)
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Exists(System.String)
    name: Exists
    nameWithType: RepositoryWrapper<T>.Exists
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Exists
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Exists(System.String)
    name: Exists
    nameWithType: RepositoryWrapper(Of T).Exists
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Exists
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Exists(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Exists(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  isExternal: true
  name: Exists(Expression<Func<T, Boolean>>)
  nameWithType: RepositoryWrapper<T>.Exists(Expression<Func<T, Boolean>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Exists(System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>)
  nameWithType.vb: RepositoryWrapper(Of T).Exists(Expression(Of Func(Of T, Boolean)))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Exists(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)))
  name.vb: Exists(Expression(Of Func(Of T, Boolean)))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Exists(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
    name: Exists
    nameWithType: RepositoryWrapper<T>.Exists
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Exists
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Exists(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
    name: Exists
    nameWithType: RepositoryWrapper(Of T).Exists
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Exists
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Exists(ISpecification{`0})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Exists(ISpecification{`0})
  isExternal: true
  name: Exists(ISpecification<>)
  nameWithType: RepositoryWrapper<T>.Exists(ISpecification<>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Exists(ISpecification<>)
  nameWithType.vb: RepositoryWrapper(Of T).Exists(ISpecification(Of ))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Exists(ISpecification(Of ))
  name.vb: Exists(ISpecification(Of ))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Exists(ISpecification{`0})
    name: Exists
    nameWithType: RepositoryWrapper<T>.Exists
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Exists
  - name: (
    nameWithType: (
    fullName: (
  - uid: ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Exists(ISpecification{`0})
    name: Exists
    nameWithType: RepositoryWrapper(Of T).Exists
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Exists
  - name: (
    nameWithType: (
    fullName: (
  - uid: ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Find(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},IQueryOptions{`0})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Find(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},IQueryOptions{`0})
  isExternal: true
  name: Find(Expression<Func<T, Boolean>>, IQueryOptions<>)
  nameWithType: RepositoryWrapper<T>.Find(Expression<Func<T, Boolean>>, IQueryOptions<>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Find(System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>, IQueryOptions<>)
  nameWithType.vb: RepositoryWrapper(Of T).Find(Expression(Of Func(Of T, Boolean)), IQueryOptions(Of ))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Find(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)), IQueryOptions(Of ))
  name.vb: Find(Expression(Of Func(Of T, Boolean)), IQueryOptions(Of ))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Find(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},IQueryOptions{`0})
    name: Find
    nameWithType: RepositoryWrapper<T>.Find
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Find
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: IQueryOptions
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Find(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},IQueryOptions{`0})
    name: Find
    nameWithType: RepositoryWrapper(Of T).Find
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Find
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: IQueryOptions
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Find``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},IQueryOptions{`0})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Find``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},IQueryOptions{`0})
  isExternal: true
  name: Find<TResult>(Expression<Func<T, Boolean>>, Expression<Func<T, TResult>>, IQueryOptions<>)
  nameWithType: RepositoryWrapper<T>.Find<TResult>(Expression<Func<T, Boolean>>, Expression<Func<T, TResult>>, IQueryOptions<>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Find<TResult>(System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<T, TResult>>, IQueryOptions<>)
  nameWithType.vb: RepositoryWrapper(Of T).Find(Of TResult)(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, TResult)), IQueryOptions(Of ))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Find(Of TResult)(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of T, TResult)), IQueryOptions(Of ))
  name.vb: Find(Of TResult)(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, TResult)), IQueryOptions(Of ))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Find``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},IQueryOptions{`0})
    name: Find<TResult>
    nameWithType: RepositoryWrapper<T>.Find<TResult>
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Find<TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: IQueryOptions
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Find``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},IQueryOptions{`0})
    name: Find(Of TResult)
    nameWithType: RepositoryWrapper(Of T).Find(Of TResult)
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Find(Of TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: IQueryOptions
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Find(ISpecification{`0},IQueryOptions{`0})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Find(ISpecification{`0},IQueryOptions{`0})
  isExternal: true
  name: Find(ISpecification<>, IQueryOptions<>)
  nameWithType: RepositoryWrapper<T>.Find(ISpecification<>, IQueryOptions<>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Find(ISpecification<>, IQueryOptions<>)
  nameWithType.vb: RepositoryWrapper(Of T).Find(ISpecification(Of ), IQueryOptions(Of ))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Find(ISpecification(Of ), IQueryOptions(Of ))
  name.vb: Find(ISpecification(Of ), IQueryOptions(Of ))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Find(ISpecification{`0},IQueryOptions{`0})
    name: Find
    nameWithType: RepositoryWrapper<T>.Find
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Find
  - name: (
    nameWithType: (
    fullName: (
  - uid: ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: IQueryOptions
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Find(ISpecification{`0},IQueryOptions{`0})
    name: Find
    nameWithType: RepositoryWrapper(Of T).Find
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Find
  - name: (
    nameWithType: (
    fullName: (
  - uid: ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: IQueryOptions
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Find``1(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}},IQueryOptions{`0})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Find``1(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}},IQueryOptions{`0})
  isExternal: true
  name: Find<TResult>(ISpecification<>, Expression<Func<T, TResult>>, IQueryOptions<>)
  nameWithType: RepositoryWrapper<T>.Find<TResult>(ISpecification<>, Expression<Func<T, TResult>>, IQueryOptions<>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Find<TResult>(ISpecification<>, System.Linq.Expressions.Expression<System.Func<T, TResult>>, IQueryOptions<>)
  nameWithType.vb: RepositoryWrapper(Of T).Find(Of TResult)(ISpecification(Of ), Expression(Of Func(Of T, TResult)), IQueryOptions(Of ))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Find(Of TResult)(ISpecification(Of ), System.Linq.Expressions.Expression(Of System.Func(Of T, TResult)), IQueryOptions(Of ))
  name.vb: Find(Of TResult)(ISpecification(Of ), Expression(Of Func(Of T, TResult)), IQueryOptions(Of ))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Find``1(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}},IQueryOptions{`0})
    name: Find<TResult>
    nameWithType: RepositoryWrapper<T>.Find<TResult>
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Find<TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: IQueryOptions
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Find``1(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}},IQueryOptions{`0})
    name: Find(Of TResult)
    nameWithType: RepositoryWrapper(Of T).Find(Of TResult)
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Find(Of TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: IQueryOptions
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.FindAll(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},IQueryOptions{`0})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.FindAll(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},IQueryOptions{`0})
  isExternal: true
  name: FindAll(Expression<Func<T, Boolean>>, IQueryOptions<>)
  nameWithType: RepositoryWrapper<T>.FindAll(Expression<Func<T, Boolean>>, IQueryOptions<>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.FindAll(System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>, IQueryOptions<>)
  nameWithType.vb: RepositoryWrapper(Of T).FindAll(Expression(Of Func(Of T, Boolean)), IQueryOptions(Of ))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).FindAll(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)), IQueryOptions(Of ))
  name.vb: FindAll(Expression(Of Func(Of T, Boolean)), IQueryOptions(Of ))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.FindAll(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},IQueryOptions{`0})
    name: FindAll
    nameWithType: RepositoryWrapper<T>.FindAll
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.FindAll
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: IQueryOptions
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.FindAll(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},IQueryOptions{`0})
    name: FindAll
    nameWithType: RepositoryWrapper(Of T).FindAll
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).FindAll
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: IQueryOptions
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.FindAll``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},IQueryOptions{`0})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.FindAll``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},IQueryOptions{`0})
  isExternal: true
  name: FindAll<TResult>(Expression<Func<T, Boolean>>, Expression<Func<T, TResult>>, IQueryOptions<>)
  nameWithType: RepositoryWrapper<T>.FindAll<TResult>(Expression<Func<T, Boolean>>, Expression<Func<T, TResult>>, IQueryOptions<>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.FindAll<TResult>(System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<T, TResult>>, IQueryOptions<>)
  nameWithType.vb: RepositoryWrapper(Of T).FindAll(Of TResult)(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, TResult)), IQueryOptions(Of ))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).FindAll(Of TResult)(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of T, TResult)), IQueryOptions(Of ))
  name.vb: FindAll(Of TResult)(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, TResult)), IQueryOptions(Of ))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.FindAll``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},IQueryOptions{`0})
    name: FindAll<TResult>
    nameWithType: RepositoryWrapper<T>.FindAll<TResult>
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.FindAll<TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: IQueryOptions
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.FindAll``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},IQueryOptions{`0})
    name: FindAll(Of TResult)
    nameWithType: RepositoryWrapper(Of T).FindAll(Of TResult)
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).FindAll(Of TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: IQueryOptions
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.FindAll(ISpecification{`0},IQueryOptions{`0})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.FindAll(ISpecification{`0},IQueryOptions{`0})
  isExternal: true
  name: FindAll(ISpecification<>, IQueryOptions<>)
  nameWithType: RepositoryWrapper<T>.FindAll(ISpecification<>, IQueryOptions<>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.FindAll(ISpecification<>, IQueryOptions<>)
  nameWithType.vb: RepositoryWrapper(Of T).FindAll(ISpecification(Of ), IQueryOptions(Of ))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).FindAll(ISpecification(Of ), IQueryOptions(Of ))
  name.vb: FindAll(ISpecification(Of ), IQueryOptions(Of ))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.FindAll(ISpecification{`0},IQueryOptions{`0})
    name: FindAll
    nameWithType: RepositoryWrapper<T>.FindAll
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.FindAll
  - name: (
    nameWithType: (
    fullName: (
  - uid: ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: IQueryOptions
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.FindAll(ISpecification{`0},IQueryOptions{`0})
    name: FindAll
    nameWithType: RepositoryWrapper(Of T).FindAll
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).FindAll
  - name: (
    nameWithType: (
    fullName: (
  - uid: ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: IQueryOptions
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.FindAll``1(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}},IQueryOptions{`0})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.FindAll``1(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}},IQueryOptions{`0})
  isExternal: true
  name: FindAll<TResult>(ISpecification<>, Expression<Func<T, TResult>>, IQueryOptions<>)
  nameWithType: RepositoryWrapper<T>.FindAll<TResult>(ISpecification<>, Expression<Func<T, TResult>>, IQueryOptions<>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.FindAll<TResult>(ISpecification<>, System.Linq.Expressions.Expression<System.Func<T, TResult>>, IQueryOptions<>)
  nameWithType.vb: RepositoryWrapper(Of T).FindAll(Of TResult)(ISpecification(Of ), Expression(Of Func(Of T, TResult)), IQueryOptions(Of ))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).FindAll(Of TResult)(ISpecification(Of ), System.Linq.Expressions.Expression(Of System.Func(Of T, TResult)), IQueryOptions(Of ))
  name.vb: FindAll(Of TResult)(ISpecification(Of ), Expression(Of Func(Of T, TResult)), IQueryOptions(Of ))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.FindAll``1(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}},IQueryOptions{`0})
    name: FindAll<TResult>
    nameWithType: RepositoryWrapper<T>.FindAll<TResult>
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.FindAll<TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: IQueryOptions
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.FindAll``1(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}},IQueryOptions{`0})
    name: FindAll(Of TResult)
    nameWithType: RepositoryWrapper(Of T).FindAll(Of TResult)
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).FindAll(Of TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: IQueryOptions
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Get(System.String)
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Get(System.String)
  isExternal: true
  name: Get(String)
  nameWithType: RepositoryWrapper<T>.Get(String)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Get(System.String)
  nameWithType.vb: RepositoryWrapper(Of T).Get(String)
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Get(System.String)
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Get(System.String)
    name: Get
    nameWithType: RepositoryWrapper<T>.Get
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Get
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Get(System.String)
    name: Get
    nameWithType: RepositoryWrapper(Of T).Get
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Get
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Get(System.String,IFetchStrategy{`0})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Get(System.String,IFetchStrategy{`0})
  isExternal: true
  name: Get(String, IFetchStrategy<>)
  nameWithType: RepositoryWrapper<T>.Get(String, IFetchStrategy<>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Get(System.String, IFetchStrategy<>)
  nameWithType.vb: RepositoryWrapper(Of T).Get(String, IFetchStrategy(Of ))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Get(System.String, IFetchStrategy(Of ))
  name.vb: Get(String, IFetchStrategy(Of ))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Get(System.String,IFetchStrategy{`0})
    name: Get
    nameWithType: RepositoryWrapper<T>.Get
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Get
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: IFetchStrategy`1
    name: IFetchStrategy
    nameWithType: IFetchStrategy
    fullName: IFetchStrategy
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Get(System.String,IFetchStrategy{`0})
    name: Get
    nameWithType: RepositoryWrapper(Of T).Get
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Get
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: IFetchStrategy`1
    name: IFetchStrategy
    nameWithType: IFetchStrategy
    fullName: IFetchStrategy
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Get(System.String,System.String[])
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Get(System.String,System.String[])
  isExternal: true
  name: Get(String, String[])
  nameWithType: RepositoryWrapper<T>.Get(String, String[])
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Get(System.String, System.String[])
  nameWithType.vb: RepositoryWrapper(Of T).Get(String, String())
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Get(System.String, System.String())
  name.vb: Get(String, String())
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Get(System.String,System.String[])
    name: Get
    nameWithType: RepositoryWrapper<T>.Get
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Get
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Get(System.String,System.String[])
    name: Get
    nameWithType: RepositoryWrapper(Of T).Get
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Get
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Get(System.String,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Get(System.String,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])
  isExternal: true
  name: Get(String, Expression<Func<T, Object>>[])
  nameWithType: RepositoryWrapper<T>.Get(String, Expression<Func<T, Object>>[])
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Get(System.String, System.Linq.Expressions.Expression<System.Func<T, System.Object>>[])
  nameWithType.vb: RepositoryWrapper(Of T).Get(String, Expression(Of Func(Of T, Object))())
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Get(System.String, System.Linq.Expressions.Expression(Of System.Func(Of T, System.Object))())
  name.vb: Get(String, Expression(Of Func(Of T, Object))())
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Get(System.String,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])
    name: Get
    nameWithType: RepositoryWrapper<T>.Get
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Get
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Get(System.String,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])
    name: Get
    nameWithType: RepositoryWrapper(Of T).Get
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Get
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Get``1(System.String,System.Linq.Expressions.Expression{System.Func{`0,``0}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Get``1(System.String,System.Linq.Expressions.Expression{System.Func{`0,``0}})
  isExternal: true
  name: Get<TResult>(String, Expression<Func<T, TResult>>)
  nameWithType: RepositoryWrapper<T>.Get<TResult>(String, Expression<Func<T, TResult>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Get<TResult>(System.String, System.Linq.Expressions.Expression<System.Func<T, TResult>>)
  nameWithType.vb: RepositoryWrapper(Of T).Get(Of TResult)(String, Expression(Of Func(Of T, TResult)))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Get(Of TResult)(System.String, System.Linq.Expressions.Expression(Of System.Func(Of T, TResult)))
  name.vb: Get(Of TResult)(String, Expression(Of Func(Of T, TResult)))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Get``1(System.String,System.Linq.Expressions.Expression{System.Func{`0,``0}})
    name: Get<TResult>
    nameWithType: RepositoryWrapper<T>.Get<TResult>
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Get<TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Get``1(System.String,System.Linq.Expressions.Expression{System.Func{`0,``0}})
    name: Get(Of TResult)
    nameWithType: RepositoryWrapper(Of T).Get(Of TResult)
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Get(Of TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Get``1(System.String,System.Linq.Expressions.Expression{System.Func{`0,``0}},IFetchStrategy{`0})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Get``1(System.String,System.Linq.Expressions.Expression{System.Func{`0,``0}},IFetchStrategy{`0})
  isExternal: true
  name: Get<TResult>(String, Expression<Func<T, TResult>>, IFetchStrategy<>)
  nameWithType: RepositoryWrapper<T>.Get<TResult>(String, Expression<Func<T, TResult>>, IFetchStrategy<>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Get<TResult>(System.String, System.Linq.Expressions.Expression<System.Func<T, TResult>>, IFetchStrategy<>)
  nameWithType.vb: RepositoryWrapper(Of T).Get(Of TResult)(String, Expression(Of Func(Of T, TResult)), IFetchStrategy(Of ))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Get(Of TResult)(System.String, System.Linq.Expressions.Expression(Of System.Func(Of T, TResult)), IFetchStrategy(Of ))
  name.vb: Get(Of TResult)(String, Expression(Of Func(Of T, TResult)), IFetchStrategy(Of ))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Get``1(System.String,System.Linq.Expressions.Expression{System.Func{`0,``0}},IFetchStrategy{`0})
    name: Get<TResult>
    nameWithType: RepositoryWrapper<T>.Get<TResult>
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Get<TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: IFetchStrategy`1
    name: IFetchStrategy
    nameWithType: IFetchStrategy
    fullName: IFetchStrategy
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Get``1(System.String,System.Linq.Expressions.Expression{System.Func{`0,``0}},IFetchStrategy{`0})
    name: Get(Of TResult)
    nameWithType: RepositoryWrapper(Of T).Get(Of TResult)
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Get(Of TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: IFetchStrategy`1
    name: IFetchStrategy
    nameWithType: IFetchStrategy
    fullName: IFetchStrategy
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Get``1(System.String,System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Get``1(System.String,System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])
  isExternal: true
  name: Get<TResult>(String, Expression<Func<T, TResult>>, Expression<Func<T, Object>>[])
  nameWithType: RepositoryWrapper<T>.Get<TResult>(String, Expression<Func<T, TResult>>, Expression<Func<T, Object>>[])
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Get<TResult>(System.String, System.Linq.Expressions.Expression<System.Func<T, TResult>>, System.Linq.Expressions.Expression<System.Func<T, System.Object>>[])
  nameWithType.vb: RepositoryWrapper(Of T).Get(Of TResult)(String, Expression(Of Func(Of T, TResult)), Expression(Of Func(Of T, Object))())
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Get(Of TResult)(System.String, System.Linq.Expressions.Expression(Of System.Func(Of T, TResult)), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Object))())
  name.vb: Get(Of TResult)(String, Expression(Of Func(Of T, TResult)), Expression(Of Func(Of T, Object))())
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Get``1(System.String,System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])
    name: Get<TResult>
    nameWithType: RepositoryWrapper<T>.Get<TResult>
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Get<TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Get``1(System.String,System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])
    name: Get(Of TResult)
    nameWithType: RepositoryWrapper(Of T).Get(Of TResult)
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Get(Of TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Get``1(System.String,System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String[])
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Get``1(System.String,System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String[])
  isExternal: true
  name: Get<TResult>(String, Expression<Func<T, TResult>>, String[])
  nameWithType: RepositoryWrapper<T>.Get<TResult>(String, Expression<Func<T, TResult>>, String[])
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Get<TResult>(System.String, System.Linq.Expressions.Expression<System.Func<T, TResult>>, System.String[])
  nameWithType.vb: RepositoryWrapper(Of T).Get(Of TResult)(String, Expression(Of Func(Of T, TResult)), String())
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Get(Of TResult)(System.String, System.Linq.Expressions.Expression(Of System.Func(Of T, TResult)), System.String())
  name.vb: Get(Of TResult)(String, Expression(Of Func(Of T, TResult)), String())
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Get``1(System.String,System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String[])
    name: Get<TResult>
    nameWithType: RepositoryWrapper<T>.Get<TResult>
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Get<TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Get``1(System.String,System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String[])
    name: Get(Of TResult)
    nameWithType: RepositoryWrapper(Of T).Get(Of TResult)
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Get(Of TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll
  name: GetAll()
  nameWithType: RepositoryWrapper<T>.GetAll()
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.GetAll()
  nameWithType.vb: RepositoryWrapper(Of T).GetAll()
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).GetAll()
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll
    name: GetAll
    nameWithType: RepositoryWrapper<T>.GetAll
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.GetAll
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll
    name: GetAll
    nameWithType: RepositoryWrapper(Of T).GetAll
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).GetAll
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll(IFetchStrategy{`0})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll(IFetchStrategy{`0})
  isExternal: true
  name: GetAll(IFetchStrategy<>)
  nameWithType: RepositoryWrapper<T>.GetAll(IFetchStrategy<>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.GetAll(IFetchStrategy<>)
  nameWithType.vb: RepositoryWrapper(Of T).GetAll(IFetchStrategy(Of ))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).GetAll(IFetchStrategy(Of ))
  name.vb: GetAll(IFetchStrategy(Of ))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll(IFetchStrategy{`0})
    name: GetAll
    nameWithType: RepositoryWrapper<T>.GetAll
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.GetAll
  - name: (
    nameWithType: (
    fullName: (
  - uid: IFetchStrategy`1
    name: IFetchStrategy
    nameWithType: IFetchStrategy
    fullName: IFetchStrategy
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll(IFetchStrategy{`0})
    name: GetAll
    nameWithType: RepositoryWrapper(Of T).GetAll
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).GetAll
  - name: (
    nameWithType: (
    fullName: (
  - uid: IFetchStrategy`1
    name: IFetchStrategy
    nameWithType: IFetchStrategy
    fullName: IFetchStrategy
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll(System.String[])
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll(System.String[])
  isExternal: true
  name: GetAll(String[])
  nameWithType: RepositoryWrapper<T>.GetAll(String[])
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.GetAll(System.String[])
  nameWithType.vb: RepositoryWrapper(Of T).GetAll(String())
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).GetAll(System.String())
  name.vb: GetAll(String())
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll(System.String[])
    name: GetAll
    nameWithType: RepositoryWrapper<T>.GetAll
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.GetAll
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll(System.String[])
    name: GetAll
    nameWithType: RepositoryWrapper(Of T).GetAll
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).GetAll
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll(System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll(System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])
  isExternal: true
  name: GetAll(Expression<Func<T, Object>>[])
  nameWithType: RepositoryWrapper<T>.GetAll(Expression<Func<T, Object>>[])
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.GetAll(System.Linq.Expressions.Expression<System.Func<T, System.Object>>[])
  nameWithType.vb: RepositoryWrapper(Of T).GetAll(Expression(Of Func(Of T, Object))())
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).GetAll(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Object))())
  name.vb: GetAll(Expression(Of Func(Of T, Object))())
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll(System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])
    name: GetAll
    nameWithType: RepositoryWrapper<T>.GetAll
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.GetAll
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll(System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])
    name: GetAll
    nameWithType: RepositoryWrapper(Of T).GetAll
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).GetAll
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll(IQueryOptions{`0})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll(IQueryOptions{`0})
  isExternal: true
  name: GetAll(IQueryOptions<>)
  nameWithType: RepositoryWrapper<T>.GetAll(IQueryOptions<>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.GetAll(IQueryOptions<>)
  nameWithType.vb: RepositoryWrapper(Of T).GetAll(IQueryOptions(Of ))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).GetAll(IQueryOptions(Of ))
  name.vb: GetAll(IQueryOptions(Of ))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll(IQueryOptions{`0})
    name: GetAll
    nameWithType: RepositoryWrapper<T>.GetAll
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.GetAll
  - name: (
    nameWithType: (
    fullName: (
  - uid: IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: IQueryOptions
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll(IQueryOptions{`0})
    name: GetAll
    nameWithType: RepositoryWrapper(Of T).GetAll
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).GetAll
  - name: (
    nameWithType: (
    fullName: (
  - uid: IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: IQueryOptions
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll(IQueryOptions{`0},IFetchStrategy{`0})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll(IQueryOptions{`0},IFetchStrategy{`0})
  isExternal: true
  name: GetAll(IQueryOptions<>, IFetchStrategy<>)
  nameWithType: RepositoryWrapper<T>.GetAll(IQueryOptions<>, IFetchStrategy<>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.GetAll(IQueryOptions<>, IFetchStrategy<>)
  nameWithType.vb: RepositoryWrapper(Of T).GetAll(IQueryOptions(Of ), IFetchStrategy(Of ))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).GetAll(IQueryOptions(Of ), IFetchStrategy(Of ))
  name.vb: GetAll(IQueryOptions(Of ), IFetchStrategy(Of ))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll(IQueryOptions{`0},IFetchStrategy{`0})
    name: GetAll
    nameWithType: RepositoryWrapper<T>.GetAll
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.GetAll
  - name: (
    nameWithType: (
    fullName: (
  - uid: IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: IQueryOptions
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: IFetchStrategy`1
    name: IFetchStrategy
    nameWithType: IFetchStrategy
    fullName: IFetchStrategy
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll(IQueryOptions{`0},IFetchStrategy{`0})
    name: GetAll
    nameWithType: RepositoryWrapper(Of T).GetAll
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).GetAll
  - name: (
    nameWithType: (
    fullName: (
  - uid: IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: IQueryOptions
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: IFetchStrategy`1
    name: IFetchStrategy
    nameWithType: IFetchStrategy
    fullName: IFetchStrategy
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll(IQueryOptions{`0},System.String[])
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll(IQueryOptions{`0},System.String[])
  isExternal: true
  name: GetAll(IQueryOptions<>, String[])
  nameWithType: RepositoryWrapper<T>.GetAll(IQueryOptions<>, String[])
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.GetAll(IQueryOptions<>, System.String[])
  nameWithType.vb: RepositoryWrapper(Of T).GetAll(IQueryOptions(Of ), String())
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).GetAll(IQueryOptions(Of ), System.String())
  name.vb: GetAll(IQueryOptions(Of ), String())
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll(IQueryOptions{`0},System.String[])
    name: GetAll
    nameWithType: RepositoryWrapper<T>.GetAll
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.GetAll
  - name: (
    nameWithType: (
    fullName: (
  - uid: IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: IQueryOptions
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll(IQueryOptions{`0},System.String[])
    name: GetAll
    nameWithType: RepositoryWrapper(Of T).GetAll
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).GetAll
  - name: (
    nameWithType: (
    fullName: (
  - uid: IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: IQueryOptions
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll(IQueryOptions{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll(IQueryOptions{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])
  isExternal: true
  name: GetAll(IQueryOptions<>, Expression<Func<T, Object>>[])
  nameWithType: RepositoryWrapper<T>.GetAll(IQueryOptions<>, Expression<Func<T, Object>>[])
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.GetAll(IQueryOptions<>, System.Linq.Expressions.Expression<System.Func<T, System.Object>>[])
  nameWithType.vb: RepositoryWrapper(Of T).GetAll(IQueryOptions(Of ), Expression(Of Func(Of T, Object))())
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).GetAll(IQueryOptions(Of ), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Object))())
  name.vb: GetAll(IQueryOptions(Of ), Expression(Of Func(Of T, Object))())
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll(IQueryOptions{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])
    name: GetAll
    nameWithType: RepositoryWrapper<T>.GetAll
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.GetAll
  - name: (
    nameWithType: (
    fullName: (
  - uid: IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: IQueryOptions
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll(IQueryOptions{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])
    name: GetAll
    nameWithType: RepositoryWrapper(Of T).GetAll
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).GetAll
  - name: (
    nameWithType: (
    fullName: (
  - uid: IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: IQueryOptions
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})
  isExternal: true
  name: GetAll<TResult>(Expression<Func<T, TResult>>)
  nameWithType: RepositoryWrapper<T>.GetAll<TResult>(Expression<Func<T, TResult>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.GetAll<TResult>(System.Linq.Expressions.Expression<System.Func<T, TResult>>)
  nameWithType.vb: RepositoryWrapper(Of T).GetAll(Of TResult)(Expression(Of Func(Of T, TResult)))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).GetAll(Of TResult)(System.Linq.Expressions.Expression(Of System.Func(Of T, TResult)))
  name.vb: GetAll(Of TResult)(Expression(Of Func(Of T, TResult)))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})
    name: GetAll<TResult>
    nameWithType: RepositoryWrapper<T>.GetAll<TResult>
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.GetAll<TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})
    name: GetAll(Of TResult)
    nameWithType: RepositoryWrapper(Of T).GetAll(Of TResult)
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).GetAll(Of TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},IQueryOptions{`0})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},IQueryOptions{`0})
  isExternal: true
  name: GetAll<TResult>(Expression<Func<T, TResult>>, IQueryOptions<>)
  nameWithType: RepositoryWrapper<T>.GetAll<TResult>(Expression<Func<T, TResult>>, IQueryOptions<>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.GetAll<TResult>(System.Linq.Expressions.Expression<System.Func<T, TResult>>, IQueryOptions<>)
  nameWithType.vb: RepositoryWrapper(Of T).GetAll(Of TResult)(Expression(Of Func(Of T, TResult)), IQueryOptions(Of ))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).GetAll(Of TResult)(System.Linq.Expressions.Expression(Of System.Func(Of T, TResult)), IQueryOptions(Of ))
  name.vb: GetAll(Of TResult)(Expression(Of Func(Of T, TResult)), IQueryOptions(Of ))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},IQueryOptions{`0})
    name: GetAll<TResult>
    nameWithType: RepositoryWrapper<T>.GetAll<TResult>
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.GetAll<TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: IQueryOptions
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},IQueryOptions{`0})
    name: GetAll(Of TResult)
    nameWithType: RepositoryWrapper(Of T).GetAll(Of TResult)
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).GetAll(Of TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: IQueryOptions
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},IFetchStrategy{`0})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},IFetchStrategy{`0})
  isExternal: true
  name: GetAll<TResult>(Expression<Func<T, TResult>>, IFetchStrategy<>)
  nameWithType: RepositoryWrapper<T>.GetAll<TResult>(Expression<Func<T, TResult>>, IFetchStrategy<>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.GetAll<TResult>(System.Linq.Expressions.Expression<System.Func<T, TResult>>, IFetchStrategy<>)
  nameWithType.vb: RepositoryWrapper(Of T).GetAll(Of TResult)(Expression(Of Func(Of T, TResult)), IFetchStrategy(Of ))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).GetAll(Of TResult)(System.Linq.Expressions.Expression(Of System.Func(Of T, TResult)), IFetchStrategy(Of ))
  name.vb: GetAll(Of TResult)(Expression(Of Func(Of T, TResult)), IFetchStrategy(Of ))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},IFetchStrategy{`0})
    name: GetAll<TResult>
    nameWithType: RepositoryWrapper<T>.GetAll<TResult>
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.GetAll<TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: IFetchStrategy`1
    name: IFetchStrategy
    nameWithType: IFetchStrategy
    fullName: IFetchStrategy
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},IFetchStrategy{`0})
    name: GetAll(Of TResult)
    nameWithType: RepositoryWrapper(Of T).GetAll(Of TResult)
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).GetAll(Of TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: IFetchStrategy`1
    name: IFetchStrategy
    nameWithType: IFetchStrategy
    fullName: IFetchStrategy
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String[])
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String[])
  isExternal: true
  name: GetAll<TResult>(Expression<Func<T, TResult>>, String[])
  nameWithType: RepositoryWrapper<T>.GetAll<TResult>(Expression<Func<T, TResult>>, String[])
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.GetAll<TResult>(System.Linq.Expressions.Expression<System.Func<T, TResult>>, System.String[])
  nameWithType.vb: RepositoryWrapper(Of T).GetAll(Of TResult)(Expression(Of Func(Of T, TResult)), String())
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).GetAll(Of TResult)(System.Linq.Expressions.Expression(Of System.Func(Of T, TResult)), System.String())
  name.vb: GetAll(Of TResult)(Expression(Of Func(Of T, TResult)), String())
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String[])
    name: GetAll<TResult>
    nameWithType: RepositoryWrapper<T>.GetAll<TResult>
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.GetAll<TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String[])
    name: GetAll(Of TResult)
    nameWithType: RepositoryWrapper(Of T).GetAll(Of TResult)
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).GetAll(Of TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])
  isExternal: true
  name: GetAll<TResult>(Expression<Func<T, TResult>>, Expression<Func<T, Object>>[])
  nameWithType: RepositoryWrapper<T>.GetAll<TResult>(Expression<Func<T, TResult>>, Expression<Func<T, Object>>[])
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.GetAll<TResult>(System.Linq.Expressions.Expression<System.Func<T, TResult>>, System.Linq.Expressions.Expression<System.Func<T, System.Object>>[])
  nameWithType.vb: RepositoryWrapper(Of T).GetAll(Of TResult)(Expression(Of Func(Of T, TResult)), Expression(Of Func(Of T, Object))())
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).GetAll(Of TResult)(System.Linq.Expressions.Expression(Of System.Func(Of T, TResult)), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Object))())
  name.vb: GetAll(Of TResult)(Expression(Of Func(Of T, TResult)), Expression(Of Func(Of T, Object))())
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])
    name: GetAll<TResult>
    nameWithType: RepositoryWrapper<T>.GetAll<TResult>
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.GetAll<TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])
    name: GetAll(Of TResult)
    nameWithType: RepositoryWrapper(Of T).GetAll(Of TResult)
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).GetAll(Of TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},IQueryOptions{`0},IFetchStrategy{`0})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},IQueryOptions{`0},IFetchStrategy{`0})
  isExternal: true
  name: GetAll<TResult>(Expression<Func<T, TResult>>, IQueryOptions<>, IFetchStrategy<>)
  nameWithType: RepositoryWrapper<T>.GetAll<TResult>(Expression<Func<T, TResult>>, IQueryOptions<>, IFetchStrategy<>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.GetAll<TResult>(System.Linq.Expressions.Expression<System.Func<T, TResult>>, IQueryOptions<>, IFetchStrategy<>)
  nameWithType.vb: RepositoryWrapper(Of T).GetAll(Of TResult)(Expression(Of Func(Of T, TResult)), IQueryOptions(Of ), IFetchStrategy(Of ))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).GetAll(Of TResult)(System.Linq.Expressions.Expression(Of System.Func(Of T, TResult)), IQueryOptions(Of ), IFetchStrategy(Of ))
  name.vb: GetAll(Of TResult)(Expression(Of Func(Of T, TResult)), IQueryOptions(Of ), IFetchStrategy(Of ))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},IQueryOptions{`0},IFetchStrategy{`0})
    name: GetAll<TResult>
    nameWithType: RepositoryWrapper<T>.GetAll<TResult>
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.GetAll<TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: IQueryOptions
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: IFetchStrategy`1
    name: IFetchStrategy
    nameWithType: IFetchStrategy
    fullName: IFetchStrategy
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},IQueryOptions{`0},IFetchStrategy{`0})
    name: GetAll(Of TResult)
    nameWithType: RepositoryWrapper(Of T).GetAll(Of TResult)
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).GetAll(Of TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: IQueryOptions
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: IFetchStrategy`1
    name: IFetchStrategy
    nameWithType: IFetchStrategy
    fullName: IFetchStrategy
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},IQueryOptions{`0},System.String[])
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},IQueryOptions{`0},System.String[])
  isExternal: true
  name: GetAll<TResult>(Expression<Func<T, TResult>>, IQueryOptions<>, String[])
  nameWithType: RepositoryWrapper<T>.GetAll<TResult>(Expression<Func<T, TResult>>, IQueryOptions<>, String[])
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.GetAll<TResult>(System.Linq.Expressions.Expression<System.Func<T, TResult>>, IQueryOptions<>, System.String[])
  nameWithType.vb: RepositoryWrapper(Of T).GetAll(Of TResult)(Expression(Of Func(Of T, TResult)), IQueryOptions(Of ), String())
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).GetAll(Of TResult)(System.Linq.Expressions.Expression(Of System.Func(Of T, TResult)), IQueryOptions(Of ), System.String())
  name.vb: GetAll(Of TResult)(Expression(Of Func(Of T, TResult)), IQueryOptions(Of ), String())
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},IQueryOptions{`0},System.String[])
    name: GetAll<TResult>
    nameWithType: RepositoryWrapper<T>.GetAll<TResult>
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.GetAll<TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: IQueryOptions
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},IQueryOptions{`0},System.String[])
    name: GetAll(Of TResult)
    nameWithType: RepositoryWrapper(Of T).GetAll(Of TResult)
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).GetAll(Of TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: IQueryOptions
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},IQueryOptions{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},IQueryOptions{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])
  isExternal: true
  name: GetAll<TResult>(Expression<Func<T, TResult>>, IQueryOptions<>, Expression<Func<T, Object>>[])
  nameWithType: RepositoryWrapper<T>.GetAll<TResult>(Expression<Func<T, TResult>>, IQueryOptions<>, Expression<Func<T, Object>>[])
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.GetAll<TResult>(System.Linq.Expressions.Expression<System.Func<T, TResult>>, IQueryOptions<>, System.Linq.Expressions.Expression<System.Func<T, System.Object>>[])
  nameWithType.vb: RepositoryWrapper(Of T).GetAll(Of TResult)(Expression(Of Func(Of T, TResult)), IQueryOptions(Of ), Expression(Of Func(Of T, Object))())
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).GetAll(Of TResult)(System.Linq.Expressions.Expression(Of System.Func(Of T, TResult)), IQueryOptions(Of ), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Object))())
  name.vb: GetAll(Of TResult)(Expression(Of Func(Of T, TResult)), IQueryOptions(Of ), Expression(Of Func(Of T, Object))())
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},IQueryOptions{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])
    name: GetAll<TResult>
    nameWithType: RepositoryWrapper<T>.GetAll<TResult>
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.GetAll<TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: IQueryOptions
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},IQueryOptions{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])
    name: GetAll(Of TResult)
    nameWithType: RepositoryWrapper(Of T).GetAll(Of TResult)
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).GetAll(Of TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: IQueryOptions
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetMany(System.String[])
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetMany(System.String[])
  isExternal: true
  name: GetMany(String[])
  nameWithType: RepositoryWrapper<T>.GetMany(String[])
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.GetMany(System.String[])
  nameWithType.vb: RepositoryWrapper(Of T).GetMany(String())
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).GetMany(System.String())
  name.vb: GetMany(String())
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetMany(System.String[])
    name: GetMany
    nameWithType: RepositoryWrapper<T>.GetMany
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.GetMany
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetMany(System.String[])
    name: GetMany
    nameWithType: RepositoryWrapper(Of T).GetMany
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).GetMany
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetMany(System.Collections.Generic.IEnumerable{System.String})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetMany(System.Collections.Generic.IEnumerable{System.String})
  isExternal: true
  name: GetMany(IEnumerable<String>)
  nameWithType: RepositoryWrapper<T>.GetMany(IEnumerable<String>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.GetMany(System.Collections.Generic.IEnumerable<System.String>)
  nameWithType.vb: RepositoryWrapper(Of T).GetMany(IEnumerable(Of String))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).GetMany(System.Collections.Generic.IEnumerable(Of System.String))
  name.vb: GetMany(IEnumerable(Of String))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetMany(System.Collections.Generic.IEnumerable{System.String})
    name: GetMany
    nameWithType: RepositoryWrapper<T>.GetMany
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.GetMany
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetMany(System.Collections.Generic.IEnumerable{System.String})
    name: GetMany
    nameWithType: RepositoryWrapper(Of T).GetMany
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).GetMany
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetMany(System.Collections.Generic.IEnumerable{System.String},IFetchStrategy{`0})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetMany(System.Collections.Generic.IEnumerable{System.String},IFetchStrategy{`0})
  isExternal: true
  name: GetMany(IEnumerable<String>, IFetchStrategy<>)
  nameWithType: RepositoryWrapper<T>.GetMany(IEnumerable<String>, IFetchStrategy<>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.GetMany(System.Collections.Generic.IEnumerable<System.String>, IFetchStrategy<>)
  nameWithType.vb: RepositoryWrapper(Of T).GetMany(IEnumerable(Of String), IFetchStrategy(Of ))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).GetMany(System.Collections.Generic.IEnumerable(Of System.String), IFetchStrategy(Of ))
  name.vb: GetMany(IEnumerable(Of String), IFetchStrategy(Of ))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetMany(System.Collections.Generic.IEnumerable{System.String},IFetchStrategy{`0})
    name: GetMany
    nameWithType: RepositoryWrapper<T>.GetMany
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.GetMany
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: IFetchStrategy`1
    name: IFetchStrategy
    nameWithType: IFetchStrategy
    fullName: IFetchStrategy
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetMany(System.Collections.Generic.IEnumerable{System.String},IFetchStrategy{`0})
    name: GetMany
    nameWithType: RepositoryWrapper(Of T).GetMany
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).GetMany
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: IFetchStrategy`1
    name: IFetchStrategy
    nameWithType: IFetchStrategy
    fullName: IFetchStrategy
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetMany``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String[])
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetMany``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String[])
  isExternal: true
  name: GetMany<TResult>(Expression<Func<T, TResult>>, String[])
  nameWithType: RepositoryWrapper<T>.GetMany<TResult>(Expression<Func<T, TResult>>, String[])
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.GetMany<TResult>(System.Linq.Expressions.Expression<System.Func<T, TResult>>, System.String[])
  nameWithType.vb: RepositoryWrapper(Of T).GetMany(Of TResult)(Expression(Of Func(Of T, TResult)), String())
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).GetMany(Of TResult)(System.Linq.Expressions.Expression(Of System.Func(Of T, TResult)), System.String())
  name.vb: GetMany(Of TResult)(Expression(Of Func(Of T, TResult)), String())
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetMany``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String[])
    name: GetMany<TResult>
    nameWithType: RepositoryWrapper<T>.GetMany<TResult>
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.GetMany<TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetMany``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String[])
    name: GetMany(Of TResult)
    nameWithType: RepositoryWrapper(Of T).GetMany(Of TResult)
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).GetMany(Of TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetMany``1(System.Collections.Generic.IEnumerable{System.String},System.Linq.Expressions.Expression{System.Func{`0,``0}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetMany``1(System.Collections.Generic.IEnumerable{System.String},System.Linq.Expressions.Expression{System.Func{`0,``0}})
  isExternal: true
  name: GetMany<TResult>(IEnumerable<String>, Expression<Func<T, TResult>>)
  nameWithType: RepositoryWrapper<T>.GetMany<TResult>(IEnumerable<String>, Expression<Func<T, TResult>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.GetMany<TResult>(System.Collections.Generic.IEnumerable<System.String>, System.Linq.Expressions.Expression<System.Func<T, TResult>>)
  nameWithType.vb: RepositoryWrapper(Of T).GetMany(Of TResult)(IEnumerable(Of String), Expression(Of Func(Of T, TResult)))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).GetMany(Of TResult)(System.Collections.Generic.IEnumerable(Of System.String), System.Linq.Expressions.Expression(Of System.Func(Of T, TResult)))
  name.vb: GetMany(Of TResult)(IEnumerable(Of String), Expression(Of Func(Of T, TResult)))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetMany``1(System.Collections.Generic.IEnumerable{System.String},System.Linq.Expressions.Expression{System.Func{`0,``0}})
    name: GetMany<TResult>
    nameWithType: RepositoryWrapper<T>.GetMany<TResult>
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.GetMany<TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetMany``1(System.Collections.Generic.IEnumerable{System.String},System.Linq.Expressions.Expression{System.Func{`0,``0}})
    name: GetMany(Of TResult)
    nameWithType: RepositoryWrapper(Of T).GetMany(Of TResult)
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).GetMany(Of TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetManyAsDictionary(System.String[])
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetManyAsDictionary(System.String[])
  isExternal: true
  name: GetManyAsDictionary(String[])
  nameWithType: RepositoryWrapper<T>.GetManyAsDictionary(String[])
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.GetManyAsDictionary(System.String[])
  nameWithType.vb: RepositoryWrapper(Of T).GetManyAsDictionary(String())
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).GetManyAsDictionary(System.String())
  name.vb: GetManyAsDictionary(String())
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetManyAsDictionary(System.String[])
    name: GetManyAsDictionary
    nameWithType: RepositoryWrapper<T>.GetManyAsDictionary
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.GetManyAsDictionary
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetManyAsDictionary(System.String[])
    name: GetManyAsDictionary
    nameWithType: RepositoryWrapper(Of T).GetManyAsDictionary
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).GetManyAsDictionary
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetManyAsDictionary(System.Collections.Generic.IEnumerable{System.String})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetManyAsDictionary(System.Collections.Generic.IEnumerable{System.String})
  isExternal: true
  name: GetManyAsDictionary(IEnumerable<String>)
  nameWithType: RepositoryWrapper<T>.GetManyAsDictionary(IEnumerable<String>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.GetManyAsDictionary(System.Collections.Generic.IEnumerable<System.String>)
  nameWithType.vb: RepositoryWrapper(Of T).GetManyAsDictionary(IEnumerable(Of String))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).GetManyAsDictionary(System.Collections.Generic.IEnumerable(Of System.String))
  name.vb: GetManyAsDictionary(IEnumerable(Of String))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetManyAsDictionary(System.Collections.Generic.IEnumerable{System.String})
    name: GetManyAsDictionary
    nameWithType: RepositoryWrapper<T>.GetManyAsDictionary
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.GetManyAsDictionary
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetManyAsDictionary(System.Collections.Generic.IEnumerable{System.String})
    name: GetManyAsDictionary
    nameWithType: RepositoryWrapper(Of T).GetManyAsDictionary
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).GetManyAsDictionary
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetManyAsDictionary(System.Collections.Generic.IEnumerable{System.String},IFetchStrategy{`0})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetManyAsDictionary(System.Collections.Generic.IEnumerable{System.String},IFetchStrategy{`0})
  isExternal: true
  name: GetManyAsDictionary(IEnumerable<String>, IFetchStrategy<>)
  nameWithType: RepositoryWrapper<T>.GetManyAsDictionary(IEnumerable<String>, IFetchStrategy<>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.GetManyAsDictionary(System.Collections.Generic.IEnumerable<System.String>, IFetchStrategy<>)
  nameWithType.vb: RepositoryWrapper(Of T).GetManyAsDictionary(IEnumerable(Of String), IFetchStrategy(Of ))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).GetManyAsDictionary(System.Collections.Generic.IEnumerable(Of System.String), IFetchStrategy(Of ))
  name.vb: GetManyAsDictionary(IEnumerable(Of String), IFetchStrategy(Of ))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetManyAsDictionary(System.Collections.Generic.IEnumerable{System.String},IFetchStrategy{`0})
    name: GetManyAsDictionary
    nameWithType: RepositoryWrapper<T>.GetManyAsDictionary
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.GetManyAsDictionary
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: IFetchStrategy`1
    name: IFetchStrategy
    nameWithType: IFetchStrategy
    fullName: IFetchStrategy
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetManyAsDictionary(System.Collections.Generic.IEnumerable{System.String},IFetchStrategy{`0})
    name: GetManyAsDictionary
    nameWithType: RepositoryWrapper(Of T).GetManyAsDictionary
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).GetManyAsDictionary
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: IFetchStrategy`1
    name: IFetchStrategy
    nameWithType: IFetchStrategy
    fullName: IFetchStrategy
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetPrimaryKey(`0)
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetPrimaryKey(`0)
  name: GetPrimaryKey(T)
  nameWithType: RepositoryWrapper<T>.GetPrimaryKey(T)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.GetPrimaryKey(T)
  nameWithType.vb: RepositoryWrapper(Of T).GetPrimaryKey(T)
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).GetPrimaryKey(T)
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetPrimaryKey(`0)
    name: GetPrimaryKey
    nameWithType: RepositoryWrapper<T>.GetPrimaryKey
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.GetPrimaryKey
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetPrimaryKey(`0)
    name: GetPrimaryKey
    nameWithType: RepositoryWrapper(Of T).GetPrimaryKey
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).GetPrimaryKey
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GroupBy``2(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{System.Linq.IGrouping{``0,`0},``1}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GroupBy``2(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{System.Linq.IGrouping{``0,`0},``1}})
  isExternal: true
  name: GroupBy<TGroupKey, TResult>(Expression<Func<T, TGroupKey>>, Expression<Func<IGrouping<TGroupKey, T>, TResult>>)
  nameWithType: RepositoryWrapper<T>.GroupBy<TGroupKey, TResult>(Expression<Func<T, TGroupKey>>, Expression<Func<IGrouping<TGroupKey, T>, TResult>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.GroupBy<TGroupKey, TResult>(System.Linq.Expressions.Expression<System.Func<T, TGroupKey>>, System.Linq.Expressions.Expression<System.Func<System.Linq.IGrouping<TGroupKey, T>, TResult>>)
  nameWithType.vb: RepositoryWrapper(Of T).GroupBy(Of TGroupKey, TResult)(Expression(Of Func(Of T, TGroupKey)), Expression(Of Func(Of IGrouping(Of TGroupKey, T), TResult)))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).GroupBy(Of TGroupKey, TResult)(System.Linq.Expressions.Expression(Of System.Func(Of T, TGroupKey)), System.Linq.Expressions.Expression(Of System.Func(Of System.Linq.IGrouping(Of TGroupKey, T), TResult)))
  name.vb: GroupBy(Of TGroupKey, TResult)(Expression(Of Func(Of T, TGroupKey)), Expression(Of Func(Of IGrouping(Of TGroupKey, T), TResult)))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GroupBy``2(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{System.Linq.IGrouping{``0,`0},``1}})
    name: GroupBy<TGroupKey, TResult>
    nameWithType: RepositoryWrapper<T>.GroupBy<TGroupKey, TResult>
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.GroupBy<TGroupKey, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TGroupKey
    nameWithType: TGroupKey
    fullName: TGroupKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Linq.IGrouping`2
    name: IGrouping
    nameWithType: IGrouping
    fullName: System.Linq.IGrouping
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TGroupKey
    nameWithType: TGroupKey
    fullName: TGroupKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GroupBy``2(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{System.Linq.IGrouping{``0,`0},``1}})
    name: GroupBy(Of TGroupKey, TResult)
    nameWithType: RepositoryWrapper(Of T).GroupBy(Of TGroupKey, TResult)
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).GroupBy(Of TGroupKey, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TGroupKey
    nameWithType: TGroupKey
    fullName: TGroupKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Linq.IGrouping`2
    name: IGrouping
    nameWithType: IGrouping
    fullName: System.Linq.IGrouping
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TGroupKey
    nameWithType: TGroupKey
    fullName: TGroupKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GroupBy``2(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{System.Linq.IGrouping{``0,`0},``1}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GroupBy``2(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{System.Linq.IGrouping{``0,`0},``1}})
  isExternal: true
  name: GroupBy<TGroupKey, TResult>(ISpecification<>, Expression<Func<T, TGroupKey>>, Expression<Func<IGrouping<TGroupKey, T>, TResult>>)
  nameWithType: RepositoryWrapper<T>.GroupBy<TGroupKey, TResult>(ISpecification<>, Expression<Func<T, TGroupKey>>, Expression<Func<IGrouping<TGroupKey, T>, TResult>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.GroupBy<TGroupKey, TResult>(ISpecification<>, System.Linq.Expressions.Expression<System.Func<T, TGroupKey>>, System.Linq.Expressions.Expression<System.Func<System.Linq.IGrouping<TGroupKey, T>, TResult>>)
  nameWithType.vb: RepositoryWrapper(Of T).GroupBy(Of TGroupKey, TResult)(ISpecification(Of ), Expression(Of Func(Of T, TGroupKey)), Expression(Of Func(Of IGrouping(Of TGroupKey, T), TResult)))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).GroupBy(Of TGroupKey, TResult)(ISpecification(Of ), System.Linq.Expressions.Expression(Of System.Func(Of T, TGroupKey)), System.Linq.Expressions.Expression(Of System.Func(Of System.Linq.IGrouping(Of TGroupKey, T), TResult)))
  name.vb: GroupBy(Of TGroupKey, TResult)(ISpecification(Of ), Expression(Of Func(Of T, TGroupKey)), Expression(Of Func(Of IGrouping(Of TGroupKey, T), TResult)))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GroupBy``2(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{System.Linq.IGrouping{``0,`0},``1}})
    name: GroupBy<TGroupKey, TResult>
    nameWithType: RepositoryWrapper<T>.GroupBy<TGroupKey, TResult>
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.GroupBy<TGroupKey, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TGroupKey
    nameWithType: TGroupKey
    fullName: TGroupKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Linq.IGrouping`2
    name: IGrouping
    nameWithType: IGrouping
    fullName: System.Linq.IGrouping
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TGroupKey
    nameWithType: TGroupKey
    fullName: TGroupKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GroupBy``2(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{System.Linq.IGrouping{``0,`0},``1}})
    name: GroupBy(Of TGroupKey, TResult)
    nameWithType: RepositoryWrapper(Of T).GroupBy(Of TGroupKey, TResult)
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).GroupBy(Of TGroupKey, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TGroupKey
    nameWithType: TGroupKey
    fullName: TGroupKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Linq.IGrouping`2
    name: IGrouping
    nameWithType: IGrouping
    fullName: System.Linq.IGrouping
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TGroupKey
    nameWithType: TGroupKey
    fullName: TGroupKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GroupBy``2(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{System.Linq.IGrouping{``0,`0},``1}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GroupBy``2(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{System.Linq.IGrouping{``0,`0},``1}})
  isExternal: true
  name: GroupBy<TGroupKey, TResult>(Expression<Func<T, Boolean>>, Expression<Func<T, TGroupKey>>, Expression<Func<IGrouping<TGroupKey, T>, TResult>>)
  nameWithType: RepositoryWrapper<T>.GroupBy<TGroupKey, TResult>(Expression<Func<T, Boolean>>, Expression<Func<T, TGroupKey>>, Expression<Func<IGrouping<TGroupKey, T>, TResult>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.GroupBy<TGroupKey, TResult>(System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<T, TGroupKey>>, System.Linq.Expressions.Expression<System.Func<System.Linq.IGrouping<TGroupKey, T>, TResult>>)
  nameWithType.vb: RepositoryWrapper(Of T).GroupBy(Of TGroupKey, TResult)(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, TGroupKey)), Expression(Of Func(Of IGrouping(Of TGroupKey, T), TResult)))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).GroupBy(Of TGroupKey, TResult)(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of T, TGroupKey)), System.Linq.Expressions.Expression(Of System.Func(Of System.Linq.IGrouping(Of TGroupKey, T), TResult)))
  name.vb: GroupBy(Of TGroupKey, TResult)(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, TGroupKey)), Expression(Of Func(Of IGrouping(Of TGroupKey, T), TResult)))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GroupBy``2(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{System.Linq.IGrouping{``0,`0},``1}})
    name: GroupBy<TGroupKey, TResult>
    nameWithType: RepositoryWrapper<T>.GroupBy<TGroupKey, TResult>
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.GroupBy<TGroupKey, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TGroupKey
    nameWithType: TGroupKey
    fullName: TGroupKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Linq.IGrouping`2
    name: IGrouping
    nameWithType: IGrouping
    fullName: System.Linq.IGrouping
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TGroupKey
    nameWithType: TGroupKey
    fullName: TGroupKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GroupBy``2(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{System.Linq.IGrouping{``0,`0},``1}})
    name: GroupBy(Of TGroupKey, TResult)
    nameWithType: RepositoryWrapper(Of T).GroupBy(Of TGroupKey, TResult)
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).GroupBy(Of TGroupKey, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TGroupKey
    nameWithType: TGroupKey
    fullName: TGroupKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Linq.IGrouping`2
    name: IGrouping
    nameWithType: IGrouping
    fullName: System.Linq.IGrouping
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TGroupKey
    nameWithType: TGroupKey
    fullName: TGroupKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GroupCount``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GroupCount``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})
  isExternal: true
  name: GroupCount<TGroupKey>(Expression<Func<T, TGroupKey>>)
  nameWithType: RepositoryWrapper<T>.GroupCount<TGroupKey>(Expression<Func<T, TGroupKey>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.GroupCount<TGroupKey>(System.Linq.Expressions.Expression<System.Func<T, TGroupKey>>)
  nameWithType.vb: RepositoryWrapper(Of T).GroupCount(Of TGroupKey)(Expression(Of Func(Of T, TGroupKey)))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).GroupCount(Of TGroupKey)(System.Linq.Expressions.Expression(Of System.Func(Of T, TGroupKey)))
  name.vb: GroupCount(Of TGroupKey)(Expression(Of Func(Of T, TGroupKey)))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GroupCount``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})
    name: GroupCount<TGroupKey>
    nameWithType: RepositoryWrapper<T>.GroupCount<TGroupKey>
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.GroupCount<TGroupKey>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TGroupKey
    nameWithType: TGroupKey
    fullName: TGroupKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GroupCount``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})
    name: GroupCount(Of TGroupKey)
    nameWithType: RepositoryWrapper(Of T).GroupCount(Of TGroupKey)
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).GroupCount(Of TGroupKey)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TGroupKey
    nameWithType: TGroupKey
    fullName: TGroupKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GroupCount``1(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GroupCount``1(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}})
  isExternal: true
  name: GroupCount<TGroupKey>(ISpecification<>, Expression<Func<T, TGroupKey>>)
  nameWithType: RepositoryWrapper<T>.GroupCount<TGroupKey>(ISpecification<>, Expression<Func<T, TGroupKey>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.GroupCount<TGroupKey>(ISpecification<>, System.Linq.Expressions.Expression<System.Func<T, TGroupKey>>)
  nameWithType.vb: RepositoryWrapper(Of T).GroupCount(Of TGroupKey)(ISpecification(Of ), Expression(Of Func(Of T, TGroupKey)))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).GroupCount(Of TGroupKey)(ISpecification(Of ), System.Linq.Expressions.Expression(Of System.Func(Of T, TGroupKey)))
  name.vb: GroupCount(Of TGroupKey)(ISpecification(Of ), Expression(Of Func(Of T, TGroupKey)))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GroupCount``1(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}})
    name: GroupCount<TGroupKey>
    nameWithType: RepositoryWrapper<T>.GroupCount<TGroupKey>
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.GroupCount<TGroupKey>
  - name: (
    nameWithType: (
    fullName: (
  - uid: ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TGroupKey
    nameWithType: TGroupKey
    fullName: TGroupKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GroupCount``1(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}})
    name: GroupCount(Of TGroupKey)
    nameWithType: RepositoryWrapper(Of T).GroupCount(Of TGroupKey)
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).GroupCount(Of TGroupKey)
  - name: (
    nameWithType: (
    fullName: (
  - uid: ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TGroupKey
    nameWithType: TGroupKey
    fullName: TGroupKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GroupCount``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GroupCount``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}})
  isExternal: true
  name: GroupCount<TGroupKey>(Expression<Func<T, Boolean>>, Expression<Func<T, TGroupKey>>)
  nameWithType: RepositoryWrapper<T>.GroupCount<TGroupKey>(Expression<Func<T, Boolean>>, Expression<Func<T, TGroupKey>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.GroupCount<TGroupKey>(System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<T, TGroupKey>>)
  nameWithType.vb: RepositoryWrapper(Of T).GroupCount(Of TGroupKey)(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, TGroupKey)))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).GroupCount(Of TGroupKey)(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of T, TGroupKey)))
  name.vb: GroupCount(Of TGroupKey)(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, TGroupKey)))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GroupCount``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}})
    name: GroupCount<TGroupKey>
    nameWithType: RepositoryWrapper<T>.GroupCount<TGroupKey>
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.GroupCount<TGroupKey>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TGroupKey
    nameWithType: TGroupKey
    fullName: TGroupKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GroupCount``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}})
    name: GroupCount(Of TGroupKey)
    nameWithType: RepositoryWrapper(Of T).GroupCount(Of TGroupKey)
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).GroupCount(Of TGroupKey)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TGroupKey
    nameWithType: TGroupKey
    fullName: TGroupKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GroupLongCount``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GroupLongCount``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})
  isExternal: true
  name: GroupLongCount<TGroupKey>(Expression<Func<T, TGroupKey>>)
  nameWithType: RepositoryWrapper<T>.GroupLongCount<TGroupKey>(Expression<Func<T, TGroupKey>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.GroupLongCount<TGroupKey>(System.Linq.Expressions.Expression<System.Func<T, TGroupKey>>)
  nameWithType.vb: RepositoryWrapper(Of T).GroupLongCount(Of TGroupKey)(Expression(Of Func(Of T, TGroupKey)))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).GroupLongCount(Of TGroupKey)(System.Linq.Expressions.Expression(Of System.Func(Of T, TGroupKey)))
  name.vb: GroupLongCount(Of TGroupKey)(Expression(Of Func(Of T, TGroupKey)))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GroupLongCount``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})
    name: GroupLongCount<TGroupKey>
    nameWithType: RepositoryWrapper<T>.GroupLongCount<TGroupKey>
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.GroupLongCount<TGroupKey>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TGroupKey
    nameWithType: TGroupKey
    fullName: TGroupKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GroupLongCount``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})
    name: GroupLongCount(Of TGroupKey)
    nameWithType: RepositoryWrapper(Of T).GroupLongCount(Of TGroupKey)
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).GroupLongCount(Of TGroupKey)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TGroupKey
    nameWithType: TGroupKey
    fullName: TGroupKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GroupLongCount``1(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GroupLongCount``1(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}})
  isExternal: true
  name: GroupLongCount<TGroupKey>(ISpecification<>, Expression<Func<T, TGroupKey>>)
  nameWithType: RepositoryWrapper<T>.GroupLongCount<TGroupKey>(ISpecification<>, Expression<Func<T, TGroupKey>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.GroupLongCount<TGroupKey>(ISpecification<>, System.Linq.Expressions.Expression<System.Func<T, TGroupKey>>)
  nameWithType.vb: RepositoryWrapper(Of T).GroupLongCount(Of TGroupKey)(ISpecification(Of ), Expression(Of Func(Of T, TGroupKey)))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).GroupLongCount(Of TGroupKey)(ISpecification(Of ), System.Linq.Expressions.Expression(Of System.Func(Of T, TGroupKey)))
  name.vb: GroupLongCount(Of TGroupKey)(ISpecification(Of ), Expression(Of Func(Of T, TGroupKey)))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GroupLongCount``1(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}})
    name: GroupLongCount<TGroupKey>
    nameWithType: RepositoryWrapper<T>.GroupLongCount<TGroupKey>
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.GroupLongCount<TGroupKey>
  - name: (
    nameWithType: (
    fullName: (
  - uid: ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TGroupKey
    nameWithType: TGroupKey
    fullName: TGroupKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GroupLongCount``1(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}})
    name: GroupLongCount(Of TGroupKey)
    nameWithType: RepositoryWrapper(Of T).GroupLongCount(Of TGroupKey)
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).GroupLongCount(Of TGroupKey)
  - name: (
    nameWithType: (
    fullName: (
  - uid: ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TGroupKey
    nameWithType: TGroupKey
    fullName: TGroupKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GroupLongCount``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GroupLongCount``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}})
  isExternal: true
  name: GroupLongCount<TGroupKey>(Expression<Func<T, Boolean>>, Expression<Func<T, TGroupKey>>)
  nameWithType: RepositoryWrapper<T>.GroupLongCount<TGroupKey>(Expression<Func<T, Boolean>>, Expression<Func<T, TGroupKey>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.GroupLongCount<TGroupKey>(System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<T, TGroupKey>>)
  nameWithType.vb: RepositoryWrapper(Of T).GroupLongCount(Of TGroupKey)(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, TGroupKey)))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).GroupLongCount(Of TGroupKey)(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of T, TGroupKey)))
  name.vb: GroupLongCount(Of TGroupKey)(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, TGroupKey)))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GroupLongCount``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}})
    name: GroupLongCount<TGroupKey>
    nameWithType: RepositoryWrapper<T>.GroupLongCount<TGroupKey>
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.GroupLongCount<TGroupKey>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TGroupKey
    nameWithType: TGroupKey
    fullName: TGroupKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GroupLongCount``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}})
    name: GroupLongCount(Of TGroupKey)
    nameWithType: RepositoryWrapper(Of T).GroupLongCount(Of TGroupKey)
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).GroupLongCount(Of TGroupKey)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TGroupKey
    nameWithType: TGroupKey
    fullName: TGroupKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Join``3(IRepositoryQueryable{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{``1,``0}},System.Linq.Expressions.Expression{System.Func{`0,``1,``2}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Join``3(IRepositoryQueryable{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{``1,``0}},System.Linq.Expressions.Expression{System.Func{`0,``1,``2}})
  isExternal: true
  name: Join<TJoinKey, TInner, TResult>(IRepositoryQueryable<>, Expression<Func<T, TJoinKey>>, Expression<Func<TInner, TJoinKey>>, Expression<Func<T, TInner, TResult>>)
  nameWithType: RepositoryWrapper<T>.Join<TJoinKey, TInner, TResult>(IRepositoryQueryable<>, Expression<Func<T, TJoinKey>>, Expression<Func<TInner, TJoinKey>>, Expression<Func<T, TInner, TResult>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Join<TJoinKey, TInner, TResult>(IRepositoryQueryable<>, System.Linq.Expressions.Expression<System.Func<T, TJoinKey>>, System.Linq.Expressions.Expression<System.Func<TInner, TJoinKey>>, System.Linq.Expressions.Expression<System.Func<T, TInner, TResult>>)
  nameWithType.vb: RepositoryWrapper(Of T).Join(Of TJoinKey, TInner, TResult)(IRepositoryQueryable(Of ), Expression(Of Func(Of T, TJoinKey)), Expression(Of Func(Of TInner, TJoinKey)), Expression(Of Func(Of T, TInner, TResult)))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Join(Of TJoinKey, TInner, TResult)(IRepositoryQueryable(Of ), System.Linq.Expressions.Expression(Of System.Func(Of T, TJoinKey)), System.Linq.Expressions.Expression(Of System.Func(Of TInner, TJoinKey)), System.Linq.Expressions.Expression(Of System.Func(Of T, TInner, TResult)))
  name.vb: Join(Of TJoinKey, TInner, TResult)(IRepositoryQueryable(Of ), Expression(Of Func(Of T, TJoinKey)), Expression(Of Func(Of TInner, TJoinKey)), Expression(Of Func(Of T, TInner, TResult)))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Join``3(IRepositoryQueryable{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{``1,``0}},System.Linq.Expressions.Expression{System.Func{`0,``1,``2}})
    name: Join<TJoinKey, TInner, TResult>
    nameWithType: RepositoryWrapper<T>.Join<TJoinKey, TInner, TResult>
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Join<TJoinKey, TInner, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: IRepositoryQueryable`1
    name: IRepositoryQueryable
    nameWithType: IRepositoryQueryable
    fullName: IRepositoryQueryable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TJoinKey
    nameWithType: TJoinKey
    fullName: TJoinKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TJoinKey
    nameWithType: TJoinKey
    fullName: TJoinKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Join``3(IRepositoryQueryable{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{``1,``0}},System.Linq.Expressions.Expression{System.Func{`0,``1,``2}})
    name: Join(Of TJoinKey, TInner, TResult)
    nameWithType: RepositoryWrapper(Of T).Join(Of TJoinKey, TInner, TResult)
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Join(Of TJoinKey, TInner, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: IRepositoryQueryable`1
    name: IRepositoryQueryable
    nameWithType: IRepositoryQueryable
    fullName: IRepositoryQueryable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TJoinKey
    nameWithType: TJoinKey
    fullName: TJoinKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TJoinKey
    nameWithType: TJoinKey
    fullName: TJoinKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.LongCount
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.LongCount
  name: LongCount()
  nameWithType: RepositoryWrapper<T>.LongCount()
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.LongCount()
  nameWithType.vb: RepositoryWrapper(Of T).LongCount()
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).LongCount()
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.LongCount
    name: LongCount
    nameWithType: RepositoryWrapper<T>.LongCount
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.LongCount
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.LongCount
    name: LongCount
    nameWithType: RepositoryWrapper(Of T).LongCount
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).LongCount
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.LongCount(ISpecification{`0})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.LongCount(ISpecification{`0})
  isExternal: true
  name: LongCount(ISpecification<>)
  nameWithType: RepositoryWrapper<T>.LongCount(ISpecification<>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.LongCount(ISpecification<>)
  nameWithType.vb: RepositoryWrapper(Of T).LongCount(ISpecification(Of ))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).LongCount(ISpecification(Of ))
  name.vb: LongCount(ISpecification(Of ))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.LongCount(ISpecification{`0})
    name: LongCount
    nameWithType: RepositoryWrapper<T>.LongCount
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.LongCount
  - name: (
    nameWithType: (
    fullName: (
  - uid: ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.LongCount(ISpecification{`0})
    name: LongCount
    nameWithType: RepositoryWrapper(Of T).LongCount
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).LongCount
  - name: (
    nameWithType: (
    fullName: (
  - uid: ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.LongCount(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.LongCount(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  isExternal: true
  name: LongCount(Expression<Func<T, Boolean>>)
  nameWithType: RepositoryWrapper<T>.LongCount(Expression<Func<T, Boolean>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.LongCount(System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>)
  nameWithType.vb: RepositoryWrapper(Of T).LongCount(Expression(Of Func(Of T, Boolean)))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).LongCount(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)))
  name.vb: LongCount(Expression(Of Func(Of T, Boolean)))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.LongCount(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
    name: LongCount
    nameWithType: RepositoryWrapper<T>.LongCount
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.LongCount
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.LongCount(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
    name: LongCount
    nameWithType: RepositoryWrapper(Of T).LongCount
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).LongCount
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Max``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Max``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})
  isExternal: true
  name: Max<TResult>(Expression<Func<T, TResult>>)
  nameWithType: RepositoryWrapper<T>.Max<TResult>(Expression<Func<T, TResult>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Max<TResult>(System.Linq.Expressions.Expression<System.Func<T, TResult>>)
  nameWithType.vb: RepositoryWrapper(Of T).Max(Of TResult)(Expression(Of Func(Of T, TResult)))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Max(Of TResult)(System.Linq.Expressions.Expression(Of System.Func(Of T, TResult)))
  name.vb: Max(Of TResult)(Expression(Of Func(Of T, TResult)))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Max``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})
    name: Max<TResult>
    nameWithType: RepositoryWrapper<T>.Max<TResult>
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Max<TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Max``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})
    name: Max(Of TResult)
    nameWithType: RepositoryWrapper(Of T).Max(Of TResult)
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Max(Of TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Max``1(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Max``1(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}})
  isExternal: true
  name: Max<TResult>(ISpecification<>, Expression<Func<T, TResult>>)
  nameWithType: RepositoryWrapper<T>.Max<TResult>(ISpecification<>, Expression<Func<T, TResult>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Max<TResult>(ISpecification<>, System.Linq.Expressions.Expression<System.Func<T, TResult>>)
  nameWithType.vb: RepositoryWrapper(Of T).Max(Of TResult)(ISpecification(Of ), Expression(Of Func(Of T, TResult)))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Max(Of TResult)(ISpecification(Of ), System.Linq.Expressions.Expression(Of System.Func(Of T, TResult)))
  name.vb: Max(Of TResult)(ISpecification(Of ), Expression(Of Func(Of T, TResult)))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Max``1(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}})
    name: Max<TResult>
    nameWithType: RepositoryWrapper<T>.Max<TResult>
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Max<TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Max``1(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}})
    name: Max(Of TResult)
    nameWithType: RepositoryWrapper(Of T).Max(Of TResult)
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Max(Of TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Max``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Max``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}})
  isExternal: true
  name: Max<TResult>(Expression<Func<T, Boolean>>, Expression<Func<T, TResult>>)
  nameWithType: RepositoryWrapper<T>.Max<TResult>(Expression<Func<T, Boolean>>, Expression<Func<T, TResult>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Max<TResult>(System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<T, TResult>>)
  nameWithType.vb: RepositoryWrapper(Of T).Max(Of TResult)(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, TResult)))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Max(Of TResult)(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of T, TResult)))
  name.vb: Max(Of TResult)(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, TResult)))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Max``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}})
    name: Max<TResult>
    nameWithType: RepositoryWrapper<T>.Max<TResult>
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Max<TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Max``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}})
    name: Max(Of TResult)
    nameWithType: RepositoryWrapper(Of T).Max(Of TResult)
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Max(Of TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Min``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Min``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})
  isExternal: true
  name: Min<TResult>(Expression<Func<T, TResult>>)
  nameWithType: RepositoryWrapper<T>.Min<TResult>(Expression<Func<T, TResult>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Min<TResult>(System.Linq.Expressions.Expression<System.Func<T, TResult>>)
  nameWithType.vb: RepositoryWrapper(Of T).Min(Of TResult)(Expression(Of Func(Of T, TResult)))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Min(Of TResult)(System.Linq.Expressions.Expression(Of System.Func(Of T, TResult)))
  name.vb: Min(Of TResult)(Expression(Of Func(Of T, TResult)))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Min``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})
    name: Min<TResult>
    nameWithType: RepositoryWrapper<T>.Min<TResult>
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Min<TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Min``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})
    name: Min(Of TResult)
    nameWithType: RepositoryWrapper(Of T).Min(Of TResult)
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Min(Of TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Min``1(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Min``1(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}})
  isExternal: true
  name: Min<TResult>(ISpecification<>, Expression<Func<T, TResult>>)
  nameWithType: RepositoryWrapper<T>.Min<TResult>(ISpecification<>, Expression<Func<T, TResult>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Min<TResult>(ISpecification<>, System.Linq.Expressions.Expression<System.Func<T, TResult>>)
  nameWithType.vb: RepositoryWrapper(Of T).Min(Of TResult)(ISpecification(Of ), Expression(Of Func(Of T, TResult)))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Min(Of TResult)(ISpecification(Of ), System.Linq.Expressions.Expression(Of System.Func(Of T, TResult)))
  name.vb: Min(Of TResult)(ISpecification(Of ), Expression(Of Func(Of T, TResult)))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Min``1(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}})
    name: Min<TResult>
    nameWithType: RepositoryWrapper<T>.Min<TResult>
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Min<TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Min``1(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}})
    name: Min(Of TResult)
    nameWithType: RepositoryWrapper(Of T).Min(Of TResult)
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Min(Of TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Min``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Min``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}})
  isExternal: true
  name: Min<TResult>(Expression<Func<T, Boolean>>, Expression<Func<T, TResult>>)
  nameWithType: RepositoryWrapper<T>.Min<TResult>(Expression<Func<T, Boolean>>, Expression<Func<T, TResult>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Min<TResult>(System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<T, TResult>>)
  nameWithType.vb: RepositoryWrapper(Of T).Min(Of TResult)(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, TResult)))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Min(Of TResult)(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of T, TResult)))
  name.vb: Min(Of TResult)(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, TResult)))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Min``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}})
    name: Min<TResult>
    nameWithType: RepositoryWrapper<T>.Min<TResult>
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Min<TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Min``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}})
    name: Min(Of TResult)
    nameWithType: RepositoryWrapper(Of T).Min(Of TResult)
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Min(Of TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Int32}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Int32}})
  isExternal: true
  name: Sum(Expression<Func<T, Int32>>)
  nameWithType: RepositoryWrapper<T>.Sum(Expression<Func<T, Int32>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Sum(System.Linq.Expressions.Expression<System.Func<T, System.Int32>>)
  nameWithType.vb: RepositoryWrapper(Of T).Sum(Expression(Of Func(Of T, Int32)))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Sum(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Int32)))
  name.vb: Sum(Expression(Of Func(Of T, Int32)))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Int32}})
    name: Sum
    nameWithType: RepositoryWrapper<T>.Sum
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Sum
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Int32}})
    name: Sum
    nameWithType: RepositoryWrapper(Of T).Sum
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Sum
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Int32}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Int32}})
  isExternal: true
  name: Sum(ISpecification<>, Expression<Func<T, Int32>>)
  nameWithType: RepositoryWrapper<T>.Sum(ISpecification<>, Expression<Func<T, Int32>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Sum(ISpecification<>, System.Linq.Expressions.Expression<System.Func<T, System.Int32>>)
  nameWithType.vb: RepositoryWrapper(Of T).Sum(ISpecification(Of ), Expression(Of Func(Of T, Int32)))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Sum(ISpecification(Of ), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Int32)))
  name.vb: Sum(ISpecification(Of ), Expression(Of Func(Of T, Int32)))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Int32}})
    name: Sum
    nameWithType: RepositoryWrapper<T>.Sum
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Sum
  - name: (
    nameWithType: (
    fullName: (
  - uid: ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Int32}})
    name: Sum
    nameWithType: RepositoryWrapper(Of T).Sum
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Sum
  - name: (
    nameWithType: (
    fullName: (
  - uid: ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Int32}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Int32}})
  isExternal: true
  name: Sum(Expression<Func<T, Boolean>>, Expression<Func<T, Int32>>)
  nameWithType: RepositoryWrapper<T>.Sum(Expression<Func<T, Boolean>>, Expression<Func<T, Int32>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Sum(System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<T, System.Int32>>)
  nameWithType.vb: RepositoryWrapper(Of T).Sum(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Int32)))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Sum(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Int32)))
  name.vb: Sum(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Int32)))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Int32}})
    name: Sum
    nameWithType: RepositoryWrapper<T>.Sum
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Sum
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Int32}})
    name: Sum
    nameWithType: RepositoryWrapper(Of T).Sum
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Sum
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int32}}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int32}}})
  isExternal: true
  name: Sum(Expression<Func<T, Nullable<Int32>>>)
  nameWithType: RepositoryWrapper<T>.Sum(Expression<Func<T, Nullable<Int32>>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Sum(System.Linq.Expressions.Expression<System.Func<T, System.Nullable<System.Int32>>>)
  nameWithType.vb: RepositoryWrapper(Of T).Sum(Expression(Of Func(Of T, Nullable(Of Int32))))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Sum(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Nullable(Of System.Int32))))
  name.vb: Sum(Expression(Of Func(Of T, Nullable(Of Int32))))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int32}}})
    name: Sum
    nameWithType: RepositoryWrapper<T>.Sum
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Sum
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int32}}})
    name: Sum
    nameWithType: RepositoryWrapper(Of T).Sum
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Sum
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int32}}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int32}}})
  isExternal: true
  name: Sum(ISpecification<>, Expression<Func<T, Nullable<Int32>>>)
  nameWithType: RepositoryWrapper<T>.Sum(ISpecification<>, Expression<Func<T, Nullable<Int32>>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Sum(ISpecification<>, System.Linq.Expressions.Expression<System.Func<T, System.Nullable<System.Int32>>>)
  nameWithType.vb: RepositoryWrapper(Of T).Sum(ISpecification(Of ), Expression(Of Func(Of T, Nullable(Of Int32))))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Sum(ISpecification(Of ), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Nullable(Of System.Int32))))
  name.vb: Sum(ISpecification(Of ), Expression(Of Func(Of T, Nullable(Of Int32))))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int32}}})
    name: Sum
    nameWithType: RepositoryWrapper<T>.Sum
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Sum
  - name: (
    nameWithType: (
    fullName: (
  - uid: ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int32}}})
    name: Sum
    nameWithType: RepositoryWrapper(Of T).Sum
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Sum
  - name: (
    nameWithType: (
    fullName: (
  - uid: ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int32}}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int32}}})
  isExternal: true
  name: Sum(Expression<Func<T, Boolean>>, Expression<Func<T, Nullable<Int32>>>)
  nameWithType: RepositoryWrapper<T>.Sum(Expression<Func<T, Boolean>>, Expression<Func<T, Nullable<Int32>>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Sum(System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<T, System.Nullable<System.Int32>>>)
  nameWithType.vb: RepositoryWrapper(Of T).Sum(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Nullable(Of Int32))))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Sum(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Nullable(Of System.Int32))))
  name.vb: Sum(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Nullable(Of Int32))))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int32}}})
    name: Sum
    nameWithType: RepositoryWrapper<T>.Sum
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Sum
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int32}}})
    name: Sum
    nameWithType: RepositoryWrapper(Of T).Sum
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Sum
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Int64}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Int64}})
  isExternal: true
  name: Sum(Expression<Func<T, Int64>>)
  nameWithType: RepositoryWrapper<T>.Sum(Expression<Func<T, Int64>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Sum(System.Linq.Expressions.Expression<System.Func<T, System.Int64>>)
  nameWithType.vb: RepositoryWrapper(Of T).Sum(Expression(Of Func(Of T, Int64)))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Sum(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Int64)))
  name.vb: Sum(Expression(Of Func(Of T, Int64)))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Int64}})
    name: Sum
    nameWithType: RepositoryWrapper<T>.Sum
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Sum
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Int64}})
    name: Sum
    nameWithType: RepositoryWrapper(Of T).Sum
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Sum
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Int64}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Int64}})
  isExternal: true
  name: Sum(ISpecification<>, Expression<Func<T, Int64>>)
  nameWithType: RepositoryWrapper<T>.Sum(ISpecification<>, Expression<Func<T, Int64>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Sum(ISpecification<>, System.Linq.Expressions.Expression<System.Func<T, System.Int64>>)
  nameWithType.vb: RepositoryWrapper(Of T).Sum(ISpecification(Of ), Expression(Of Func(Of T, Int64)))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Sum(ISpecification(Of ), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Int64)))
  name.vb: Sum(ISpecification(Of ), Expression(Of Func(Of T, Int64)))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Int64}})
    name: Sum
    nameWithType: RepositoryWrapper<T>.Sum
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Sum
  - name: (
    nameWithType: (
    fullName: (
  - uid: ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Int64}})
    name: Sum
    nameWithType: RepositoryWrapper(Of T).Sum
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Sum
  - name: (
    nameWithType: (
    fullName: (
  - uid: ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Int64}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Int64}})
  isExternal: true
  name: Sum(Expression<Func<T, Boolean>>, Expression<Func<T, Int64>>)
  nameWithType: RepositoryWrapper<T>.Sum(Expression<Func<T, Boolean>>, Expression<Func<T, Int64>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Sum(System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<T, System.Int64>>)
  nameWithType.vb: RepositoryWrapper(Of T).Sum(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Int64)))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Sum(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Int64)))
  name.vb: Sum(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Int64)))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Int64}})
    name: Sum
    nameWithType: RepositoryWrapper<T>.Sum
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Sum
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Int64}})
    name: Sum
    nameWithType: RepositoryWrapper(Of T).Sum
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Sum
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int64}}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int64}}})
  isExternal: true
  name: Sum(Expression<Func<T, Nullable<Int64>>>)
  nameWithType: RepositoryWrapper<T>.Sum(Expression<Func<T, Nullable<Int64>>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Sum(System.Linq.Expressions.Expression<System.Func<T, System.Nullable<System.Int64>>>)
  nameWithType.vb: RepositoryWrapper(Of T).Sum(Expression(Of Func(Of T, Nullable(Of Int64))))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Sum(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Nullable(Of System.Int64))))
  name.vb: Sum(Expression(Of Func(Of T, Nullable(Of Int64))))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int64}}})
    name: Sum
    nameWithType: RepositoryWrapper<T>.Sum
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Sum
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int64}}})
    name: Sum
    nameWithType: RepositoryWrapper(Of T).Sum
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Sum
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int64}}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int64}}})
  isExternal: true
  name: Sum(ISpecification<>, Expression<Func<T, Nullable<Int64>>>)
  nameWithType: RepositoryWrapper<T>.Sum(ISpecification<>, Expression<Func<T, Nullable<Int64>>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Sum(ISpecification<>, System.Linq.Expressions.Expression<System.Func<T, System.Nullable<System.Int64>>>)
  nameWithType.vb: RepositoryWrapper(Of T).Sum(ISpecification(Of ), Expression(Of Func(Of T, Nullable(Of Int64))))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Sum(ISpecification(Of ), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Nullable(Of System.Int64))))
  name.vb: Sum(ISpecification(Of ), Expression(Of Func(Of T, Nullable(Of Int64))))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int64}}})
    name: Sum
    nameWithType: RepositoryWrapper<T>.Sum
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Sum
  - name: (
    nameWithType: (
    fullName: (
  - uid: ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int64}}})
    name: Sum
    nameWithType: RepositoryWrapper(Of T).Sum
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Sum
  - name: (
    nameWithType: (
    fullName: (
  - uid: ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int64}}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int64}}})
  isExternal: true
  name: Sum(Expression<Func<T, Boolean>>, Expression<Func<T, Nullable<Int64>>>)
  nameWithType: RepositoryWrapper<T>.Sum(Expression<Func<T, Boolean>>, Expression<Func<T, Nullable<Int64>>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Sum(System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<T, System.Nullable<System.Int64>>>)
  nameWithType.vb: RepositoryWrapper(Of T).Sum(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Nullable(Of Int64))))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Sum(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Nullable(Of System.Int64))))
  name.vb: Sum(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Nullable(Of Int64))))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int64}}})
    name: Sum
    nameWithType: RepositoryWrapper<T>.Sum
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Sum
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int64}}})
    name: Sum
    nameWithType: RepositoryWrapper(Of T).Sum
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Sum
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}})
  isExternal: true
  name: Sum(Expression<Func<T, Decimal>>)
  nameWithType: RepositoryWrapper<T>.Sum(Expression<Func<T, Decimal>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Sum(System.Linq.Expressions.Expression<System.Func<T, System.Decimal>>)
  nameWithType.vb: RepositoryWrapper(Of T).Sum(Expression(Of Func(Of T, Decimal)))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Sum(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Decimal)))
  name.vb: Sum(Expression(Of Func(Of T, Decimal)))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}})
    name: Sum
    nameWithType: RepositoryWrapper<T>.Sum
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Sum
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}})
    name: Sum
    nameWithType: RepositoryWrapper(Of T).Sum
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Sum
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}})
  isExternal: true
  name: Sum(ISpecification<>, Expression<Func<T, Decimal>>)
  nameWithType: RepositoryWrapper<T>.Sum(ISpecification<>, Expression<Func<T, Decimal>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Sum(ISpecification<>, System.Linq.Expressions.Expression<System.Func<T, System.Decimal>>)
  nameWithType.vb: RepositoryWrapper(Of T).Sum(ISpecification(Of ), Expression(Of Func(Of T, Decimal)))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Sum(ISpecification(Of ), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Decimal)))
  name.vb: Sum(ISpecification(Of ), Expression(Of Func(Of T, Decimal)))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}})
    name: Sum
    nameWithType: RepositoryWrapper<T>.Sum
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Sum
  - name: (
    nameWithType: (
    fullName: (
  - uid: ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}})
    name: Sum
    nameWithType: RepositoryWrapper(Of T).Sum
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Sum
  - name: (
    nameWithType: (
    fullName: (
  - uid: ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}})
  isExternal: true
  name: Sum(Expression<Func<T, Boolean>>, Expression<Func<T, Decimal>>)
  nameWithType: RepositoryWrapper<T>.Sum(Expression<Func<T, Boolean>>, Expression<Func<T, Decimal>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Sum(System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<T, System.Decimal>>)
  nameWithType.vb: RepositoryWrapper(Of T).Sum(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Decimal)))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Sum(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Decimal)))
  name.vb: Sum(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Decimal)))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}})
    name: Sum
    nameWithType: RepositoryWrapper<T>.Sum
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Sum
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}})
    name: Sum
    nameWithType: RepositoryWrapper(Of T).Sum
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Sum
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Decimal}}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Decimal}}})
  isExternal: true
  name: Sum(Expression<Func<T, Nullable<Decimal>>>)
  nameWithType: RepositoryWrapper<T>.Sum(Expression<Func<T, Nullable<Decimal>>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Sum(System.Linq.Expressions.Expression<System.Func<T, System.Nullable<System.Decimal>>>)
  nameWithType.vb: RepositoryWrapper(Of T).Sum(Expression(Of Func(Of T, Nullable(Of Decimal))))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Sum(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Nullable(Of System.Decimal))))
  name.vb: Sum(Expression(Of Func(Of T, Nullable(Of Decimal))))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Decimal}}})
    name: Sum
    nameWithType: RepositoryWrapper<T>.Sum
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Sum
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Decimal}}})
    name: Sum
    nameWithType: RepositoryWrapper(Of T).Sum
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Sum
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Decimal}}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Decimal}}})
  isExternal: true
  name: Sum(ISpecification<>, Expression<Func<T, Nullable<Decimal>>>)
  nameWithType: RepositoryWrapper<T>.Sum(ISpecification<>, Expression<Func<T, Nullable<Decimal>>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Sum(ISpecification<>, System.Linq.Expressions.Expression<System.Func<T, System.Nullable<System.Decimal>>>)
  nameWithType.vb: RepositoryWrapper(Of T).Sum(ISpecification(Of ), Expression(Of Func(Of T, Nullable(Of Decimal))))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Sum(ISpecification(Of ), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Nullable(Of System.Decimal))))
  name.vb: Sum(ISpecification(Of ), Expression(Of Func(Of T, Nullable(Of Decimal))))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Decimal}}})
    name: Sum
    nameWithType: RepositoryWrapper<T>.Sum
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Sum
  - name: (
    nameWithType: (
    fullName: (
  - uid: ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Decimal}}})
    name: Sum
    nameWithType: RepositoryWrapper(Of T).Sum
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Sum
  - name: (
    nameWithType: (
    fullName: (
  - uid: ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Decimal}}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Decimal}}})
  isExternal: true
  name: Sum(Expression<Func<T, Boolean>>, Expression<Func<T, Nullable<Decimal>>>)
  nameWithType: RepositoryWrapper<T>.Sum(Expression<Func<T, Boolean>>, Expression<Func<T, Nullable<Decimal>>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Sum(System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<T, System.Nullable<System.Decimal>>>)
  nameWithType.vb: RepositoryWrapper(Of T).Sum(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Nullable(Of Decimal))))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Sum(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Nullable(Of System.Decimal))))
  name.vb: Sum(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Nullable(Of Decimal))))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Decimal}}})
    name: Sum
    nameWithType: RepositoryWrapper<T>.Sum
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Sum
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Decimal}}})
    name: Sum
    nameWithType: RepositoryWrapper(Of T).Sum
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Sum
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Double}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Double}})
  isExternal: true
  name: Sum(Expression<Func<T, Double>>)
  nameWithType: RepositoryWrapper<T>.Sum(Expression<Func<T, Double>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Sum(System.Linq.Expressions.Expression<System.Func<T, System.Double>>)
  nameWithType.vb: RepositoryWrapper(Of T).Sum(Expression(Of Func(Of T, Double)))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Sum(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Double)))
  name.vb: Sum(Expression(Of Func(Of T, Double)))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Double}})
    name: Sum
    nameWithType: RepositoryWrapper<T>.Sum
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Sum
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Double}})
    name: Sum
    nameWithType: RepositoryWrapper(Of T).Sum
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Sum
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Double}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Double}})
  isExternal: true
  name: Sum(ISpecification<>, Expression<Func<T, Double>>)
  nameWithType: RepositoryWrapper<T>.Sum(ISpecification<>, Expression<Func<T, Double>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Sum(ISpecification<>, System.Linq.Expressions.Expression<System.Func<T, System.Double>>)
  nameWithType.vb: RepositoryWrapper(Of T).Sum(ISpecification(Of ), Expression(Of Func(Of T, Double)))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Sum(ISpecification(Of ), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Double)))
  name.vb: Sum(ISpecification(Of ), Expression(Of Func(Of T, Double)))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Double}})
    name: Sum
    nameWithType: RepositoryWrapper<T>.Sum
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Sum
  - name: (
    nameWithType: (
    fullName: (
  - uid: ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Double}})
    name: Sum
    nameWithType: RepositoryWrapper(Of T).Sum
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Sum
  - name: (
    nameWithType: (
    fullName: (
  - uid: ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Double}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Double}})
  isExternal: true
  name: Sum(Expression<Func<T, Boolean>>, Expression<Func<T, Double>>)
  nameWithType: RepositoryWrapper<T>.Sum(Expression<Func<T, Boolean>>, Expression<Func<T, Double>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Sum(System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<T, System.Double>>)
  nameWithType.vb: RepositoryWrapper(Of T).Sum(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Double)))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Sum(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Double)))
  name.vb: Sum(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Double)))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Double}})
    name: Sum
    nameWithType: RepositoryWrapper<T>.Sum
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Sum
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Double}})
    name: Sum
    nameWithType: RepositoryWrapper(Of T).Sum
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Sum
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Double}}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Double}}})
  isExternal: true
  name: Sum(Expression<Func<T, Nullable<Double>>>)
  nameWithType: RepositoryWrapper<T>.Sum(Expression<Func<T, Nullable<Double>>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Sum(System.Linq.Expressions.Expression<System.Func<T, System.Nullable<System.Double>>>)
  nameWithType.vb: RepositoryWrapper(Of T).Sum(Expression(Of Func(Of T, Nullable(Of Double))))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Sum(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Nullable(Of System.Double))))
  name.vb: Sum(Expression(Of Func(Of T, Nullable(Of Double))))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Double}}})
    name: Sum
    nameWithType: RepositoryWrapper<T>.Sum
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Sum
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Double}}})
    name: Sum
    nameWithType: RepositoryWrapper(Of T).Sum
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Sum
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Double}}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Double}}})
  isExternal: true
  name: Sum(ISpecification<>, Expression<Func<T, Nullable<Double>>>)
  nameWithType: RepositoryWrapper<T>.Sum(ISpecification<>, Expression<Func<T, Nullable<Double>>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Sum(ISpecification<>, System.Linq.Expressions.Expression<System.Func<T, System.Nullable<System.Double>>>)
  nameWithType.vb: RepositoryWrapper(Of T).Sum(ISpecification(Of ), Expression(Of Func(Of T, Nullable(Of Double))))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Sum(ISpecification(Of ), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Nullable(Of System.Double))))
  name.vb: Sum(ISpecification(Of ), Expression(Of Func(Of T, Nullable(Of Double))))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Double}}})
    name: Sum
    nameWithType: RepositoryWrapper<T>.Sum
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Sum
  - name: (
    nameWithType: (
    fullName: (
  - uid: ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Double}}})
    name: Sum
    nameWithType: RepositoryWrapper(Of T).Sum
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Sum
  - name: (
    nameWithType: (
    fullName: (
  - uid: ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Double}}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Double}}})
  isExternal: true
  name: Sum(Expression<Func<T, Boolean>>, Expression<Func<T, Nullable<Double>>>)
  nameWithType: RepositoryWrapper<T>.Sum(Expression<Func<T, Boolean>>, Expression<Func<T, Nullable<Double>>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Sum(System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<T, System.Nullable<System.Double>>>)
  nameWithType.vb: RepositoryWrapper(Of T).Sum(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Nullable(Of Double))))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Sum(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Nullable(Of System.Double))))
  name.vb: Sum(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Nullable(Of Double))))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Double}}})
    name: Sum
    nameWithType: RepositoryWrapper<T>.Sum
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Sum
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Double}}})
    name: Sum
    nameWithType: RepositoryWrapper(Of T).Sum
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Sum
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Single}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Single}})
  isExternal: true
  name: Sum(Expression<Func<T, Single>>)
  nameWithType: RepositoryWrapper<T>.Sum(Expression<Func<T, Single>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Sum(System.Linq.Expressions.Expression<System.Func<T, System.Single>>)
  nameWithType.vb: RepositoryWrapper(Of T).Sum(Expression(Of Func(Of T, Single)))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Sum(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Single)))
  name.vb: Sum(Expression(Of Func(Of T, Single)))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Single}})
    name: Sum
    nameWithType: RepositoryWrapper<T>.Sum
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Sum
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Single}})
    name: Sum
    nameWithType: RepositoryWrapper(Of T).Sum
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Sum
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Single}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Single}})
  isExternal: true
  name: Sum(ISpecification<>, Expression<Func<T, Single>>)
  nameWithType: RepositoryWrapper<T>.Sum(ISpecification<>, Expression<Func<T, Single>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Sum(ISpecification<>, System.Linq.Expressions.Expression<System.Func<T, System.Single>>)
  nameWithType.vb: RepositoryWrapper(Of T).Sum(ISpecification(Of ), Expression(Of Func(Of T, Single)))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Sum(ISpecification(Of ), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Single)))
  name.vb: Sum(ISpecification(Of ), Expression(Of Func(Of T, Single)))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Single}})
    name: Sum
    nameWithType: RepositoryWrapper<T>.Sum
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Sum
  - name: (
    nameWithType: (
    fullName: (
  - uid: ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Single}})
    name: Sum
    nameWithType: RepositoryWrapper(Of T).Sum
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Sum
  - name: (
    nameWithType: (
    fullName: (
  - uid: ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Single}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Single}})
  isExternal: true
  name: Sum(Expression<Func<T, Boolean>>, Expression<Func<T, Single>>)
  nameWithType: RepositoryWrapper<T>.Sum(Expression<Func<T, Boolean>>, Expression<Func<T, Single>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Sum(System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<T, System.Single>>)
  nameWithType.vb: RepositoryWrapper(Of T).Sum(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Single)))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Sum(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Single)))
  name.vb: Sum(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Single)))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Single}})
    name: Sum
    nameWithType: RepositoryWrapper<T>.Sum
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Sum
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Single}})
    name: Sum
    nameWithType: RepositoryWrapper(Of T).Sum
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Sum
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Single}}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Single}}})
  isExternal: true
  name: Sum(Expression<Func<T, Nullable<Single>>>)
  nameWithType: RepositoryWrapper<T>.Sum(Expression<Func<T, Nullable<Single>>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Sum(System.Linq.Expressions.Expression<System.Func<T, System.Nullable<System.Single>>>)
  nameWithType.vb: RepositoryWrapper(Of T).Sum(Expression(Of Func(Of T, Nullable(Of Single))))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Sum(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Nullable(Of System.Single))))
  name.vb: Sum(Expression(Of Func(Of T, Nullable(Of Single))))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Single}}})
    name: Sum
    nameWithType: RepositoryWrapper<T>.Sum
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Sum
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Single}}})
    name: Sum
    nameWithType: RepositoryWrapper(Of T).Sum
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Sum
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Single}}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Single}}})
  isExternal: true
  name: Sum(ISpecification<>, Expression<Func<T, Nullable<Single>>>)
  nameWithType: RepositoryWrapper<T>.Sum(ISpecification<>, Expression<Func<T, Nullable<Single>>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Sum(ISpecification<>, System.Linq.Expressions.Expression<System.Func<T, System.Nullable<System.Single>>>)
  nameWithType.vb: RepositoryWrapper(Of T).Sum(ISpecification(Of ), Expression(Of Func(Of T, Nullable(Of Single))))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Sum(ISpecification(Of ), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Nullable(Of System.Single))))
  name.vb: Sum(ISpecification(Of ), Expression(Of Func(Of T, Nullable(Of Single))))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Single}}})
    name: Sum
    nameWithType: RepositoryWrapper<T>.Sum
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Sum
  - name: (
    nameWithType: (
    fullName: (
  - uid: ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Single}}})
    name: Sum
    nameWithType: RepositoryWrapper(Of T).Sum
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Sum
  - name: (
    nameWithType: (
    fullName: (
  - uid: ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Single}}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Single}}})
  isExternal: true
  name: Sum(Expression<Func<T, Boolean>>, Expression<Func<T, Nullable<Single>>>)
  nameWithType: RepositoryWrapper<T>.Sum(Expression<Func<T, Boolean>>, Expression<Func<T, Nullable<Single>>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Sum(System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<T, System.Nullable<System.Single>>>)
  nameWithType.vb: RepositoryWrapper(Of T).Sum(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Nullable(Of Single))))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Sum(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Nullable(Of System.Single))))
  name.vb: Sum(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Nullable(Of Single))))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Single}}})
    name: Sum
    nameWithType: RepositoryWrapper<T>.Sum
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Sum
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Single}}})
    name: Sum
    nameWithType: RepositoryWrapper(Of T).Sum
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Sum
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.TryFind(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},`0@)
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.TryFind(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},`0@)
  isExternal: true
  name: TryFind(Expression<Func<T, Boolean>>, T)
  nameWithType: RepositoryWrapper<T>.TryFind(Expression<Func<T, Boolean>>, T)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.TryFind(System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>, T)
  nameWithType.vb: RepositoryWrapper(Of T).TryFind(Expression(Of Func(Of T, Boolean)), T)
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).TryFind(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)), T)
  name.vb: TryFind(Expression(Of Func(Of T, Boolean)), T)
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.TryFind(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},`0@)
    name: TryFind
    nameWithType: RepositoryWrapper<T>.TryFind
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.TryFind
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.TryFind(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},`0@)
    name: TryFind
    nameWithType: RepositoryWrapper(Of T).TryFind
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).TryFind
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.TryFind(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},IQueryOptions{`0},`0@)
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.TryFind(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},IQueryOptions{`0},`0@)
  isExternal: true
  name: TryFind(Expression<Func<T, Boolean>>, IQueryOptions<>, T)
  nameWithType: RepositoryWrapper<T>.TryFind(Expression<Func<T, Boolean>>, IQueryOptions<>, T)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.TryFind(System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>, IQueryOptions<>, T)
  nameWithType.vb: RepositoryWrapper(Of T).TryFind(Expression(Of Func(Of T, Boolean)), IQueryOptions(Of ), T)
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).TryFind(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)), IQueryOptions(Of ), T)
  name.vb: TryFind(Expression(Of Func(Of T, Boolean)), IQueryOptions(Of ), T)
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.TryFind(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},IQueryOptions{`0},`0@)
    name: TryFind
    nameWithType: RepositoryWrapper<T>.TryFind
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.TryFind
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: IQueryOptions
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.TryFind(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},IQueryOptions{`0},`0@)
    name: TryFind
    nameWithType: RepositoryWrapper(Of T).TryFind
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).TryFind
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: IQueryOptions
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.TryFind``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},``0@)
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.TryFind``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},``0@)
  isExternal: true
  name: TryFind<TResult>(Expression<Func<T, Boolean>>, Expression<Func<T, TResult>>, TResult)
  nameWithType: RepositoryWrapper<T>.TryFind<TResult>(Expression<Func<T, Boolean>>, Expression<Func<T, TResult>>, TResult)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.TryFind<TResult>(System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<T, TResult>>, TResult)
  nameWithType.vb: RepositoryWrapper(Of T).TryFind(Of TResult)(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, TResult)), TResult)
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).TryFind(Of TResult)(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of T, TResult)), TResult)
  name.vb: TryFind(Of TResult)(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, TResult)), TResult)
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.TryFind``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},``0@)
    name: TryFind<TResult>
    nameWithType: RepositoryWrapper<T>.TryFind<TResult>
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.TryFind<TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.TryFind``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},``0@)
    name: TryFind(Of TResult)
    nameWithType: RepositoryWrapper(Of T).TryFind(Of TResult)
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).TryFind(Of TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.TryFind``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},IQueryOptions{`0},``0@)
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.TryFind``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},IQueryOptions{`0},``0@)
  isExternal: true
  name: TryFind<TResult>(Expression<Func<T, Boolean>>, Expression<Func<T, TResult>>, IQueryOptions<>, TResult)
  nameWithType: RepositoryWrapper<T>.TryFind<TResult>(Expression<Func<T, Boolean>>, Expression<Func<T, TResult>>, IQueryOptions<>, TResult)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.TryFind<TResult>(System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<T, TResult>>, IQueryOptions<>, TResult)
  nameWithType.vb: RepositoryWrapper(Of T).TryFind(Of TResult)(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, TResult)), IQueryOptions(Of ), TResult)
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).TryFind(Of TResult)(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of T, TResult)), IQueryOptions(Of ), TResult)
  name.vb: TryFind(Of TResult)(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, TResult)), IQueryOptions(Of ), TResult)
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.TryFind``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},IQueryOptions{`0},``0@)
    name: TryFind<TResult>
    nameWithType: RepositoryWrapper<T>.TryFind<TResult>
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.TryFind<TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: IQueryOptions
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.TryFind``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},IQueryOptions{`0},``0@)
    name: TryFind(Of TResult)
    nameWithType: RepositoryWrapper(Of T).TryFind(Of TResult)
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).TryFind(Of TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: IQueryOptions
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.TryFind(ISpecification{`0},`0@)
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.TryFind(ISpecification{`0},`0@)
  isExternal: true
  name: TryFind(ISpecification<>, T)
  nameWithType: RepositoryWrapper<T>.TryFind(ISpecification<>, T)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.TryFind(ISpecification<>, T)
  nameWithType.vb: RepositoryWrapper(Of T).TryFind(ISpecification(Of ), T)
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).TryFind(ISpecification(Of ), T)
  name.vb: TryFind(ISpecification(Of ), T)
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.TryFind(ISpecification{`0},`0@)
    name: TryFind
    nameWithType: RepositoryWrapper<T>.TryFind
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.TryFind
  - name: (
    nameWithType: (
    fullName: (
  - uid: ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.TryFind(ISpecification{`0},`0@)
    name: TryFind
    nameWithType: RepositoryWrapper(Of T).TryFind
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).TryFind
  - name: (
    nameWithType: (
    fullName: (
  - uid: ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.TryFind(ISpecification{`0},IQueryOptions{`0},`0@)
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.TryFind(ISpecification{`0},IQueryOptions{`0},`0@)
  isExternal: true
  name: TryFind(ISpecification<>, IQueryOptions<>, T)
  nameWithType: RepositoryWrapper<T>.TryFind(ISpecification<>, IQueryOptions<>, T)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.TryFind(ISpecification<>, IQueryOptions<>, T)
  nameWithType.vb: RepositoryWrapper(Of T).TryFind(ISpecification(Of ), IQueryOptions(Of ), T)
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).TryFind(ISpecification(Of ), IQueryOptions(Of ), T)
  name.vb: TryFind(ISpecification(Of ), IQueryOptions(Of ), T)
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.TryFind(ISpecification{`0},IQueryOptions{`0},`0@)
    name: TryFind
    nameWithType: RepositoryWrapper<T>.TryFind
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.TryFind
  - name: (
    nameWithType: (
    fullName: (
  - uid: ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: IQueryOptions
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.TryFind(ISpecification{`0},IQueryOptions{`0},`0@)
    name: TryFind
    nameWithType: RepositoryWrapper(Of T).TryFind
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).TryFind
  - name: (
    nameWithType: (
    fullName: (
  - uid: ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: IQueryOptions
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.TryFind``1(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}},``0@)
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.TryFind``1(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}},``0@)
  isExternal: true
  name: TryFind<TResult>(ISpecification<>, Expression<Func<T, TResult>>, TResult)
  nameWithType: RepositoryWrapper<T>.TryFind<TResult>(ISpecification<>, Expression<Func<T, TResult>>, TResult)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.TryFind<TResult>(ISpecification<>, System.Linq.Expressions.Expression<System.Func<T, TResult>>, TResult)
  nameWithType.vb: RepositoryWrapper(Of T).TryFind(Of TResult)(ISpecification(Of ), Expression(Of Func(Of T, TResult)), TResult)
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).TryFind(Of TResult)(ISpecification(Of ), System.Linq.Expressions.Expression(Of System.Func(Of T, TResult)), TResult)
  name.vb: TryFind(Of TResult)(ISpecification(Of ), Expression(Of Func(Of T, TResult)), TResult)
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.TryFind``1(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}},``0@)
    name: TryFind<TResult>
    nameWithType: RepositoryWrapper<T>.TryFind<TResult>
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.TryFind<TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.TryFind``1(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}},``0@)
    name: TryFind(Of TResult)
    nameWithType: RepositoryWrapper(Of T).TryFind(Of TResult)
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).TryFind(Of TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.TryFind``1(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}},IQueryOptions{`0},``0@)
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.TryFind``1(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}},IQueryOptions{`0},``0@)
  isExternal: true
  name: TryFind<TResult>(ISpecification<>, Expression<Func<T, TResult>>, IQueryOptions<>, TResult)
  nameWithType: RepositoryWrapper<T>.TryFind<TResult>(ISpecification<>, Expression<Func<T, TResult>>, IQueryOptions<>, TResult)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.TryFind<TResult>(ISpecification<>, System.Linq.Expressions.Expression<System.Func<T, TResult>>, IQueryOptions<>, TResult)
  nameWithType.vb: RepositoryWrapper(Of T).TryFind(Of TResult)(ISpecification(Of ), Expression(Of Func(Of T, TResult)), IQueryOptions(Of ), TResult)
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).TryFind(Of TResult)(ISpecification(Of ), System.Linq.Expressions.Expression(Of System.Func(Of T, TResult)), IQueryOptions(Of ), TResult)
  name.vb: TryFind(Of TResult)(ISpecification(Of ), Expression(Of Func(Of T, TResult)), IQueryOptions(Of ), TResult)
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.TryFind``1(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}},IQueryOptions{`0},``0@)
    name: TryFind<TResult>
    nameWithType: RepositoryWrapper<T>.TryFind<TResult>
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.TryFind<TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: IQueryOptions
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.TryFind``1(ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}},IQueryOptions{`0},``0@)
    name: TryFind(Of TResult)
    nameWithType: RepositoryWrapper(Of T).TryFind(Of TResult)
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).TryFind(Of TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: IQueryOptions
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.TryGet(System.String,`0@)
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.TryGet(System.String,`0@)
  isExternal: true
  name: TryGet(String, T)
  nameWithType: RepositoryWrapper<T>.TryGet(String, T)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.TryGet(System.String, T)
  nameWithType.vb: RepositoryWrapper(Of T).TryGet(String, T)
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).TryGet(System.String, T)
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.TryGet(System.String,`0@)
    name: TryGet
    nameWithType: RepositoryWrapper<T>.TryGet
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.TryGet
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.TryGet(System.String,`0@)
    name: TryGet
    nameWithType: RepositoryWrapper(Of T).TryGet
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).TryGet
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.TryGet``1(System.String,System.Linq.Expressions.Expression{System.Func{`0,``0}},``0@)
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.TryGet``1(System.String,System.Linq.Expressions.Expression{System.Func{`0,``0}},``0@)
  isExternal: true
  name: TryGet<TResult>(String, Expression<Func<T, TResult>>, TResult)
  nameWithType: RepositoryWrapper<T>.TryGet<TResult>(String, Expression<Func<T, TResult>>, TResult)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.TryGet<TResult>(System.String, System.Linq.Expressions.Expression<System.Func<T, TResult>>, TResult)
  nameWithType.vb: RepositoryWrapper(Of T).TryGet(Of TResult)(String, Expression(Of Func(Of T, TResult)), TResult)
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).TryGet(Of TResult)(System.String, System.Linq.Expressions.Expression(Of System.Func(Of T, TResult)), TResult)
  name.vb: TryGet(Of TResult)(String, Expression(Of Func(Of T, TResult)), TResult)
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.TryGet``1(System.String,System.Linq.Expressions.Expression{System.Func{`0,``0}},``0@)
    name: TryGet<TResult>
    nameWithType: RepositoryWrapper<T>.TryGet<TResult>
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.TryGet<TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.TryGet``1(System.String,System.Linq.Expressions.Expression{System.Func{`0,``0}},``0@)
    name: TryGet(Of TResult)
    nameWithType: RepositoryWrapper(Of T).TryGet(Of TResult)
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).TryGet(Of TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Update(`0)
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Update(`0)
  name: Update(T)
  nameWithType: RepositoryWrapper<T>.Update(T)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Update(T)
  nameWithType.vb: RepositoryWrapper(Of T).Update(T)
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Update(T)
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Update(`0)
    name: Update
    nameWithType: RepositoryWrapper<T>.Update
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Update
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Update(`0)
    name: Update
    nameWithType: RepositoryWrapper(Of T).Update
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Update
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Update(System.Collections.Generic.IEnumerable{`0})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Update(System.Collections.Generic.IEnumerable{`0})
  isExternal: true
  name: Update(IEnumerable<T>)
  nameWithType: RepositoryWrapper<T>.Update(IEnumerable<T>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Update(System.Collections.Generic.IEnumerable<T>)
  nameWithType.vb: RepositoryWrapper(Of T).Update(IEnumerable(Of T))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Update(System.Collections.Generic.IEnumerable(Of T))
  name.vb: Update(IEnumerable(Of T))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Update(System.Collections.Generic.IEnumerable{`0})
    name: Update
    nameWithType: RepositoryWrapper<T>.Update
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Update
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Update(System.Collections.Generic.IEnumerable{`0})
    name: Update
    nameWithType: RepositoryWrapper(Of T).Update
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Update
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Modules.Authentication.Repository.AuthCredentialRepository.#ctor*
  commentId: Overload:Catalyst.Core.Modules.Authentication.Repository.AuthCredentialRepository.#ctor
  name: AuthCredentialRepository
  nameWithType: AuthCredentialRepository.AuthCredentialRepository
  fullName: Catalyst.Core.Modules.Authentication.Repository.AuthCredentialRepository.AuthCredentialRepository
- uid: IRepository{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.String}
  commentId: '!:IRepository{Catalyst.Core.Modules.Authentication.Models.AuthCredentials,System.String}'
  definition: IRepository`2
  name: IRepository<AuthCredentials, String>
  nameWithType: IRepository<AuthCredentials, String>
  fullName: IRepository<Catalyst.Core.Modules.Authentication.Models.AuthCredentials, System.String>
  nameWithType.vb: IRepository(Of AuthCredentials, String)
  fullName.vb: IRepository(Of Catalyst.Core.Modules.Authentication.Models.AuthCredentials, System.String)
  name.vb: IRepository(Of AuthCredentials, String)
  spec.csharp:
  - uid: IRepository`2
    name: IRepository
    nameWithType: IRepository
    fullName: IRepository
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IRepository`2
    name: IRepository
    nameWithType: IRepository
    fullName: IRepository
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
    name: AuthCredentials
    nameWithType: AuthCredentials
    fullName: Catalyst.Core.Modules.Authentication.Models.AuthCredentials
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: IRepository`2
  commentId: '!:IRepository`2'
  isExternal: true
  name: IRepository<, >
  nameWithType: IRepository<, >
  fullName: IRepository<, >
  nameWithType.vb: IRepository(Of , )
  fullName.vb: IRepository(Of , )
  name.vb: IRepository(Of , )
  spec.csharp:
  - uid: IRepository`2
    name: IRepository
    nameWithType: IRepository
    fullName: IRepository
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IRepository`2
    name: IRepository
    nameWithType: IRepository
    fullName: IRepository
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
